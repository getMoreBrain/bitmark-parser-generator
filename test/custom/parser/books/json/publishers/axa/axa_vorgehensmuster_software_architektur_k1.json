[
  {
    "bitmark": "[.book]\n[@id:137772]\n[#Vorgehensmuster Software Architektur]\n[@coverImage:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/axa_3c_buch_vorgehen_cover.png]\n[@externalId:e-vorgehensmuster-software-architektur_ujtv9zv-xokj]",
    "bit": {
      "type": "book",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "137772"
      ],
      "title": "Vorgehensmuster Software Architektur",
      "coverImage": [
        "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/axa_3c_buch_vorgehen_cover.png"
      ],
      "externalId": [
        "e-vorgehensmuster-software-architektur_ujtv9zv-xokj"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137773]\n[%1]\n[#Einleitung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 1,
      "progress": true,
      "toc": true,
      "id": [
        "137773"
      ],
      "title": "Einleitung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137774]\nLesen Sie dieses Buch nicht. Legen Sie es weg. Jetzt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Lesen Sie dieses Buch nicht. Legen Sie es weg. Jetzt.",
      "id": [
        "137774"
      ]
    }
  },
  {
    "bitmark": "[.article]\n[@id:137775]\nFalls Sie dieser Empfehlung nicht gefolgt sind, haben Sie eine wichtige Voraussetzung für die erfolgreiche Lektüre bereits erfüllt: Sie glauben mir nicht alles, sondern denken selbst. Die anderen Voraussetzungen schaffe ich in diesem Kapitel. Ich bringe Ihnen zunächst die Form und das Thema des Buchs näher, erläutere grob den Aufbau und gebe einige (ernst gemeinte) Hinweise zum Umgang mit den Inhalten und Konzepten. Dazwischen erfahren Sie, ob dieses Buch etwas für Sie ist – das „Mission Statement“ grenzt die Inhalte zu anderen Büchern ab und definiert die Zielgruppe.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Falls Sie dieser Empfehlung nicht gefolgt sind, haben Sie eine wichtige Voraussetzung für die erfolgreiche Lektüre bereits erfüllt: Sie glauben mir nicht alles, sondern denken selbst. Die anderen Voraussetzungen schaffe ich in diesem Kapitel. Ich bringe Ihnen zunächst die Form und das Thema des Buchs näher, erläutere grob den Aufbau und gebe einige (ernst gemeinte) Hinweise zum Umgang mit den Inhalten und Konzepten. Dazwischen erfahren Sie, ob dieses Buch etwas für Sie ist – das „Mission Statement“ grenzt die Inhalte zu anderen Büchern ab und definiert die Zielgruppe.",
      "id": [
        "137775"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:137776]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k1/axa_vorgehensmuster_software_architektur_k1_1.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "137776"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k1/axa_vorgehensmuster_software_architektur_k1_1.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137777]\n[%1.1]\n[##Kurze Motivation]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "137777"
      ],
      "title": "Kurze Motivation"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137778]\nIch habe dieses Buch erarbeitet, indem ich meine eigene Vorgehensweise angewandt habe. Dazu gehört, dass unwichtige Teile später bearbeitet werden und, wie es mit einer Timebox nun mal ist, eventuell hinten runterfallen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Ich habe dieses Buch erarbeitet, indem ich meine eigene Vorgehensweise angewandt habe. Dazu gehört, dass unwichtige Teile später bearbeitet werden und, wie es mit einer Timebox nun mal ist, eventuell hinten runterfallen.",
      "id": [
        "137778"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137779]\nSo ist es mit der „kurzen Motivation“ passiert, die Sie gerade lesen. Sie war ständig niedrig priorisiert und hat es am Schluss nicht geschafft. Sorry! Ich musste mich auf das Wesentliche konzentrieren: das, was Sie mitnehmen können, das, was Ihre Architekturarbeit bereichert, das, was Sie zum besseren Entwickler und Architekten macht. Da ist kein Platz für Motivation. Sie können es positiv sehen: Sie waren motiviert genug, dieses Buch zu kaufen oder zumindest es aufzuschlagen. Das ist doch was!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "So ist es mit der „kurzen Motivation“ passiert, die Sie gerade lesen. Sie war ständig niedrig priorisiert und hat es am Schluss nicht geschafft. Sorry! Ich musste mich auf das Wesentliche konzentrieren: das, was Sie mitnehmen können, das, was Ihre Architekturarbeit bereichert, das, was Sie zum besseren Entwickler und Architekten macht. Da ist kein Platz für Motivation. Sie können es positiv sehen: Sie waren motiviert genug, dieses Buch zu kaufen oder zumindest es aufzuschlagen. Das ist doch was!",
      "id": [
        "137779"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137780]\nDas Einzige was ich Ihnen hier inhaltlich mitgeben kann, ist ein Zitat von Taiichi Ohno1, das ich schon recht früh in diesen Unterabschnitt geworfen habe, weil es eine zentrale Idee des Buchs gut verkörpert: __„Es gibt so etwas wie Standardarbeit, aber Standards sollten permanent angepasst werden. Wenn Sie vom Standard als das Beste denken, was Sie leisten können, ist alles vorbei.“__ Er fährt fort, indem er sagt, wenn wir etwas als den __„bestmöglichen Weg“__ etablieren, __„wird die Motivation für Kaizen [kontinuierliche iterative Verbesserung] verschwunden sein.“__ [Pop06]2.\n||i know that I don't have to do the footnotes but do I have to format Ohno1 and [Pop06]2 somehow? Or leave it the way it is? Or delete it? - will need footnote||",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Das Einzige was ich Ihnen hier inhaltlich mitgeben kann, ist ein Zitat von Taiichi Ohno1, das ich schon recht früh in diesen Unterabschnitt geworfen habe, weil es eine zentrale Idee des Buchs gut verkörpert: __„Es gibt so etwas wie Standardarbeit, aber Standards sollten permanent angepasst werden. Wenn Sie vom Standard als das Beste denken, was Sie leisten können, ist alles vorbei.“__ Er fährt fort, indem er sagt, wenn wir etwas als den __„bestmöglichen Weg“__ etablieren, __„wird die Motivation für Kaizen [kontinuierliche iterative Verbesserung] verschwunden sein.“__ [Pop06]2.",
      "id": [
        "137780"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137781]\nVersuchen Sie in diesem Sinne, die Inhalte dieses Buchs als alleinstehende, aber kombinierbare Verbesserungsideen Ihrer Praxis zu verstehen. Sie kommen aus einem eher klassischen Projektkontext? Lassen Sie sich von leichtgewichtigeren Ideen inspirieren und verzahnen Sie die Architekturdisziplin effektiv mit der Entwicklung. Sie arbeiten in einem agilen Projekt? Experimenten Sie mit den vorgestellten Praktiken, um Architekturaufgaben effektiver im Team zu erledigen oder ein besseres Gefühl für die Architekturdisziplin zu bekommen. Versuchen Sie, Ihren Standardweg zur Architekturentwicklung zu hinterfragen, Schwächen zu erkennen und Stärken auszubauen. Egal, ob Sie nun eher klassisch oder eher agil unterwegs sind: Werden Sie mit Hilfe dieses Buchs ein bisschen besser. Ständig.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Versuchen Sie in diesem Sinne, die Inhalte dieses Buchs als alleinstehende, aber kombinierbare Verbesserungsideen Ihrer Praxis zu verstehen. Sie kommen aus einem eher klassischen Projektkontext? Lassen Sie sich von leichtgewichtigeren Ideen inspirieren und verzahnen Sie die Architekturdisziplin effektiv mit der Entwicklung. Sie arbeiten in einem agilen Projekt? Experimenten Sie mit den vorgestellten Praktiken, um Architekturaufgaben effektiver im Team zu erledigen oder ein besseres Gefühl für die Architekturdisziplin zu bekommen. Versuchen Sie, Ihren Standardweg zur Architekturentwicklung zu hinterfragen, Schwächen zu erkennen und Stärken auszubauen. Egal, ob Sie nun eher klassisch oder eher agil unterwegs sind: Werden Sie mit Hilfe dieses Buchs ein bisschen besser. Ständig.",
      "id": [
        "137781"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137782]\n[%1.2]\n[##Vorgehensmuster als Mittel der Wahl]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "137782"
      ],
      "title": "Vorgehensmuster als Mittel der Wahl"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137783]\nUm eine stückchenweise Verbesserung an Ihrer Architekturarbeit gut zu unterstützen, habe ich mich dafür entschieden, Patterns bzw. Muster zu beschreiben. Diese Form der Beschreibung auf Methodik- und Vorgehensebene einzusetzen, ist unüblich3, ermöglicht es mir aber, gezielt auf Probleme in Softwareprojekten und bei der Produktentwicklung einzugehen. Mit der Zerlegung in zeitgemäße, problemorientierte Architekturpraktiken ist Architekturvorgehen weniger starr und weniger fordernd. Die Praktiken sind leichter erlernbar, einfacher auszuprobieren und generieren weniger Widerstand in der (Projekt-)Organisation. Statt eines aufwendigen „Tailorings“ nehmen Sie sich einfach, was Sie brauchen.\n||unüblich3 - will need footnote||",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Um eine stückchenweise Verbesserung an Ihrer Architekturarbeit gut zu unterstützen, habe ich mich dafür entschieden, Patterns bzw. Muster zu beschreiben. Diese Form der Beschreibung auf Methodik- und Vorgehensebene einzusetzen, ist unüblich3, ermöglicht es mir aber, gezielt auf Probleme in Softwareprojekten und bei der Produktentwicklung einzugehen. Mit der Zerlegung in zeitgemäße, problemorientierte Architekturpraktiken ist Architekturvorgehen weniger starr und weniger fordernd. Die Praktiken sind leichter erlernbar, einfacher auszuprobieren und generieren weniger Widerstand in der (Projekt-)Organisation. Statt eines aufwendigen „Tailorings“ nehmen Sie sich einfach, was Sie brauchen.",
      "id": [
        "137783"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137784]\nMuster sorgen auch dafür, dass Lösungen wiederkehrender Probleme Namen bekommen. Selbst wenn Sie von der beschriebenen Musterlösung abweichen, müssen Sie Ihren Ansatz nicht von Grund auf neu erklären, sondern können den Unterschied zum bekannten Muster erläutern.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Muster sorgen auch dafür, dass Lösungen wiederkehrender Probleme Namen bekommen. Selbst wenn Sie von der beschriebenen Musterlösung abweichen, müssen Sie Ihren Ansatz nicht von Grund auf neu erklären, sondern können den Unterschied zum bekannten Muster erläutern.",
      "id": [
        "137784"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137785]\nTrotz der Stückelung sind die beschriebenen Praktiken nicht voneinander isoliert. Die Muster verweisen aufeinander und können im Verbund eingesetzt werden – sie helfen so auch architektonisch risikoreichen Vorhaben (siehe Abschnitt 2.1.2). Insgesamt entsteht eine Architekturdisziplin, die schnelle Resultate liefert und Stück für Stück einführbar ist.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Trotz der Stückelung sind die beschriebenen Praktiken nicht voneinander isoliert. Die Muster verweisen aufeinander und können im Verbund eingesetzt werden – sie helfen so auch architektonisch risikoreichen Vorhaben (siehe Abschnitt 2.1.2). Insgesamt entsteht eine Architekturdisziplin, die schnelle Resultate liefert und Stück für Stück einführbar ist.",
      "id": [
        "137785"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137786]\n[%1.3]\n[##Gegenstand: Softwarearchitektur]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "137786"
      ],
      "title": "Gegenstand: Softwarearchitektur"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137787]\nDie Vorgehensmuster dieses Buchs sind nicht nur gut kombinierbar, sie prägen insgesamt auch eine zeitgemäße Vision von Softwarearchitektur aus. Bevor ich in Kapitel 2 inhaltlich in diese Vision einsteige, sei ein kurzer Blick auf die Disziplin an sich gestattet: „Was ist Softwarearchitektur?“",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Vorgehensmuster dieses Buchs sind nicht nur gut kombinierbar, sie prägen insgesamt auch eine zeitgemäße Vision von Softwarearchitektur aus. Bevor ich in Kapitel 2 inhaltlich in diese Vision einsteige, sei ein kurzer Blick auf die Disziplin an sich gestattet: „Was ist Softwarearchitektur?“",
      "id": [
        "137787"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137788]\nWenn Sie diese Frage zehn Softwareentwicklern stellen, werden Sie neun bis zehn unterschiedliche Antworten erhalten. Und das liegt nicht unbedingt an Unwissenheit: Das Software Engineering Institute der Carnegie Mellon Universität sammelt Definitionen für Softwarearchitektur und hält derzeit bei knapp unter 200 [SEI13]. Eine recht einfache und meist konsensfähige Definition kommt von Martin Fowler:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wenn Sie diese Frage zehn Softwareentwicklern stellen, werden Sie neun bis zehn unterschiedliche Antworten erhalten. Und das liegt nicht unbedingt an Unwissenheit: Das Software Engineering Institute der Carnegie Mellon Universität sammelt Definitionen für Softwarearchitektur und hält derzeit bei knapp unter 200 [SEI13]. Eine recht einfache und meist konsensfähige Definition kommt von Martin Fowler:",
      "id": [
        "137788"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137789]\n__„To me the term architecture conveys a notion of the core elements of the system, the pieces that are difficult to change. A foundation on which the rest must be built.“__ [Fow04]4\n||[Fow04]4 - will need footnote||",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__„To me the term architecture conveys a notion of the core elements of the system, the pieces that are difficult to change. A foundation on which the rest must be built.“__ [Fow04]4",
      "id": [
        "137789"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137790]\nObige Aussage ist deshalb sehr reizvoll, weil sie kein Set von zu erstellenden Artefakten vorgibt und keine Entscheidungsarten definiert, die immer architekturrelevant sind. Stattdessen wird eine klare Botschaft formuliert: Wenn es schwer änderbar ist, ist es Softwarearchitektur. Daraus lassen sich zwei wichtige Feststellungen ableiten:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Obige Aussage ist deshalb sehr reizvoll, weil sie kein Set von zu erstellenden Artefakten vorgibt und keine Entscheidungsarten definiert, die immer architekturrelevant sind. Stattdessen wird eine klare Botschaft formuliert: Wenn es schwer änderbar ist, ist es Softwarearchitektur. Daraus lassen sich zwei wichtige Feststellungen ableiten:",
      "id": [
        "137790"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137791]\n**1. Softwarearchitektur ist wichtig:**\n„Schwere“ Änderbarkeit definiert sich darüber, dass Änderungen teuer, aufwendig oder qualitätsgefährdend sind. Entsprechende Entscheidungen gefährden zentrale Rahmenbedingungen (Budget, Zeitplan oder Produktqualität). Eine Definition von Eoin Woods stellt diesen Aspekt zentral heraus: __„Software architecture is the set of design decisions which, if made incorrectly, may cause your project to be canceled“__ [Roz11]5\n||[Roz11]5 - will need footnote||",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**1. Softwarearchitektur ist wichtig:**\n„Schwere“ Änderbarkeit definiert sich darüber, dass Änderungen teuer, aufwendig oder qualitätsgefährdend sind. Entsprechende Entscheidungen gefährden zentrale Rahmenbedingungen (Budget, Zeitplan oder Produktqualität). Eine Definition von Eoin Woods stellt diesen Aspekt zentral heraus: __„Software architecture is the set of design decisions which, if made incorrectly, may cause your project to be canceled“__ [Roz11]5",
      "id": [
        "137791"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137792]\n**2. Unwichtige Fragestellungen verdienen keine Architekturaufwände:**\nEs gibt auch Entscheidungen, die leicht zurückzunehmen oder anzupassen sind. Die meisten Fragestellungen in der Praxis fallen in diese Kategorie und sind damit nicht architekturrelevant. Architekturaufwände lohnen sich bei diesen Fragestellungen weniger und bremsen Ihre Entwicklung unnötig. George Fairbanks betont: __„You should pay as much attention to software architecture as it contributes risk to the overall project, since if there is little architecture risk, then optimizing it only helps little.“__ [Fai10]6\n||[Fai10]6 - will need footnote||",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**2. Unwichtige Fragestellungen verdienen keine Architekturaufwände:**\nEs gibt auch Entscheidungen, die leicht zurückzunehmen oder anzupassen sind. Die meisten Fragestellungen in der Praxis fallen in diese Kategorie und sind damit nicht architekturrelevant. Architekturaufwände lohnen sich bei diesen Fragestellungen weniger und bremsen Ihre Entwicklung unnötig. George Fairbanks betont: __„You should pay as much attention to software architecture as it contributes risk to the overall project, since if there is little architecture risk, then optimizing it only helps little.“__ [Fai10]6",
      "id": [
        "137792"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137793]\n||or will this grey box be an image?||\n**Softwarearchitektur vs. XY-Architektur**\nEs gibt viele Architekturdisziplinen und noch mehr, teilweise unternehmensspezifische, Namen dafür. In Anlehnung an [Woo08], möchte ich pragmatisch drei Ebenen definieren:\n\n• **Unternehmensarchitektur** (Geschäftsarchitektur, strategische Architektur, Domänenarchitektur etc.)\n• **Softwarearchitektur** (Applikationsarchitektur, Systemarchitektur, Lösungsarchitektur etc.)\n• **Betriebsarchitektur** (technische Architektur, Technologiearchitektur, Integrationsarchitektur etc.)\n\nDer Fokus dieses Buchs liegt auf __Softwarearchitektur__. Ich verwende im gesamten Buch die Begriffe „Softwarearchitektur“ und „Architektur“ synonym. Die beschriebenen Vorgehensmuster sind für die Erarbeitung einer Softwarelösung gedacht – sei es im Rahmen der Produktentwicklung oder als einzelnes Projekt.\nNicht systemübergreifende Aspekte der Betriebsarchitektur lassen sich ebenfalls damit bearbeiten (und sind in der Praxis oft mit Softwarearchitekturaufgaben vermischt). Arbeiten Sie übergeordnet auf strategischer Ebene, können Sie von einzelnen Ideen profitieren, müssen die Muster aber an ihren Kontext anpassen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Softwarearchitektur vs. XY-Architektur**\nEs gibt viele Architekturdisziplinen und noch mehr, teilweise unternehmensspezifische, Namen dafür. In Anlehnung an [Woo08], möchte ich pragmatisch drei Ebenen definieren:\n\n• **Unternehmensarchitektur** (Geschäftsarchitektur, strategische Architektur, Domänenarchitektur etc.)\n• **Softwarearchitektur** (Applikationsarchitektur, Systemarchitektur, Lösungsarchitektur etc.)\n• **Betriebsarchitektur** (technische Architektur, Technologiearchitektur, Integrationsarchitektur etc.)\n\nDer Fokus dieses Buchs liegt auf __Softwarearchitektur__. Ich verwende im gesamten Buch die Begriffe „Softwarearchitektur“ und „Architektur“ synonym. Die beschriebenen Vorgehensmuster sind für die Erarbeitung einer Softwarelösung gedacht – sei es im Rahmen der Produktentwicklung oder als einzelnes Projekt.\nNicht systemübergreifende Aspekte der Betriebsarchitektur lassen sich ebenfalls damit bearbeiten (und sind in der Praxis oft mit Softwarearchitekturaufgaben vermischt). Arbeiten Sie übergeordnet auf strategischer Ebene, können Sie von einzelnen Ideen profitieren, müssen die Muster aber an ihren Kontext anpassen.",
      "id": [
        "137793"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137794]\n[%1.4]\n[##Agilität, Scrum und Lean]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.4",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "137794"
      ],
      "title": "Agilität, Scrum und Lean"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137795]\nIch werde in diesem Buch öfter von agilem Vorgehen, Scrum oder auch Lean schreiben. Ich entlehne diesen Themen einige Ideen und Denkkonzepte und sehe eine der größten Herausforderungen in der Modernisierung von Softwarearchitektur, um in diesen Umfeldern gut zu funktionieren. Der Einsatz agiler Vorgehensweisen ist jedoch keine Voraussetzung für den Einsatz der in diesem Buch enthaltenen Praktiken. Wenn Sie aus einem eher klassischen Kontext kommen, können Ihnen die beschriebenen Vorgehensmuster zu erfolgreicheren Projekten oder effektiverer Produktentwicklung verhelfen – und das relativ „Buzzword-frei“.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Ich werde in diesem Buch öfter von agilem Vorgehen, Scrum oder auch Lean schreiben. Ich entlehne diesen Themen einige Ideen und Denkkonzepte und sehe eine der größten Herausforderungen in der Modernisierung von Softwarearchitektur, um in diesen Umfeldern gut zu funktionieren. Der Einsatz agiler Vorgehensweisen ist jedoch keine Voraussetzung für den Einsatz der in diesem Buch enthaltenen Praktiken. Wenn Sie aus einem eher klassischen Kontext kommen, können Ihnen die beschriebenen Vorgehensmuster zu erfolgreicheren Projekten oder effektiverer Produktentwicklung verhelfen – und das relativ „Buzzword-frei“.",
      "id": [
        "137795"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137796]\nWünschen Sie sich trotzdem etwas Überblick zu agilen Themen, gibt es hervorragende Quellen, die einen guten und knappen Einstieg gewährleisten. Hier eine kleine Empfehlungsliste für Pragmatiker:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wünschen Sie sich trotzdem etwas Überblick zu agilen Themen, gibt es hervorragende Quellen, die einen guten und knappen Einstieg gewährleisten. Hier eine kleine Empfehlungsliste für Pragmatiker:",
      "id": [
        "137796"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137797]\n• Agile Prinzipien (https://agilemanifesto.org/iso/de/principles.html): Auf der Webseite des agilen Manifests findet sich nicht nur der berühmte und vielzitierte Wertvergleich, der vor 14 Jahren klassische Projekte aufrütteln sollte, sondern auch das (meiner Meinung nach interessantere) Verzeichnis der zwölf agilen Prinzipien. Sie machen die grundsätzliche Denkweise von agilem Vorgehen greifbar (siehe Kasten „die agilen Prinzipien“).\n• Lean Primer (https://www.leanprimer.com): eine fantastische Einführung in die Konzepte von Lean. Auf 40 Seiten motivieren Craig Larman und Bas Vodde, warum Lean für die Softwareentwicklung spannend ist, und vermitteln die zentralen Ideen sehr anschaulich.\n• Scrum Guide (https://www.scrum.org/Scrum-Guides): der Klassiker für Scrum-Einsteiger. Zum Verständnis agiler Denkweisen vielleicht etwas weniger wertvoll als der Lean Primer, werden hier die wichtigsten Elemente von Scrum und deren Zusammenspiel beschrieben. Von den Scrum-Vätern Jeff Sutherland und Ken Schwaber.\n||do I somehow make the links accessible?||",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "• Agile Prinzipien (https://agilemanifesto.org/iso/de/principles.html): Auf der Webseite des agilen Manifests findet sich nicht nur der berühmte und vielzitierte Wertvergleich, der vor 14 Jahren klassische Projekte aufrütteln sollte, sondern auch das (meiner Meinung nach interessantere) Verzeichnis der zwölf agilen Prinzipien. Sie machen die grundsätzliche Denkweise von agilem Vorgehen greifbar (siehe Kasten „die agilen Prinzipien“).\n• Lean Primer (https://www.leanprimer.com): eine fantastische Einführung in die Konzepte von Lean. Auf 40 Seiten motivieren Craig Larman und Bas Vodde, warum Lean für die Softwareentwicklung spannend ist, und vermitteln die zentralen Ideen sehr anschaulich.\n• Scrum Guide (https://www.scrum.org/Scrum-Guides): der Klassiker für Scrum-Einsteiger. Zum Verständnis agiler Denkweisen vielleicht etwas weniger wertvoll als der Lean Primer, werden hier die wichtigsten Elemente von Scrum und deren Zusammenspiel beschrieben. Von den Scrum-Vätern Jeff Sutherland und Ken Schwaber.",
      "id": [
        "137797"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137798]\n**Die agilen Prinzipien (zitiert von [agi01])**\n•. Unsere höchste Priorität ist es, den Kunden durch frühe und kontinuierliche Auslieferung wertvoller Software zufriedenzustellen.\n•. Heiße Anforderungsänderungen selbst spät in der Entwicklung willkommen. Agile Prozesse nutzen Veränderungen zum Wettbewerbsvorteil des Kunden.\n•. Liefere funktionierende Software regelmäßig innerhalb weniger Wochen oder Monate und bevorzuge dabei die kürzere Zeitspanne.\n•. Fachexperten und Entwickler müssen während des Projekts täglich zusammenarbeiten.\n•. Errichte Projekte rund um motivierte Individuen. Gib ihnen das Umfeld und die Unterstützung, die sie benötigen, und vertraue darauf, dass sie die Aufgabe erledigen.\n•. Die effizienteste und effektivste Methode, Informationen an und innerhalb eines Entwicklungsteams zu übermitteln, ist im Gespräch von Angesicht zu Angesicht.\n•. Funktionierende Software ist das wichtigste Fortschrittsmaß.\n•. Agile Prozesse fördern nachhaltige Entwicklung. Die Auftraggeber, Entwickler und Benutzer sollten ein gleichmäßiges Tempo auf unbegrenzte Zeit halten können.\n•. Ständiges Augenmerk auf technische Exzellenz und gutes Design fördert Agilität.\n•. Einfachheit – die Kunst, die Menge nicht getaner Arbeit zu maximieren – ist essenziell.\n•. Die besten Architekturen, Anforderungen und Entwürfe entstehen durch selbst organisierte Teams.\n•. In regelmäßigen Abständen reflektiert das Team, wie es effektiver werden kann, und passt sein Verhalten entsprechend an.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Die agilen Prinzipien (zitiert von [agi01])**\n•. Unsere höchste Priorität ist es, den Kunden durch frühe und kontinuierliche Auslieferung wertvoller Software zufriedenzustellen.\n•. Heiße Anforderungsänderungen selbst spät in der Entwicklung willkommen. Agile Prozesse nutzen Veränderungen zum Wettbewerbsvorteil des Kunden.\n•. Liefere funktionierende Software regelmäßig innerhalb weniger Wochen oder Monate und bevorzuge dabei die kürzere Zeitspanne.\n•. Fachexperten und Entwickler müssen während des Projekts täglich zusammenarbeiten.\n•. Errichte Projekte rund um motivierte Individuen. Gib ihnen das Umfeld und die Unterstützung, die sie benötigen, und vertraue darauf, dass sie die Aufgabe erledigen.\n•. Die effizienteste und effektivste Methode, Informationen an und innerhalb eines Entwicklungsteams zu übermitteln, ist im Gespräch von Angesicht zu Angesicht.\n•. Funktionierende Software ist das wichtigste Fortschrittsmaß.\n•. Agile Prozesse fördern nachhaltige Entwicklung. Die Auftraggeber, Entwickler und Benutzer sollten ein gleichmäßiges Tempo auf unbegrenzte Zeit halten können.\n•. Ständiges Augenmerk auf technische Exzellenz und gutes Design fördert Agilität.\n•. Einfachheit – die Kunst, die Menge nicht getaner Arbeit zu maximieren – ist essenziell.\n•. Die besten Architekturen, Anforderungen und Entwürfe entstehen durch selbst organisierte Teams.\n•. In regelmäßigen Abständen reflektiert das Team, wie es effektiver werden kann, und passt sein Verhalten entsprechend an.",
      "id": [
        "137798"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137799]\n[%1.5]\n[##Mission Statement]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.5",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "137799"
      ],
      "title": "Mission Statement"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137800]\nDieses Buch stellt praxiserprobte Praktiken vor, die Ihnen helfen, Herausforderungen der Softwarearchitektur zu meistern. Die Praktiken sind in Musterform beschrieben, um sie möglichst klar darzulegen, einfach verständlich zu machen und vor allem: sie häppchenweise erlern- und anwendbar zu machen. So ermöglicht dieses Buch auch eine skalierbare Methodik. Kleine und einfache Projekte können sich die nötigen Rosinen aus dem Sack von Mustern picken, größere komplexere Entwicklungsvorhaben können mehr Praktiken übernehmen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Dieses Buch stellt praxiserprobte Praktiken vor, die Ihnen helfen, Herausforderungen der Softwarearchitektur zu meistern. Die Praktiken sind in Musterform beschrieben, um sie möglichst klar darzulegen, einfach verständlich zu machen und vor allem: sie häppchenweise erlern- und anwendbar zu machen. So ermöglicht dieses Buch auch eine skalierbare Methodik. Kleine und einfache Projekte können sich die nötigen Rosinen aus dem Sack von Mustern picken, größere komplexere Entwicklungsvorhaben können mehr Praktiken übernehmen.",
      "id": [
        "137800"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137801]\nInhaltlich setzt sich dieses Buch folgende Ziele:\n\n• Neue Ideen und gut funktionierende Praktiken aus modernen Vorgehensmodellen, in den Architekturwerkzeugkasten übertragen. Durch den Einsatz der enthaltenen Muster entsteht eine effektivere, zeitgemäße Architekturdisziplin.\n\n• Architektur in Projekte und Produktentwicklungsvorhaben integrierbar machen, die ein leichtgewichtiges Vorgehensmodell haben. Durch den Einsatz der enthaltenen Muster entsteht eine in das Vorgehen integrierte Architekturdisziplin, die so schlank wie möglich und so fundiert wie nötig arbeitet.\n\n• Architekturarbeit dynamischer gestalten. Durch den Einsatz der enthaltenen Muster werden Projekte bis zu mehreren Teams in die Lage versetzt, dezentral und schnell zu tragfähigen Entscheidungen zu kommen. Der Weg zu Entscheidungen bremst so wenig wie möglich bei der produktiven Erstellung des lauffähigen Systems.\n\n• Agile Vorhaben dabei unterstützen, zentrale Architekturfehler zu vermeiden. Durch den Einsatz der enthaltenen Muster entsteht ein stetiger Fluss von ausgelieferten Features ohne große Rückschläge.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Inhaltlich setzt sich dieses Buch folgende Ziele:\n\n• Neue Ideen und gut funktionierende Praktiken aus modernen Vorgehensmodellen, in den Architekturwerkzeugkasten übertragen. Durch den Einsatz der enthaltenen Muster entsteht eine effektivere, zeitgemäße Architekturdisziplin.\n\n• Architektur in Projekte und Produktentwicklungsvorhaben integrierbar machen, die ein leichtgewichtiges Vorgehensmodell haben. Durch den Einsatz der enthaltenen Muster entsteht eine in das Vorgehen integrierte Architekturdisziplin, die so schlank wie möglich und so fundiert wie nötig arbeitet.\n\n• Architekturarbeit dynamischer gestalten. Durch den Einsatz der enthaltenen Muster werden Projekte bis zu mehreren Teams in die Lage versetzt, dezentral und schnell zu tragfähigen Entscheidungen zu kommen. Der Weg zu Entscheidungen bremst so wenig wie möglich bei der produktiven Erstellung des lauffähigen Systems.\n\n• Agile Vorhaben dabei unterstützen, zentrale Architekturfehler zu vermeiden. Durch den Einsatz der enthaltenen Muster entsteht ein stetiger Fluss von ausgelieferten Features ohne große Rückschläge.",
      "id": [
        "137801"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137802]\nDieses Buch wird explizit __nicht__ erklären, wie Sie agile Ansätze doch wieder mit klassischer Architekturarbeit ausstatten. Ich werde __keine__ Argumente liefern, die Architekturarbeit in jedem Fall einklagbar machen. Gleichzeitig verschreibt sich dieses Buch __keinen__ agil puristischen Dogmen. Dieses Buch soll den pragmatischen Umgang mit Softwarearchitektur in der heutigen Projektlandschaft fördern – möglichst unabhängig von modischen Trends.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Dieses Buch wird explizit __nicht__ erklären, wie Sie agile Ansätze doch wieder mit klassischer Architekturarbeit ausstatten. Ich werde __keine__ Argumente liefern, die Architekturarbeit in jedem Fall einklagbar machen. Gleichzeitig verschreibt sich dieses Buch __keinen__ agil puristischen Dogmen. Dieses Buch soll den pragmatischen Umgang mit Softwarearchitektur in der heutigen Projektlandschaft fördern – möglichst unabhängig von modischen Trends.",
      "id": [
        "137802"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137803]\n[%1.5.1]\n[###Abgrenzung zu anderen Büchern]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.5.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "137803"
      ],
      "title": "Abgrenzung zu anderen Büchern"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137804]\nUm den Inhalt dieses Buchs abzugrenzen, möchte ich auf die Fähigkeiten eingehen, die Mitglieder eines Entwicklungsvorhabens in jedem Fall brauchen, um erfolgreich an Softwarearchitekturen zu arbeiten. Bild 1.1 zeigt diese Fähigkeiten in eine Pyramide einsortiert, um den aufbauenden Charakter und das unterschiedlich breite Anwendungsspektrum zu illustrieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Um den Inhalt dieses Buchs abzugrenzen, möchte ich auf die Fähigkeiten eingehen, die Mitglieder eines Entwicklungsvorhabens in jedem Fall brauchen, um erfolgreich an Softwarearchitekturen zu arbeiten. Bild 1.1 zeigt diese Fähigkeiten in eine Pyramide einsortiert, um den aufbauenden Charakter und das unterschiedlich breite Anwendungsspektrum zu illustrieren.",
      "id": [
        "137804"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137805]\nBasis zur Erarbeitung von Softwarearchitektur ist die Soft-Skills-Ebene, die ich in Bild 1.1 mit „**Kommunikation**“ bezeichnet habe. Hochleistungsteams verfügen über ein Repertoire an Innovations- und Moderationstechniken, gehen produktiv miteinander um und binden Personen außerhalb des Teams gewinnbringend ein. Das Verhalten folgt gemeinsamen Prinzipien und ist auf ein bekanntes Ziel ausgerichtet.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Basis zur Erarbeitung von Softwarearchitektur ist die Soft-Skills-Ebene, die ich in Bild 1.1 mit „**Kommunikation**“ bezeichnet habe. Hochleistungsteams verfügen über ein Repertoire an Innovations- und Moderationstechniken, gehen produktiv miteinander um und binden Personen außerhalb des Teams gewinnbringend ein. Das Verhalten folgt gemeinsamen Prinzipien und ist auf ein bekanntes Ziel ausgerichtet.",
      "id": [
        "137805"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:137806]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k1/axa_vorgehensmuster_software_architektur_k1_2.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "137806"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k1/axa_vorgehensmuster_software_architektur_k1_2.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137807]\nEine Ebene höher liegt die **Vorgehensebene**. Hier sind Praktiken zu finden, die es Teams ermöglichen, effizient zu arbeiten, die richtigen Fragestellungen zum richtigen Zeitpunkt zu behandeln und den Austausch mit anderen Entwicklern, Teams oder Stakeholdern zielorientiert auszurichten. Hier ist das __Wie__ der Architekturdisziplin beheimatet.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Eine Ebene höher liegt die **Vorgehensebene**. Hier sind Praktiken zu finden, die es Teams ermöglichen, effizient zu arbeiten, die richtigen Fragestellungen zum richtigen Zeitpunkt zu behandeln und den Austausch mit anderen Entwicklern, Teams oder Stakeholdern zielorientiert auszurichten. Hier ist das __Wie__ der Architekturdisziplin beheimatet.",
      "id": [
        "137807"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137808]\nDie **Konzeptionsebene** beinhaltet Know-how für die Strukturierung von Softwarelösungen und übergreifendes, konzeptionelles Wissen zu Technologien und Frameworks. Hier sind Stile und Muster wie z. B. „Schichten“, „MVC“7, „REST“8 oder „Adapter“ zu Hause.\n||„MVC“7, „REST“8 - will need footnote||",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die **Konzeptionsebene** beinhaltet Know-how für die Strukturierung von Softwarelösungen und übergreifendes, konzeptionelles Wissen zu Technologien und Frameworks. Hier sind Stile und Muster wie z. B. „Schichten“, „MVC“7, „REST“8 oder „Adapter“ zu Hause.",
      "id": [
        "137808"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137809]\nDie oberste Ebene beinhaltet **technisches Wissen**. Dazu gehört das Verständnis der eingesetzten Technologien und Frameworks, ihrer Besonderheiten und Möglichkeiten. Hier ist technologische Expertise zu Hause, wie z. B. Wissen zu Spring, ASP.NET oder JBoss. Dieses Wissen veraltet am schnellsten und ist wichtige Rahmenbedingung für Entscheidungen auf Vorgehensebene.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die oberste Ebene beinhaltet **technisches Wissen**. Dazu gehört das Verständnis der eingesetzten Technologien und Frameworks, ihrer Besonderheiten und Möglichkeiten. Hier ist technologische Expertise zu Hause, wie z. B. Wissen zu Spring, ASP.NET oder JBoss. Dieses Wissen veraltet am schnellsten und ist wichtige Rahmenbedingung für Entscheidungen auf Vorgehensebene.",
      "id": [
        "137809"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137810]\nIn der Praxis sollten Sie keine dieser Ebenen vernachlässigen. Ist Ihre Entwicklung beispielsweise auf Kommunikationsebene schwach aufgestellt, werden viele Praktiken von modernen Vorgehensmodellen nicht gut funktionieren. Ist das konzeptionelle Wissen schwach, wird immer mit der einen gut bekannten Technologie gearbeitet – unabhängig vom eigentlichen Problem. Die Architektur und das gesamte Vorhaben leiden unter solchen Lücken. Achten Sie immer auf alle vier Ebenen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In der Praxis sollten Sie keine dieser Ebenen vernachlässigen. Ist Ihre Entwicklung beispielsweise auf Kommunikationsebene schwach aufgestellt, werden viele Praktiken von modernen Vorgehensmodellen nicht gut funktionieren. Ist das konzeptionelle Wissen schwach, wird immer mit der einen gut bekannten Technologie gearbeitet – unabhängig vom eigentlichen Problem. Die Architektur und das gesamte Vorhaben leiden unter solchen Lücken. Achten Sie immer auf alle vier Ebenen.",
      "id": [
        "137810"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137811]\nDieses Buch fokussiert auf die zweite Ebene von unten – das Vorgehen. Es geht um prozessorientierte Entwurfstipps. Wissen zu Architekturkonzepten und Technologien sowie weiche Fähigkeiten rund um Kommunikation sind nicht zentraler Bestandteil (auch wenn Berührungspunkte erläutert werden). Wollen Sie weiter in diese ausgeklammerten Ebenen einsteigen, habe ich folgende Empfehlungen für Sie:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Dieses Buch fokussiert auf die zweite Ebene von unten – das Vorgehen. Es geht um prozessorientierte Entwurfstipps. Wissen zu Architekturkonzepten und Technologien sowie weiche Fähigkeiten rund um Kommunikation sind nicht zentraler Bestandteil (auch wenn Berührungspunkte erläutert werden). Wollen Sie weiter in diese ausgeklammerten Ebenen einsteigen, habe ich folgende Empfehlungen für Sie:",
      "id": [
        "137811"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137812]\n• **Kommunikation:**\nKommunikative Fähigkeiten und förderliche Sichtweisen für Projekt- und Unternehmensgestaltung kann man sich nicht einfach anlesen. Trotzdem sind Bücher ein guter Startpunkt, um Ideen für die eigene Praxis zu sammeln. Persönlich sehr anregend finde ich die Soft-Skill-Reihe meines Kollegen Uwe Vigenschow [Vig10, Vig11]. Für eine Erweiterung der eigenen Denkweise Richtung Lean und Agil sind z. B. [Pop03], [Pop06] und [App10] spannend.\n\n• **Konzeption:**\nZur Konzeption von Architektur und technischen Mustern für Technologien und Plattformen gibt es eine Fülle an guten Büchern. Beispiele wären die Klassiker [Fow02], [Bus96] und [Gam94] oder Bücher mit etwas speziellerem Fokus, wie das Messaging-Werk von Gregor Hohpe [Hoh03]. Empfehlungen für Bücher mit Konzeptionsfokus wären [Roz11], [Sta14] und [Zör15].\n\n• **Technologie:**\nDiese Ebene ist zu speziell für allgemeine Lesetipps. Für jede Technologie gibt es mehr oder weniger brauchbare Spezifikationen, Blogs oder aktive Foren, die helfen, Expertise aufzubauen. Das Wichtigste auf dieser Ebene ist aber die Erfahrung mit hochgekrempelten Ärmeln. Probieren Sie Technologien selbst aus – im Kontext Ihres Systems und nebenbei.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "• **Kommunikation:**\nKommunikative Fähigkeiten und förderliche Sichtweisen für Projekt- und Unternehmensgestaltung kann man sich nicht einfach anlesen. Trotzdem sind Bücher ein guter Startpunkt, um Ideen für die eigene Praxis zu sammeln. Persönlich sehr anregend finde ich die Soft-Skill-Reihe meines Kollegen Uwe Vigenschow [Vig10, Vig11]. Für eine Erweiterung der eigenen Denkweise Richtung Lean und Agil sind z. B. [Pop03], [Pop06] und [App10] spannend.\n\n• **Konzeption:**\nZur Konzeption von Architektur und technischen Mustern für Technologien und Plattformen gibt es eine Fülle an guten Büchern. Beispiele wären die Klassiker [Fow02], [Bus96] und [Gam94] oder Bücher mit etwas speziellerem Fokus, wie das Messaging-Werk von Gregor Hohpe [Hoh03]. Empfehlungen für Bücher mit Konzeptionsfokus wären [Roz11], [Sta14] und [Zör15].\n\n• **Technologie:**\nDiese Ebene ist zu speziell für allgemeine Lesetipps. Für jede Technologie gibt es mehr oder weniger brauchbare Spezifikationen, Blogs oder aktive Foren, die helfen, Expertise aufzubauen. Das Wichtigste auf dieser Ebene ist aber die Erfahrung mit hochgekrempelten Ärmeln. Probieren Sie Technologien selbst aus – im Kontext Ihres Systems und nebenbei.",
      "id": [
        "137812"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137813]\n[%1.5.2]\n[###Für wen ich dieses Buch geschrieben habe]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.5.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "137813"
      ],
      "title": "Für wen ich dieses Buch geschrieben habe"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137814]\n__Bild 1.2__ zeigt __Shu-Ha-Ri__ in japanischen Schriftzeichen (kanji) – ein Konzept aus der japanischen Kampfkunst, das drei Phasen von Lernen und Können beschreibt:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Bild 1.2__ zeigt __Shu-Ha-Ri__ in japanischen Schriftzeichen (kanji) – ein Konzept aus der japanischen Kampfkunst, das drei Phasen von Lernen und Können beschreibt:",
      "id": [
        "137814"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137815]\n• **Shu:**\nIn Shu wird __ein__ Weg angewandt. Sie sehen nicht links und rechts, sondern befolgen die Ansagen eines Meisters genau (1:1-Umsetzung des Scrum Guide, Befolgung __einer__ Methodik).\n• **Ha:**\nHa erweitert die Praxis um Verbesserungen und sinnvolle Alternativen. Sie lernen aus unterschiedlichen Quellen und mixen Ihre eigene Praxis daraus.\n• **Ri:**\nIm Ri lernen Sie nicht mehr von anderen, sondern ziehen Erkenntnisse aus der eigenen Praxis. Sie haben die Disziplin durchdrungen und gemeistert.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "• **Shu:**\nIn Shu wird __ein__ Weg angewandt. Sie sehen nicht links und rechts, sondern befolgen die Ansagen eines Meisters genau (1:1-Umsetzung des Scrum Guide, Befolgung __einer__ Methodik).\n• **Ha:**\nHa erweitert die Praxis um Verbesserungen und sinnvolle Alternativen. Sie lernen aus unterschiedlichen Quellen und mixen Ihre eigene Praxis daraus.\n• **Ri:**\nIm Ri lernen Sie nicht mehr von anderen, sondern ziehen Erkenntnisse aus der eigenen Praxis. Sie haben die Disziplin durchdrungen und gemeistert.",
      "id": [
        "137815"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:137816]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k1/axa_vorgehensmuster_software_architektur_k1_3.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "137816"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k1/axa_vorgehensmuster_software_architektur_k1_3.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137817]\nDieses Buch ist am ehesten für die __Ha__-Ebene gedacht. Sie kennen die agilen Ideen zumindest grob und Ihnen sind die Grundlagen von Architekturarbeit geläufig. Sie wollen sich das Beste aus verschiedenen Quellen suchen, um Ihr Projekt oder Unternehmen vorwärtszubringen. Durch den Einsatz der vorgestellten Muster und das Experimentieren mit den im Buch enthaltenen Ideen rücken Sie ein Stück näher an das __Ri__. Falls Sie bereits anwendender Meister sind, lade ich Sie ein, dieses Buch querzulesen, um vielleicht noch interessante Anregungen zu erhalten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Dieses Buch ist am ehesten für die __Ha__-Ebene gedacht. Sie kennen die agilen Ideen zumindest grob und Ihnen sind die Grundlagen von Architekturarbeit geläufig. Sie wollen sich das Beste aus verschiedenen Quellen suchen, um Ihr Projekt oder Unternehmen vorwärtszubringen. Durch den Einsatz der vorgestellten Muster und das Experimentieren mit den im Buch enthaltenen Ideen rücken Sie ein Stück näher an das __Ri__. Falls Sie bereits anwendender Meister sind, lade ich Sie ein, dieses Buch querzulesen, um vielleicht noch interessante Anregungen zu erhalten.",
      "id": [
        "137817"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137818]\nTypische Rollen typischer Leser:\n\n• **Entwickler:**\nSie arbeiten als Softwareentwickler an der Umsetzung eines Produkts oder Projekts und interessieren sich für Architekturarbeit. Sie gestalten die Architektur entweder mit oder haben Einfluss auf die Erarbeitung von architektonischen Konzepten und wollen vor allem effektiv mit anderen Entwicklern zusammenarbeiten, Transparenz herstellen und gute Software abliefern.\n\n• **Architekten:**\nSie sind als Softwarearchitekt auf Produkt- oder Projektebene tätig und wollen dynamischer arbeiten, vielleicht Ihren Platz in einem agilen Entwicklungsprozess finden. Alternativ sind Sie als klassischer (Chef-)Architekt an zeitgemäßen Praktiken für Softwarearchitektur interessiert.\n\n• **Manager:**\nAls Manager auf Projektebene oder darüber interessieren Sie sich für neue Strömungen und Vorgehensideen. Sie wollen sich etwas Kontext verschaffen, um die Disziplin der Softwarearchitektur besser zu verstehen, den Wert für dynamisch oder agil arbeitende Teams abzuschätzen und eventuell Impulse für effektivere Architekturarbeit zu setzen.9\n||setzen.9 - will need footnote||",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Typische Rollen typischer Leser:\n\n• **Entwickler:**\nSie arbeiten als Softwareentwickler an der Umsetzung eines Produkts oder Projekts und interessieren sich für Architekturarbeit. Sie gestalten die Architektur entweder mit oder haben Einfluss auf die Erarbeitung von architektonischen Konzepten und wollen vor allem effektiv mit anderen Entwicklern zusammenarbeiten, Transparenz herstellen und gute Software abliefern.\n\n• **Architekten:**\nSie sind als Softwarearchitekt auf Produkt- oder Projektebene tätig und wollen dynamischer arbeiten, vielleicht Ihren Platz in einem agilen Entwicklungsprozess finden. Alternativ sind Sie als klassischer (Chef-)Architekt an zeitgemäßen Praktiken für Softwarearchitektur interessiert.\n\n• **Manager:**\nAls Manager auf Projektebene oder darüber interessieren Sie sich für neue Strömungen und Vorgehensideen. Sie wollen sich etwas Kontext verschaffen, um die Disziplin der Softwarearchitektur besser zu verstehen, den Wert für dynamisch oder agil arbeitende Teams abzuschätzen und eventuell Impulse für effektivere Architekturarbeit zu setzen.9",
      "id": [
        "137818"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137819]\n[%1.6]\n[##Dieses Buch richtig verwenden]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.6",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "137819"
      ],
      "title": "Dieses Buch richtig verwenden"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137820]\nBeim Schreiben dieses Buchs hatte ich als wichtigste Metapher einen Reiseführer im Kopf. Wieso? Weil das die wahrscheinlich am besten getesteten Bücher der Welt sind und weil diese Bücher einfach richtig verwendet werden. Hunderte Reisende verschaffen sich erst mal einen Überblick und schlagen später Details nach. Stimmt etwas nicht, gibt es Rückmeldungen oder Verbesserungsideen. Jeder Leser gestaltet auf Basis der gelieferten Informationen und Einschätzungen seine eigene Reise. Trotzdem bildet sich jeder vor Ort seine eigene Meinung.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Beim Schreiben dieses Buchs hatte ich als wichtigste Metapher einen Reiseführer im Kopf. Wieso? Weil das die wahrscheinlich am besten getesteten Bücher der Welt sind und weil diese Bücher einfach richtig verwendet werden. Hunderte Reisende verschaffen sich erst mal einen Überblick und schlagen später Details nach. Stimmt etwas nicht, gibt es Rückmeldungen oder Verbesserungsideen. Jeder Leser gestaltet auf Basis der gelieferten Informationen und Einschätzungen seine eigene Reise. Trotzdem bildet sich jeder vor Ort seine eigene Meinung.",
      "id": [
        "137820"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137821]\nIch möchte nicht, dass Sie dieses Buch nur lesen, ich möchte, dass Sie dieses Buch verwenden. Lassen Sie Ideen auf sich wirken, probieren Sie spannende Dinge aus und gehen Sie kritisch damit um. Sie sind verantwortlich für Ihre Reise! Modifizieren Sie die Muster dieses Buchs, um sie auf Ihren Kontext anzupassen. Falls Sie Schwierigkeiten haben, falls bestimmte Dinge sehr gut funktionieren, falls Sie Erkenntnisse oder Erweiterungen haben: Geben Sie mir Feedback10. Lassen Sie dieses Buch leben.\n||Feedback10 - will need footnote||",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Ich möchte nicht, dass Sie dieses Buch nur lesen, ich möchte, dass Sie dieses Buch verwenden. Lassen Sie Ideen auf sich wirken, probieren Sie spannende Dinge aus und gehen Sie kritisch damit um. Sie sind verantwortlich für Ihre Reise! Modifizieren Sie die Muster dieses Buchs, um sie auf Ihren Kontext anzupassen. Falls Sie Schwierigkeiten haben, falls bestimmte Dinge sehr gut funktionieren, falls Sie Erkenntnisse oder Erweiterungen haben: Geben Sie mir Feedback10. Lassen Sie dieses Buch leben.",
      "id": [
        "137821"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137822]\n[%1.6.1]\n[###Ein grober Überblick]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.6.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "137822"
      ],
      "title": "Ein grober Überblick"
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:137823]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k1/axa_vorgehensmuster_software_architektur_k1_4.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "137823"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k1/axa_vorgehensmuster_software_architektur_k1_4.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article]\n[@id:137824]\nBild 1.3 zeigt die grobe Kapitelstruktur und den logischen Aufbau des Buchs.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bild 1.3 zeigt die grobe Kapitelstruktur und den logischen Aufbau des Buchs.",
      "id": [
        "137824"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137825]\nKapitel 2 vermittelt die inhaltliche Vision dieses Buchs und schafft wichtige Grundlagen für die weitere Lektüre. Es dient als Einstieg und Wegweiser für die 31 folgenden Vorgehensmuster.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Kapitel 2 vermittelt die inhaltliche Vision dieses Buchs und schafft wichtige Grundlagen für die weitere Lektüre. Es dient als Einstieg und Wegweiser für die 31 folgenden Vorgehensmuster.",
      "id": [
        "137825"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137826]\nDie Reihenfolge der Patternkapitel ist nicht zufällig gewählt. Ausgehend von Anforderungen und Problemstellungen (Kapitel 3), bespreche ich Vorgehensaspekte beim Treffen von Architekturentscheidungen (Kapitel 4) und unterstützende Praktiken für dynamische Zusammenarbeit (Kapitel 5). Schließlich verbinde ich Architekturideen und -anforderungen mit den tatsächlich beobachtbaren Eigenschaften des Systems (Kapitel 6). Sie können die Kapitel und die enthaltenen Muster gut von vorne nach hinten lesen, selbstverständlich ist aber auch eine nichtlineare Arbeit mit dem Buch möglich. Die Muster verweisen aufeinander und ermöglichen Ihnen Sprünge zu interessanten Ansatzpunkten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Reihenfolge der Patternkapitel ist nicht zufällig gewählt. Ausgehend von Anforderungen und Problemstellungen (Kapitel 3), bespreche ich Vorgehensaspekte beim Treffen von Architekturentscheidungen (Kapitel 4) und unterstützende Praktiken für dynamische Zusammenarbeit (Kapitel 5). Schließlich verbinde ich Architekturideen und -anforderungen mit den tatsächlich beobachtbaren Eigenschaften des Systems (Kapitel 6). Sie können die Kapitel und die enthaltenen Muster gut von vorne nach hinten lesen, selbstverständlich ist aber auch eine nichtlineare Arbeit mit dem Buch möglich. Die Muster verweisen aufeinander und ermöglichen Ihnen Sprünge zu interessanten Ansatzpunkten.",
      "id": [
        "137826"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137827]\nKapitel 7 zeigt schließlich, wie Sie Muster bei sich im Projekt oder Unternehmen etablieren können und was sich dadurch verändern sollte. Wie experimentieren Sie richtig mit den Ideen dieses Buchs? An welchen Stellen passen die Muster in Ihr Vorgehen? Und welche Auswirkungen hat die Musteranwendung auf die Rollengestaltung für Architekturaufgaben?",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Kapitel 7 zeigt schließlich, wie Sie Muster bei sich im Projekt oder Unternehmen etablieren können und was sich dadurch verändern sollte. Wie experimentieren Sie richtig mit den Ideen dieses Buchs? An welchen Stellen passen die Muster in Ihr Vorgehen? Und welche Auswirkungen hat die Musteranwendung auf die Rollengestaltung für Architekturaufgaben?",
      "id": [
        "137827"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137828]\n[%1.6.2]\n[###Patterns lesen]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.6.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "137828"
      ],
      "title": "Patterns lesen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137829]\nFür die Beschreibung der Muster in diesem Buch habe ich den „Alexandrischen Stil“ gewählt. Diese von Christopher Alexander11 verwendete Form der Musterbeschreibung zeichnet sich vor allem durch ihre gute Lesbarkeit aus. Die einzelnen Teile des Musters sind nicht durch Überschriften getrennt, sondern lediglich optisch abgesetzt – durch die Verwendung von Bildern, Balken oder Kästen. Um den Lesefluss und die Lebendigkeit der Beschreibung weiter zu erhöhen, habe ich den Musterteil der „Forces“ oder „Einflüsse“ in die Musterbeschreibung integriert und kann so die Lösung direkt im Text motivieren. Bild 1.4 zeigt die Teile eines Musters im Überblick.\n||Alexander11 - will need footnote||",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Für die Beschreibung der Muster in diesem Buch habe ich den „Alexandrischen Stil“ gewählt. Diese von Christopher Alexander11 verwendete Form der Musterbeschreibung zeichnet sich vor allem durch ihre gute Lesbarkeit aus. Die einzelnen Teile des Musters sind nicht durch Überschriften getrennt, sondern lediglich optisch abgesetzt – durch die Verwendung von Bildern, Balken oder Kästen. Um den Lesefluss und die Lebendigkeit der Beschreibung weiter zu erhöhen, habe ich den Musterteil der „Forces“ oder „Einflüsse“ in die Musterbeschreibung integriert und kann so die Lösung direkt im Text motivieren. Bild 1.4 zeigt die Teile eines Musters im Überblick.",
      "id": [
        "137829"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:137830]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k1/axa_vorgehensmuster_software_architektur_k1_5.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "137830"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k1/axa_vorgehensmuster_software_architektur_k1_5.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137831]\nGenerell sollten die beschriebenen Muster gut von oben nach unten lesbar sein. Das Beispiel illustriert einen wichtigen Ausschnitt des Patterns und gibt Ihnen eine grobe Idee. Danach setzt der Kontext die Bühne für das als Frage formulierte Problem. Der Hauptteil des Musters kümmert sich dann um die Lösung dieses Problems. In einem abschließenden Kasten finden Sie schlechte Anwendungsbeispiele des Musters – Anti-Patterns. Die Verweise zu anderen Mustern sind vor allem spannend, wenn Sie das Muster bei sich anwenden wollen. Sie können die Verweise auf verwandte Muster auch nutzen, um das Buch netzwerkartig von interessanten Mustern ausgehend zu lesen, anstatt streng linear vorzugehen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Generell sollten die beschriebenen Muster gut von oben nach unten lesbar sein. Das Beispiel illustriert einen wichtigen Ausschnitt des Patterns und gibt Ihnen eine grobe Idee. Danach setzt der Kontext die Bühne für das als Frage formulierte Problem. Der Hauptteil des Musters kümmert sich dann um die Lösung dieses Problems. In einem abschließenden Kasten finden Sie schlechte Anwendungsbeispiele des Musters – Anti-Patterns. Die Verweise zu anderen Mustern sind vor allem spannend, wenn Sie das Muster bei sich anwenden wollen. Sie können die Verweise auf verwandte Muster auch nutzen, um das Buch netzwerkartig von interessanten Mustern ausgehend zu lesen, anstatt streng linear vorzugehen.",
      "id": [
        "137831"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137832]\n[%1.6.3]\n[###Patterns anwenden]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.6.3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "137832"
      ],
      "title": "Patterns anwenden"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137833]\nDie stumpfe Übernahme von in Mustern beschriebenen Praktiken wird Ihnen und Ihrem System nur bedingt helfen. Finden Sie interessante Ansätze und Ideen, können Sie gerne so schnell wie möglich loslegen. Um die Musteranwendung jedoch erfolgreich und zielführend zu gestalten, lesen Sie die Hinweise, die ich in Kapitel 7 („Vorgehensmuster anwenden“) gesammelt habe, insbesondere Abschnitt 7.1 („Muster richtig einsetzen“).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die stumpfe Übernahme von in Mustern beschriebenen Praktiken wird Ihnen und Ihrem System nur bedingt helfen. Finden Sie interessante Ansätze und Ideen, können Sie gerne so schnell wie möglich loslegen. Um die Musteranwendung jedoch erfolgreich und zielführend zu gestalten, lesen Sie die Hinweise, die ich in Kapitel 7 („Vorgehensmuster anwenden“) gesammelt habe, insbesondere Abschnitt 7.1 („Muster richtig einsetzen“).",
      "id": [
        "137833"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137834]\n[%1.7]\n[##Webseite]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.7",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "137834"
      ],
      "title": "Webseite"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137835]\nAuf der Webseite\n www.swamuster.de\nfinden Sie einen schlanken Musterüberblick, einige Inhalte, die aus Platzgründen nicht mehr in das Buch gepasst haben, sowie Links und weiterführende Informationen zum Thema und zu einzelnen Vorgehensmustern. Ich gebe dort auch aktuelle Vortrags- und Veranstaltungshinweise.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Auf der Webseite\n www.swamuster.de\nfinden Sie einen schlanken Musterüberblick, einige Inhalte, die aus Platzgründen nicht mehr in das Buch gepasst haben, sowie Links und weiterführende Informationen zum Thema und zu einzelnen Vorgehensmustern. Ich gebe dort auch aktuelle Vortrags- und Veranstaltungshinweise.",
      "id": [
        "137835"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:137836]\n[%1.8]\n[##Danksagung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.8",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "137836"
      ],
      "title": "Danksagung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137837]\nNeben der Academy möchte ich mich bei allen Helfern, Unterstützern und Kunden bedanken, die dieses Buchprojekt möglich gemacht haben. Ganz besonderer Dank gebührt Stefan Zörner, der nicht nur große Teile des Buchs gereviewed hat und viele wertvolle Anregungen beisteuerte: Er ist auch verantwortlich dafür, dass ich mich überhaupt monatelang von allen sozialen Bindungen gelöst habe, um mich dem geschriebenen Wort zu widmen. Danke für den Impuls!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Neben der Academy möchte ich mich bei allen Helfern, Unterstützern und Kunden bedanken, die dieses Buchprojekt möglich gemacht haben. Ganz besonderer Dank gebührt Stefan Zörner, der nicht nur große Teile des Buchs gereviewed hat und viele wertvolle Anregungen beisteuerte: Er ist auch verantwortlich dafür, dass ich mich überhaupt monatelang von allen sozialen Bindungen gelöst habe, um mich dem geschriebenen Wort zu widmen. Danke für den Impuls!",
      "id": [
        "137837"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137838]\nDanke an Markus Wittwer für den wichtigen Input im Bereich der gemeinsamen Entscheidungsfindung und das beigesteuerte Vorgehensmuster aus Abschnitt 5.2.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Danke an Markus Wittwer für den wichtigen Input im Bereich der gemeinsamen Entscheidungsfindung und das beigesteuerte Vorgehensmuster aus Abschnitt 5.2.",
      "id": [
        "137838"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137839]\nDanke an meine Diskussionspartner, Reviewer und Unterstützer, die mir mit Hinweisen, Kommentaren und Ideen geholfen haben, dieses Buch zu realisieren: Jan Gentsch, Claudia Schröder, Uwe Vigenschow, Tadeusz Malek, Mischa Soujon, Kai Münch, Jan Dittberner, Wolfgang Werner, Gernot Starke, Axel Müller, Robert Uhl, Stephan Roth, Roland Mast, Niko Köbler, Harm Gnoyke, Simon Brown, Matthias Bohlen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Danke an meine Diskussionspartner, Reviewer und Unterstützer, die mir mit Hinweisen, Kommentaren und Ideen geholfen haben, dieses Buch zu realisieren: Jan Gentsch, Claudia Schröder, Uwe Vigenschow, Tadeusz Malek, Mischa Soujon, Kai Münch, Jan Dittberner, Wolfgang Werner, Gernot Starke, Axel Müller, Robert Uhl, Stephan Roth, Roland Mast, Niko Köbler, Harm Gnoyke, Simon Brown, Matthias Bohlen.",
      "id": [
        "137839"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:137840]\nWeil ich mir das Beste immer für den Schluss aufhebe, kommt nun der Dank an die beste Frau der Welt: Marion, du bist großartig. Ohne dich wäre das hier nie möglich gewesen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Weil ich mir das Beste immer für den Schluss aufhebe, kommt nun der Dank an die beste Frau der Welt: Marion, du bist großartig. Ohne dich wäre das hier nie möglich gewesen.",
      "id": [
        "137840"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:139579]\n[#Zeitgemäße Softwarearchitektur]\n[%2]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 1,
      "progress": true,
      "toc": true,
      "id": [
        "139579"
      ],
      "title": "Zeitgemäße Softwarearchitektur"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139580]\nAuf den nächsten Seiten tauchen Sie in die inhaltliche Vision des Buchs ein. Die übergreifende Idee hinter den 31 Vorgehensmustern für Softwarearchitektur ist in Abschnitt 2.1 detailliert dargestellt und mit den Konzepten der übrigen Kapitel verbunden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Auf den nächsten Seiten tauchen Sie in die inhaltliche Vision des Buchs ein. Die übergreifende Idee hinter den 31 Vorgehensmustern für Softwarearchitektur ist in Abschnitt 2.1 detailliert dargestellt und mit den Konzepten der übrigen Kapitel verbunden.",
      "id": [
        "139580"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139581]\nNach diesem vielleicht wichtigsten Abschnitt des gesamten Buchs zeige ich, welche Vorge­ hensmuster die beschriebene zeitgemäße Architekturarbeit ermöglichen. Abschnitt 2.2 gibt einen kompakten Überblick aller Muster des Buchs, inklusive Problem und Kurzbeschreibung. Außerdem werden die Kapitel, in welche die Muster eingegliedert sind, kurz vorgestellt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nach diesem vielleicht wichtigsten Abschnitt des gesamten Buchs zeige ich, welche Vorge­ hensmuster die beschriebene zeitgemäße Architekturarbeit ermöglichen. Abschnitt 2.2 gibt einen kompakten Überblick aller Muster des Buchs, inklusive Problem und Kurzbeschreibung. Außerdem werden die Kapitel, in welche die Muster eingegliedert sind, kurz vorgestellt.",
      "id": [
        "139581"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139582]\nZum Abschluss stelle ich kurz das Fallbeispiel vor, das Sie durch alle Vorgehensmuster begleiten wird (Abschnitt 2.3).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Zum Abschluss stelle ich kurz das Fallbeispiel vor, das Sie durch alle Vorgehensmuster begleiten wird (Abschnitt 2.3).",
      "id": [
        "139582"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139583]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_1.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139583"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_1.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:139584]\n[%2.1]\n[##Die inhaltliche Vision]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "139584"
      ],
      "title": "Die inhaltliche Vision"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139585]\nHinter den Vorgehensmustern dieses Buchs steht eine konsistente Vision zeitgemäßer Softwarearchitekturarbeit. Bereits die in Abschnitt 1.3 genannten Definitionen von Soft­ warearchitektur scheren nicht alle Softwareentwicklungsvorhaben über einen Kamm. Menge und Ausprägung von grundlegenden, risikoreichen Fragestellungen sind von System zu System unterschiedlich. Zeitgemäße Softwarearchitektur erkennt diese Individualität auf vielen Ebenen an und greift aktuelle Strömungen der Softwareentwicklung auf. Zeitgemäße Softwarearchitektur ist:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Hinter den Vorgehensmustern dieses Buchs steht eine konsistente Vision zeitgemäßer Softwarearchitekturarbeit. Bereits die in Abschnitt 1.3 genannten Definitionen von Soft­ warearchitektur scheren nicht alle Softwareentwicklungsvorhaben über einen Kamm. Menge und Ausprägung von grundlegenden, risikoreichen Fragestellungen sind von System zu System unterschiedlich. Zeitgemäße Softwarearchitektur erkennt diese Individualität auf vielen Ebenen an und greift aktuelle Strömungen der Softwareentwicklung auf. Zeitgemäße Softwarearchitektur ist:",
      "id": [
        "139585"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139586]\n**1. Durch Anforderungen getrieben**\n\n**2. Vom Aufwand her dem Problem angemessen**\n• In dynamischen Umfeldern nicht behindernd\n• In architektonisch risikoreichen Kontexten ausreichend fundiert\n\n**3. Von aktuellen Erkenntnissen zu Zusammenarbeit und Vorgehen beeinflusst**\n\n**4. Gut mit der Entwicklung verzahnt**\n\n**5. Einfach in aktuelle Vorgehensmodelle integrierbar**\n• Iterativ leistbar\n• In aktuellen Konzepten des Vorgehens verankert\n• Frei von behindernden oder umständlichen Ergänzungen",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**1. Durch Anforderungen getrieben**\n\n**2. Vom Aufwand her dem Problem angemessen**\n• In dynamischen Umfeldern nicht behindernd\n• In architektonisch risikoreichen Kontexten ausreichend fundiert\n\n**3. Von aktuellen Erkenntnissen zu Zusammenarbeit und Vorgehen beeinflusst**\n\n**4. Gut mit der Entwicklung verzahnt**\n\n**5. Einfach in aktuelle Vorgehensmodelle integrierbar**\n• Iterativ leistbar\n• In aktuellen Konzepten des Vorgehens verankert\n• Frei von behindernden oder umständlichen Ergänzungen",
      "id": [
        "139586"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139587]\nIch greife diese Punkte im Folgenden auf, beschreibe sie etwas detaillierter und referenziere auf wichtige Vorgehensmuster.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Ich greife diese Punkte im Folgenden auf, beschreibe sie etwas detaillierter und referenziere auf wichtige Vorgehensmuster.",
      "id": [
        "139587"
      ]
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139588]\n[%2.1.1]\n[###Durch Anforderungen getrieben]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.1.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139588"
      ],
      "title": "Durch Anforderungen getrieben"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139589]\nWenn Sie eine fachliche Methode ausimplementieren oder ein neues Feld im UI vorsehen, orientieren Sie sich an Wünschen und Anforderungen des Kunden. Dasselbe sollten Sie tun, wenn Sie Technologien auswählen oder Fremdsysteme anbinden. Was auch immer die grundlegenden Fragestellungen in Ihrem Fall sind: Lassen Sie sich von Anforderungen leiten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wenn Sie eine fachliche Methode ausimplementieren oder ein neues Feld im UI vorsehen, orientieren Sie sich an Wünschen und Anforderungen des Kunden. Dasselbe sollten Sie tun, wenn Sie Technologien auswählen oder Fremdsysteme anbinden. Was auch immer die grundlegenden Fragestellungen in Ihrem Fall sind: Lassen Sie sich von Anforderungen leiten.",
      "id": [
        "139589"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139590]\nQualitätsanforderungen kommt dabei eine besondere Bedeutung zu. Sie beschreiben die nichtfunktionalen Aspekte der zu erstellenden Lösung, also __wie__ eine Funktionalität bereit­ gestellt werden soll.1 Soll die Funktionalität ohne Unterbrechung zur Verfügung stehen, sind Zuverlässigkeit und Verfügbarkeit wichtig. Wollen wir in Zukunft mehr Benutzer mit unserer Funktionalität beglücken, ist Skalierbarkeit spannend. Wollen wir verhindern, dass Unbefugte heikle Funktionalität nutzen, ist Sicherheit ein Thema. Diese Qualitätsmerkmale beziehen sich oft auf weite Systemteile oder sogar das Gesamtsystem. Zuverlässigkeit lässt sich nicht durch eine neue Klasse oder Komponente sicherstellen, die gesamte Anwendung und deren Basis müssen entsprechenden Prinzipien gehorchen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Qualitätsanforderungen kommt dabei eine besondere Bedeutung zu. Sie beschreiben die nichtfunktionalen Aspekte der zu erstellenden Lösung, also __wie__ eine Funktionalität bereit­ gestellt werden soll.1 Soll die Funktionalität ohne Unterbrechung zur Verfügung stehen, sind Zuverlässigkeit und Verfügbarkeit wichtig. Wollen wir in Zukunft mehr Benutzer mit unserer Funktionalität beglücken, ist Skalierbarkeit spannend. Wollen wir verhindern, dass Unbefugte heikle Funktionalität nutzen, ist Sicherheit ein Thema. Diese Qualitätsmerkmale beziehen sich oft auf weite Systemteile oder sogar das Gesamtsystem. Zuverlässigkeit lässt sich nicht durch eine neue Klasse oder Komponente sicherstellen, die gesamte Anwendung und deren Basis müssen entsprechenden Prinzipien gehorchen.",
      "id": [
        "139590"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139591]\nQualität ist somit meist __querschnittlich__ und betrifft viele bis alle Entwickler. Wir erreichen Qualitätsmerkmale durch den Einsatz der richtigen Technologien, Plattformen, Frameworks, Muster oder die breite Adaptierung von Arbeitsweisen. Das ist grundlegende Arbeit am Fundament. Entsprechende Entscheidungen sind weitreichend und oft aufwendig in der Umsetzung. Wir sind damit mitten in der Architekturdomäne und es ist wenig überraschend, dass Qualitätsanforderungen als __die__ Architekturanforderungen gesehen werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Qualität ist somit meist __querschnittlich__ und betrifft viele bis alle Entwickler. Wir erreichen Qualitätsmerkmale durch den Einsatz der richtigen Technologien, Plattformen, Frameworks, Muster oder die breite Adaptierung von Arbeitsweisen. Das ist grundlegende Arbeit am Fundament. Entsprechende Entscheidungen sind weitreichend und oft aufwendig in der Umsetzung. Wir sind damit mitten in der Architekturdomäne und es ist wenig überraschend, dass Qualitätsanforderungen als __die__ Architekturanforderungen gesehen werden.",
      "id": [
        "139591"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139592]\n|info:**Wie dieses Buch hilft**\n\nJedes Entwicklungsvorhaben, egal wie leichtgewichtig oder agil, muss seine quali­ tativen Anforderungen kennen. In diesem Buch stelle ich einen leichtgewichtigen Ansatz zur Verankerung und gemeinsamen Bearbeitung dieser Anforderungen vor. Den Start macht Kapitel 3 – „Die Grundlage von Architekturarbeit“.\n\nDie wichtigsten Muster für diesen Teil der Vision:\n\n•  3.1 - Initialer Anforderungs-­Workshop\n•  3.3 - Szenarien als Architekturanforderungen\n•  3.6 - Architekturarbeit im Backlog\n•  4.4 - Architekturentscheidungen treffen",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "|info:**Wie dieses Buch hilft**\n\nJedes Entwicklungsvorhaben, egal wie leichtgewichtig oder agil, muss seine quali­ tativen Anforderungen kennen. In diesem Buch stelle ich einen leichtgewichtigen Ansatz zur Verankerung und gemeinsamen Bearbeitung dieser Anforderungen vor. Den Start macht Kapitel 3 – „Die Grundlage von Architekturarbeit“.\n\nDie wichtigsten Muster für diesen Teil der Vision:\n\n•  3.1 - Initialer Anforderungs-­Workshop\n•  3.3 - Szenarien als Architekturanforderungen\n•  3.6 - Architekturarbeit im Backlog\n•  4.4 - Architekturentscheidungen treffen",
      "id": [
        "139592"
      ]
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139593]\n[%2.1.2]\n[###Vom Aufwand her dem Problem angemessen]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.1.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139593"
      ],
      "title": "Vom Aufwand her dem Problem angemessen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139594]\nStellen Sie sich ein Produktentwicklungsprojekt vor, das auf einem bekannten Technologie­ stack aufsetzt. Es gibt ein passendes, unternehmensspezifisches Applikationsframework, das einzige Umsetzungsteam hat bereits ähnliche Projekte durchgeführt und kennt die Domäne. Der Projektplan ist realistisch und der Aufwand ist überschaubar. Dieses Projekt kommt wohl mit weniger Architekturaufwänden aus als ein großes Projekt für die Umsetzung einer neuartigen Flugsicherungssoftware. Im ersten Projekt ergeben sich wahrscheinlich weniger risikoreiche Fragestellungen. Das Umfeld ist weniger komplex, das zu lösende Problem und der Lösungsweg sind recht gut verstanden. In Projekt zwei sind einige Komplexitätstreiber zu finden – Architekturarbeit wird spannender. Bild 2.1 zeigt, wie sich Architekturaufwände und Komplexitätstreiber die Waage halten sollten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Stellen Sie sich ein Produktentwicklungsprojekt vor, das auf einem bekannten Technologie­ stack aufsetzt. Es gibt ein passendes, unternehmensspezifisches Applikationsframework, das einzige Umsetzungsteam hat bereits ähnliche Projekte durchgeführt und kennt die Domäne. Der Projektplan ist realistisch und der Aufwand ist überschaubar. Dieses Projekt kommt wohl mit weniger Architekturaufwänden aus als ein großes Projekt für die Umsetzung einer neuartigen Flugsicherungssoftware. Im ersten Projekt ergeben sich wahrscheinlich weniger risikoreiche Fragestellungen. Das Umfeld ist weniger komplex, das zu lösende Problem und der Lösungsweg sind recht gut verstanden. In Projekt zwei sind einige Komplexitätstreiber zu finden – Architekturarbeit wird spannender. Bild 2.1 zeigt, wie sich Architekturaufwände und Komplexitätstreiber die Waage halten sollten.",
      "id": [
        "139594"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139595]\nArbeit an der Softwarearchitektur hat das Ziel, gute Entscheidungen zum richtigen Zeitpunkt zu treffen und das Risiko einer falschen Entscheidung zu minimieren. Zu hohe Aufwände machen die Entwicklung schwerfällig, langsam und aufwendiger als nötig. Erstellen Sie etwa einen Prototypen für eine einfach umzusetzende Anforderung, verzögern Sie die Umsetzung und die damit verbundene Rückmeldung. Ihr Aufwand hat zudem wenig bis keinen Nutzen. Solche „Irrwege“ behindern vor allem in weniger komplexen, dynamischen Projekten und machen sie starrer als nötig.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Arbeit an der Softwarearchitektur hat das Ziel, gute Entscheidungen zum richtigen Zeitpunkt zu treffen und das Risiko einer falschen Entscheidung zu minimieren. Zu hohe Aufwände machen die Entwicklung schwerfällig, langsam und aufwendiger als nötig. Erstellen Sie etwa einen Prototypen für eine einfach umzusetzende Anforderung, verzögern Sie die Umsetzung und die damit verbundene Rückmeldung. Ihr Aufwand hat zudem wenig bis keinen Nutzen. Solche „Irrwege“ behindern vor allem in weniger komplexen, dynamischen Projekten und machen sie starrer als nötig.",
      "id": [
        "139595"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139596]\nAuf der anderen Seite führt zu wenig Arbeit an der Softwarearchitektur zu zufälliger Architek­ tur und potenziell zur Verfehlung wichtiger Ziele. In architektonisch risikoreichen Umfeldern muss folglich ausreichend fundierte Architekturarbeit geleistet werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Auf der anderen Seite führt zu wenig Arbeit an der Softwarearchitektur zu zufälliger Architek­ tur und potenziell zur Verfehlung wichtiger Ziele. In architektonisch risikoreichen Umfeldern muss folglich ausreichend fundierte Architekturarbeit geleistet werden.",
      "id": [
        "139596"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139597]\nWichtig ist die richtige Balance, die sich für jedes Vorhaben anders gestaltet.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wichtig ist die richtige Balance, die sich für jedes Vorhaben anders gestaltet.",
      "id": [
        "139597"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139598]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_2.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139598"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_2.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139599]\n::info::\n**Wie dieses Buch hilft**\n\nDas richtige Maß an Softwarearchitekturarbeit ist in jeder Entwicklungsphase interessant. In diesem Buch bespreche ich einerseits die Menge an vorab zu leistender Architekturarbeit, andererseits zeige ich, wie Sie bei konkreten Frage­ stellungen entscheiden, ob Architekturarbeit notwendig ist und wann diese Arbeit erfolgen sollte.\n\nDie wichtigsten Muster für diesen Teil der Vision:\n\n•  4.1 - Architekturarbeit vom Rest trennen\n•  4.2 - Der letzte vernünftige Moment\n•  4.3 - Gerade genug Architektur vorweg\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Wie dieses Buch hilft**\n\nDas richtige Maß an Softwarearchitekturarbeit ist in jeder Entwicklungsphase interessant. In diesem Buch bespreche ich einerseits die Menge an vorab zu leistender Architekturarbeit, andererseits zeige ich, wie Sie bei konkreten Frage­ stellungen entscheiden, ob Architekturarbeit notwendig ist und wann diese Arbeit erfolgen sollte.\n\nDie wichtigsten Muster für diesen Teil der Vision:\n\n•  4.1 - Architekturarbeit vom Rest trennen\n•  4.2 - Der letzte vernünftige Moment\n•  4.3 - Gerade genug Architektur vorweg\n::",
      "id": [
        "139599"
      ]
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139600]\n[%2.1.3]\n[###Von aktuellen Erkenntnissen zu Zusammenarbeit und Vorgehen beeinflusst]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.1.3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139600"
      ],
      "title": "Von aktuellen Erkenntnissen zu Zusammenarbeit und Vorgehen beeinflusst"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139601]\nAuch wenn die Wurzeln der Disziplin noch weiter zurückreichen, Softwarearchitektur ist ein Kind der 1990er­Jahre. Im universitären Umfeld und mit großer finanzieller Unterstützung des amerikanischen Verteidigungsministeriums wurden Muster, Sprachen und Methoden erarbeitet2. Weil Rollen­ und Prozessmodelle ihre Blütezeit erlebten, konnte man die Disziplin relativ leicht einem „Architekten“ zuschlagen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Auch wenn die Wurzeln der Disziplin noch weiter zurückreichen, Softwarearchitektur ist ein Kind der 1990er­Jahre. Im universitären Umfeld und mit großer finanzieller Unterstützung des amerikanischen Verteidigungsministeriums wurden Muster, Sprachen und Methoden erarbeitet2. Weil Rollen­ und Prozessmodelle ihre Blütezeit erlebten, konnte man die Disziplin relativ leicht einem „Architekten“ zuschlagen.",
      "id": [
        "139601"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139602]\nDie Softwareentwicklung hat seit den 1990er­Jahren viel gelernt. Agile Softwareentwicklung, Lean Development oder auch die Organisationstheorie beinhalten viele Erkenntnisse zu Zusammenarbeit, Komplexität und Dynamik. Auch Softwarearchitektur kann als Disziplin von diesen Erkenntnissen profitieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Softwareentwicklung hat seit den 1990er­Jahren viel gelernt. Agile Softwareentwicklung, Lean Development oder auch die Organisationstheorie beinhalten viele Erkenntnisse zu Zusammenarbeit, Komplexität und Dynamik. Auch Softwarearchitektur kann als Disziplin von diesen Erkenntnissen profitieren.",
      "id": [
        "139602"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139603]\nWie wäre es mit Praktiken, die es ermöglichen, Architekturaufgaben effektiv auf mehrere Schultern zu verteilen? Praktiken, die dynamisches Vorgehen nicht bremsen? Was halten Sie von zeitgemäßen Methoden zur Minimierung von Unsicherheiten und Risiken? Und was wäre, wenn Softwarearchitektur so transparent wird, dass Sie stetig und gewinnbringend mit Stakeholdern zusammenarbeiten können?",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wie wäre es mit Praktiken, die es ermöglichen, Architekturaufgaben effektiv auf mehrere Schultern zu verteilen? Praktiken, die dynamisches Vorgehen nicht bremsen? Was halten Sie von zeitgemäßen Methoden zur Minimierung von Unsicherheiten und Risiken? Und was wäre, wenn Softwarearchitektur so transparent wird, dass Sie stetig und gewinnbringend mit Stakeholdern zusammenarbeiten können?",
      "id": [
        "139603"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139604]\n::info::\n**Wie dieses Buch hilft**\n\nDie herausragendsten Errungenschaften moderner Vorgehensmodelle betreffen gesteigerte Dynamik und Flexibilität. In diesem Buch zeige ich, wie Sie Architek­ turarbeit daran teilhaben lassen. Zentral ist dabei **Kapitel 5** – „Zusammenarbeit und Interaktion“. Praktiken der anderen Musterkapitel unterstützen Sie bei der Anwendung dieser Konzepte.\nDie wichtigsten Muster für diesen Teil der Vision:\n\n•  4.6 - Risiken aktiv behandeln\n•  5.1 - Informativer Arbeitsplatz\n•  5.2 - Gemeinsam entscheiden\n•  5.5 - Wiederkehrende Reflexion\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Wie dieses Buch hilft**\n\nDie herausragendsten Errungenschaften moderner Vorgehensmodelle betreffen gesteigerte Dynamik und Flexibilität. In diesem Buch zeige ich, wie Sie Architek­ turarbeit daran teilhaben lassen. Zentral ist dabei **Kapitel 5** – „Zusammenarbeit und Interaktion“. Praktiken der anderen Musterkapitel unterstützen Sie bei der Anwendung dieser Konzepte.\nDie wichtigsten Muster für diesen Teil der Vision:\n\n•  4.6 - Risiken aktiv behandeln\n•  5.1 - Informativer Arbeitsplatz\n•  5.2 - Gemeinsam entscheiden\n•  5.5 - Wiederkehrende Reflexion\n::",
      "id": [
        "139604"
      ]
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139605]\n[%2.1.4]\n[###Gut mit der Implementierung verzahnt]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.1.4",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139605"
      ],
      "title": "Gut mit der Implementierung verzahnt"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139606]\nBild 2.2 zeigt ein vereinfachtes Bild des generischen Entwicklungsprozesses, den ich in Ab­ schnitt 7.2 genauer beschreiben werde. Er zeigt, wie Anforderungen die iterative Entwicklung speisen (Mitte) und der Umsetzungszyklus auslieferbare Software erstellt (rechts). Funda­ mentale Fragestellungen wandern vor der Implementierung durch den Architekturzyklus (links). Ich durchwandere das Bild mit Hilfe eines vereinfachten Beispiels, um die Verzahnung von Architektur und Implementierung zu illustrieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bild 2.2 zeigt ein vereinfachtes Bild des generischen Entwicklungsprozesses, den ich in Ab­ schnitt 7.2 genauer beschreiben werde. Er zeigt, wie Anforderungen die iterative Entwicklung speisen (Mitte) und der Umsetzungszyklus auslieferbare Software erstellt (rechts). Funda­ mentale Fragestellungen wandern vor der Implementierung durch den Architekturzyklus (links). Ich durchwandere das Bild mit Hilfe eines vereinfachten Beispiels, um die Verzahnung von Architektur und Implementierung zu illustrieren.",
      "id": [
        "139606"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139607]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_3.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139607"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_3.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139608]\nSie haben immer wieder wichtige Entscheidungen in der Entwicklung zu treffen. Nehmen wir zum Beispiel an, ein Teil Ihrer Applikation nimmt komplizierte Berechnungen vor. Sie haben den Applikationsteil bereits in Bausteine zerlegt und sehen sich nun mit Anforderun­ gen konfrontiert, die hohe Flexibilität im Berechnungsablauf fordern. Da die Fragestellung nicht isoliert betrachtet werden kann und viele Bausteine betrifft, wandern Sie in den Ar­ chitekturzyklus aus Bild 2.2.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie haben immer wieder wichtige Entscheidungen in der Entwicklung zu treffen. Nehmen wir zum Beispiel an, ein Teil Ihrer Applikation nimmt komplizierte Berechnungen vor. Sie haben den Applikationsteil bereits in Bausteine zerlegt und sehen sich nun mit Anforderun­ gen konfrontiert, die hohe Flexibilität im Berechnungsablauf fordern. Da die Fragestellung nicht isoliert betrachtet werden kann und viele Bausteine betrifft, wandern Sie in den Ar­ chitekturzyklus aus Bild 2.2.",
      "id": [
        "139608"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139609]\nUm möglichst lose Kopplung zu erreichen, entwerfen Sie einen einfachen Eventmechanis­ mus. Sie sehen vor, dass Komponenten einen eigenen Berechnungszustand halten und bei Änderungen an diesem Zustand entsprechende Events feuern. Andere Bausteine können auf diese Events reagieren. Sie erstellen eine kleine Implementierung, die die Möglichkeiten Ihrer Plattform nutzt, um diese Idee umzusetzen. Es funktioniert.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Um möglichst lose Kopplung zu erreichen, entwerfen Sie einen einfachen Eventmechanis­ mus. Sie sehen vor, dass Komponenten einen eigenen Berechnungszustand halten und bei Änderungen an diesem Zustand entsprechende Events feuern. Andere Bausteine können auf diese Events reagieren. Sie erstellen eine kleine Implementierung, die die Möglichkeiten Ihrer Plattform nutzt, um diese Idee umzusetzen. Es funktioniert.",
      "id": [
        "139609"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139610]\nAn dieser Stelle definieren Sie die Idee als brauchbare Möglichkeit und entscheiden sich für eine breitere Umsetzung. Sie schaffen damit die Grundlage für Implementierungstätigkei­ ten, Sie stellen eine Vorgabe auf (siehe Bild 2.2, oben links). Es handelt sich um den ersten wichtigen Berührungspunkt zwischen Architektur­ und Umsetzungsarbeit.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "An dieser Stelle definieren Sie die Idee als brauchbare Möglichkeit und entscheiden sich für eine breitere Umsetzung. Sie schaffen damit die Grundlage für Implementierungstätigkei­ ten, Sie stellen eine Vorgabe auf (siehe Bild 2.2, oben links). Es handelt sich um den ersten wichtigen Berührungspunkt zwischen Architektur­ und Umsetzungsarbeit.",
      "id": [
        "139610"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139611]\nIn der Umsetzung wenden Sie das Konzept auf Ihre Bausteine an (vielleicht nicht sofort auf alle). Sie versuchen, Zustandsübergänge zu definieren, eine produktivtaugliche Implementie­ rung für den Zustand selbst zu kreieren und entwerfen fachliche Events. Erst hier haben Sie das Problem annähernd vollständig vor Augen: Sie erkennen, wie kompliziert sich Zustände teilweise zusammensetzen, welche Daten mit den Events übertragen werden müssen und wie diese Lösung mit anderen Konzepten Ihrer Bausteine zusammenwirkt. Haben Sie wichtige Teile umgesetzt, können Sie mit Tests eine Idee vom Laufzeitverhalten bekommen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In der Umsetzung wenden Sie das Konzept auf Ihre Bausteine an (vielleicht nicht sofort auf alle). Sie versuchen, Zustandsübergänge zu definieren, eine produktivtaugliche Implementie­ rung für den Zustand selbst zu kreieren und entwerfen fachliche Events. Erst hier haben Sie das Problem annähernd vollständig vor Augen: Sie erkennen, wie kompliziert sich Zustände teilweise zusammensetzen, welche Daten mit den Events übertragen werden müssen und wie diese Lösung mit anderen Konzepten Ihrer Bausteine zusammenwirkt. Haben Sie wichtige Teile umgesetzt, können Sie mit Tests eine Idee vom Laufzeitverhalten bekommen.",
      "id": [
        "139611"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139612]\nHier ist der zweite wichtige Berührungspunkt zwischen Architektur und Implementierung: die Rückmeldung aus der Implementierung, samt den Erkenntnissen aus Integration und Test (siehe Bild 2.2, oben rechts). Sie sollten diese Rückmeldung __häufig__ und __zeitnah__ suchen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Hier ist der zweite wichtige Berührungspunkt zwischen Architektur und Implementierung: die Rückmeldung aus der Implementierung, samt den Erkenntnissen aus Integration und Test (siehe Bild 2.2, oben rechts). Sie sollten diese Rückmeldung __häufig__ und __zeitnah__ suchen.",
      "id": [
        "139612"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139613]\nSo prüfen Sie Architekturentscheidungen und minimieren den Raum für Annahmen und Spekulationen3. Technische oder konzeptionelle Probleme, die auf Implementierungsebene auftreten, stellen einen sekundären Architekturtreiber dar (neben den weiter oben bespro­ chenen Anforderungen). Insgesamt entsteht eine gelebte Softwarearchitektur, die durch die Implementierung nicht verwässert, sondern bereichert wird.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "So prüfen Sie Architekturentscheidungen und minimieren den Raum für Annahmen und Spekulationen3. Technische oder konzeptionelle Probleme, die auf Implementierungsebene auftreten, stellen einen sekundären Architekturtreiber dar (neben den weiter oben bespro­ chenen Anforderungen). Insgesamt entsteht eine gelebte Softwarearchitektur, die durch die Implementierung nicht verwässert, sondern bereichert wird.",
      "id": [
        "139613"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139614]\nZeitgemäße Softwarearchitektur zeichnet sich durch häufige und schlanke Durchläufe des Architekturzyklus aus. Die Übergänge an beiden Berührungspunkten zur Umsetzung sind gut verstanden und mit geringen Aufwänden verbunden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Zeitgemäße Softwarearchitektur zeichnet sich durch häufige und schlanke Durchläufe des Architekturzyklus aus. Die Übergänge an beiden Berührungspunkten zur Umsetzung sind gut verstanden und mit geringen Aufwänden verbunden.",
      "id": [
        "139614"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139615]\n::info::\n**Wie dieses Buch hilft**\n\nDer schlanke, häufige Durchlauf des Architekturzyklus wird durch \ndie Anforde­rungskonzepte aus Kapitel 3 ermöglicht. In Kapitel 4 – „Richtig entscheiden“ fin­den Sie Hinweise zur Erarbeitung von „Vorgaben“. Passende Rückmeldungen aus der Umsetzung, die möglichst häufig Architekturideen prüfen, sind das Thema von **Kapitel 6** – „Abgleich mit der Realität“. Dort beschreibe ich den Kern der Verzah­nung von Implementierung und Architektur.\n\nDie wichtigsten Muster für diesen Teil der Vision:\n\n•  3.5 - Technische Schulden als Architekturanforderungen\n•  6.3 - Qualitative Eigenschaften testen\n•  6.5 - Code und Architektur verbinden\n•  6.6 - Kontinuierlich integrieren und ausliefern\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Wie dieses Buch hilft**\n\nDer schlanke, häufige Durchlauf des Architekturzyklus wird durch \ndie Anforde­rungskonzepte aus Kapitel 3 ermöglicht. In Kapitel 4 – „Richtig entscheiden“ fin­den Sie Hinweise zur Erarbeitung von „Vorgaben“. Passende Rückmeldungen aus der Umsetzung, die möglichst häufig Architekturideen prüfen, sind das Thema von **Kapitel 6** – „Abgleich mit der Realität“. Dort beschreibe ich den Kern der Verzah­nung von Implementierung und Architektur.\n\nDie wichtigsten Muster für diesen Teil der Vision:\n\n•  3.5 - Technische Schulden als Architekturanforderungen\n•  6.3 - Qualitative Eigenschaften testen\n•  6.5 - Code und Architektur verbinden\n•  6.6 - Kontinuierlich integrieren und ausliefern\n::",
      "id": [
        "139615"
      ]
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139616]\n[%2.1.5]\n[###Einfach in aktuelle Vorgehensmodelle integrierbar]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.1.5",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139616"
      ],
      "title": "Einfach in aktuelle Vorgehensmodelle integrierbar"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139617]\nImmer mehr Projekte adoptieren ein Vorgehen, das mit so wenig Verzögerung wie möglich Richtung Auslieferung von Software drängt. Das Stichwort „agil“ ist so omnipräsent, dass sich viele bereits genervt abwenden, wenn das Thema zur Sprache kommt. Ich verweigere mich jedem religiösen Fanatismus an dieser Stelle und möchte hier auch nicht dogmatisch werden. Nüchtern betrachtet setzen immer mehr Unternehmen auf agile Praktiken – und es funktioniert. Viele Studien und Umfragen zeigen Erfolge von agilen Projekten (Ric07), (Bar06), (Vig09), (Wol08). Eine jährlich durchgeführte Umfrage von VersionOne (Ver13) befragte 4.048 IT­Mitarbeiter aus Europa und den USA zum „State of Agile Development“. 84 % der Organisationen setzen demnach agile Methoden ein, nur 3 % der Unternehmen planen das in Zukunft __nicht__ zu tun. Scrum ist, wenig überraschend, am weitesten verbreitet und kommt auf 72 % Marktanteil unter den agilen Methoden (Varianten mit eingerechnet).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Immer mehr Projekte adoptieren ein Vorgehen, das mit so wenig Verzögerung wie möglich Richtung Auslieferung von Software drängt. Das Stichwort „agil“ ist so omnipräsent, dass sich viele bereits genervt abwenden, wenn das Thema zur Sprache kommt. Ich verweigere mich jedem religiösen Fanatismus an dieser Stelle und möchte hier auch nicht dogmatisch werden. Nüchtern betrachtet setzen immer mehr Unternehmen auf agile Praktiken – und es funktioniert. Viele Studien und Umfragen zeigen Erfolge von agilen Projekten (Ric07), (Bar06), (Vig09), (Wol08). Eine jährlich durchgeführte Umfrage von VersionOne (Ver13) befragte 4.048 IT­Mitarbeiter aus Europa und den USA zum „State of Agile Development“. 84 % der Organisationen setzen demnach agile Methoden ein, nur 3 % der Unternehmen planen das in Zukunft __nicht__ zu tun. Scrum ist, wenig überraschend, am weitesten verbreitet und kommt auf 72 % Marktanteil unter den agilen Methoden (Varianten mit eingerechnet).",
      "id": [
        "139617"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139618]\nWas bedeutet das für die Disziplin der Softwarearchitektur? Zeitgemäße Softwarearchitektur muss __auch__ in agile Entwicklungsvorhaben passen und sollte die Konzepte, Praktiken und Rollen dieser Ansätze nutzen und annehmen. Sie muss zumindest iterativ leistbar sein und sollte eher erklären, wie Architekturpraktiken in moderne Vorgehensmodelle passen, als diese Vorgehensmodelle mit behindernden oder umständlichen Ergänzungen zu versehen. Wenn 75 % der Projekte Iterationsplanungstreffen abhalten, 56 % kontinuierlich integrieren und immerhin 23 % Kanban nutzen (nach Ver13), sollte Softwarearchitektur zumindest ihren Platz in diesen Praktiken kennen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Was bedeutet das für die Disziplin der Softwarearchitektur? Zeitgemäße Softwarearchitektur muss __auch__ in agile Entwicklungsvorhaben passen und sollte die Konzepte, Praktiken und Rollen dieser Ansätze nutzen und annehmen. Sie muss zumindest iterativ leistbar sein und sollte eher erklären, wie Architekturpraktiken in moderne Vorgehensmodelle passen, als diese Vorgehensmodelle mit behindernden oder umständlichen Ergänzungen zu versehen. Wenn 75 % der Projekte Iterationsplanungstreffen abhalten, 56 % kontinuierlich integrieren und immerhin 23 % Kanban nutzen (nach Ver13), sollte Softwarearchitektur zumindest ihren Platz in diesen Praktiken kennen.",
      "id": [
        "139618"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139619]\n::info::\n**Wie dieses Buch hilft**\n\nAuf dem Weg von Anforderungen über die Umsetzung bis zur Auslieferung darf Architektur nicht im Weg sein. Die Muster dieses Buchs nutzen deshalb agile Konzepte oder erweitern sie, ohne den Zweck zu verwässern. Andockpunkte für Scrum und Kanban finden sich über den gesamten beschriebenen Entwicklungs­ zyklus. Trotzdem sind die Muster auch in klassischeren Umfeldern brauchbar (iterative Entwicklung vorausgesetzt).\n\nDie wichtigsten Muster für diesen Teil der Vision:\n\n•  3.6 - Architekturarbeit im Backlog\n•  3.7 - Architekturarbeit auf Kanban\n•  4.5 - Release­Planung mit Architekturfragen\n•  5.4 - Stakeholder involvieren\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Wie dieses Buch hilft**\n\nAuf dem Weg von Anforderungen über die Umsetzung bis zur Auslieferung darf Architektur nicht im Weg sein. Die Muster dieses Buchs nutzen deshalb agile Konzepte oder erweitern sie, ohne den Zweck zu verwässern. Andockpunkte für Scrum und Kanban finden sich über den gesamten beschriebenen Entwicklungs­ zyklus. Trotzdem sind die Muster auch in klassischeren Umfeldern brauchbar (iterative Entwicklung vorausgesetzt).\n\nDie wichtigsten Muster für diesen Teil der Vision:\n\n•  3.6 - Architekturarbeit im Backlog\n•  3.7 - Architekturarbeit auf Kanban\n•  4.5 - Release­Planung mit Architekturfragen\n•  5.4 - Stakeholder involvieren\n::",
      "id": [
        "139619"
      ]
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139620]\n[%2.1.6]\n[###Warum Design alleine nicht hilft]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.1.6",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139620"
      ],
      "title": "Warum Design alleine nicht hilft"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139621]\nEs gibt wichtige Fähigkeiten, die ein guter Entwickler haben sollte. Dazu zählen zweifellos Praktiken und Prinzipien rund um den Entwurf und das Design von Software. Bild 2.3 gibt einen Überblick zu einem Teil der entsprechenden Fähigkeiten und Denkweisen. Sie gehen über das stumpfe „Runterprogrammieren“ von Anforderungen hinaus.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Es gibt wichtige Fähigkeiten, die ein guter Entwickler haben sollte. Dazu zählen zweifellos Praktiken und Prinzipien rund um den Entwurf und das Design von Software. Bild 2.3 gibt einen Überblick zu einem Teil der entsprechenden Fähigkeiten und Denkweisen. Sie gehen über das stumpfe „Runterprogrammieren“ von Anforderungen hinaus.",
      "id": [
        "139621"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139622]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_4.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139622"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_4.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139623]\nEs ist durchaus sinnvoll, die Ideen aus Bild 2.3 als eigene Disziplin zu betrachten und entsprechendes Wissen breit zu streuen. Ich nenne diese Disziplin wenig überraschend „Design“. Auch wenn es Überschneidungen mit Softwarearchitektur gibt, sind Design und Architektur nicht deckungsgleich. Betrachten wir die enthaltenen Praktiken und Prinzipien genauer, sind zwei Dinge spannend:\n\n•  Mit dem Fokus auf einfache, bewegliche, gut verständliche Lösungen unterstützt Design vor allem ein Qualitätsmerkmal: Wartbarkeit. Architektur hat einen breiteren Fokus auf alle Qualitätsmerkmale und gleichzeitig das Ziel, eventuelle Kompromisse aufzulösen. Der Einsatz von Designpraktiken ist damit selbst eine Architekturentscheidung. Architektur bildet den Rahmen für die Designdisziplin.\n\n• Der Einsatz von Designpraktiken beeinflusst die Struktur der Softwarelösung und hält sie flexibel. Entscheidungen rund um die Funktionalität, die Klassenstruktur und den Interfaceschnitt werden leichter änderbar – und damit weniger architekturrelevant. Gutes Design reduziert die nötige Architekturarbeit. Die Struktur kann potenziell durch Implementierungs­ und Refactoring­Zyklen entstehen und wächst über die Zeit, statt zu Beginn vollständig geplant zu werden (modisches Stichwort: „emergentes Design“). Bild 2.4 verdeutlicht die Zusammenhänge.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Es ist durchaus sinnvoll, die Ideen aus Bild 2.3 als eigene Disziplin zu betrachten und entsprechendes Wissen breit zu streuen. Ich nenne diese Disziplin wenig überraschend „Design“. Auch wenn es Überschneidungen mit Softwarearchitektur gibt, sind Design und Architektur nicht deckungsgleich. Betrachten wir die enthaltenen Praktiken und Prinzipien genauer, sind zwei Dinge spannend:\n\n•  Mit dem Fokus auf einfache, bewegliche, gut verständliche Lösungen unterstützt Design vor allem ein Qualitätsmerkmal: Wartbarkeit. Architektur hat einen breiteren Fokus auf alle Qualitätsmerkmale und gleichzeitig das Ziel, eventuelle Kompromisse aufzulösen. Der Einsatz von Designpraktiken ist damit selbst eine Architekturentscheidung. Architektur bildet den Rahmen für die Designdisziplin.\n\n• Der Einsatz von Designpraktiken beeinflusst die Struktur der Softwarelösung und hält sie flexibel. Entscheidungen rund um die Funktionalität, die Klassenstruktur und den Interfaceschnitt werden leichter änderbar – und damit weniger architekturrelevant. Gutes Design reduziert die nötige Architekturarbeit. Die Struktur kann potenziell durch Implementierungs­ und Refactoring­Zyklen entstehen und wächst über die Zeit, statt zu Beginn vollständig geplant zu werden (modisches Stichwort: „emergentes Design“). Bild 2.4 verdeutlicht die Zusammenhänge.",
      "id": [
        "139623"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139624]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_5.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139624"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_5.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139625]\nIch werde den Blick in weiterer Folge auf Architektur fokussieren. Nicht weil Design, wie ich es in diesem Abschnitt abgegrenzt habe, nicht wichtig ist! Design ist essenziell und macht Architekturarbeit sicher einfacher. Gleichzeitig ist die Designdisziplin aber gut verstanden und aktuell viel besprochen. Die Verzahnung mit der Implementierung ist relativ geradlinig und in aktuellen Bewegungen wie „Software Craftsmenship“ ausreichend behandelt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Ich werde den Blick in weiterer Folge auf Architektur fokussieren. Nicht weil Design, wie ich es in diesem Abschnitt abgegrenzt habe, nicht wichtig ist! Design ist essenziell und macht Architekturarbeit sicher einfacher. Gleichzeitig ist die Designdisziplin aber gut verstanden und aktuell viel besprochen. Die Verzahnung mit der Implementierung ist relativ geradlinig und in aktuellen Bewegungen wie „Software Craftsmenship“ ausreichend behandelt.",
      "id": [
        "139625"
      ]
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139626]\n[%2.1.7]\n[###Warum agiles Vorgehen alleine nicht hilft]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.1.7",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139626"
      ],
      "title": "Warum agiles Vorgehen alleine nicht hilft"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139627]\nEs ist risikoreich, architekturelle Fragestellungen leichtfertig zu entscheiden oder sie zu ignorieren. Kümmern Sie sich in Ihrer Entwicklung nicht explizit um Softwarearchitektur, entsteht eine „zufällige Architektur“ (engl. accidential architecture (Boo06)), die nur eventuell die qualitativen Anforderungen und Vorstellungen Ihrer Stakeholder erfüllt. Mit dieser Art von Architekturarbeit kommen Sie nur bei Standardproblemen oder „einfachen“ Vorhaben davon. Sobald das Umfeld komplexer wird, haben Sie ein Problem oder brauchen viel Glück.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Es ist risikoreich, architekturelle Fragestellungen leichtfertig zu entscheiden oder sie zu ignorieren. Kümmern Sie sich in Ihrer Entwicklung nicht explizit um Softwarearchitektur, entsteht eine „zufällige Architektur“ (engl. accidential architecture (Boo06)), die nur eventuell die qualitativen Anforderungen und Vorstellungen Ihrer Stakeholder erfüllt. Mit dieser Art von Architekturarbeit kommen Sie nur bei Standardproblemen oder „einfachen“ Vorhaben davon. Sobald das Umfeld komplexer wird, haben Sie ein Problem oder brauchen viel Glück.",
      "id": [
        "139627"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139628]\nScrum und eXtreme Programming sind die am weitesten verbreiteten Vorgehensmodelle für agile Projekte (Ver13). Beide wurden nicht für große oder komplexe Projekte entworfen und liefern wenig Hilfestellung für architekturelle Probleme (vgl. (Lef10)). Ein Symptom, das immer wieder zu beobachten ist, ist das Stocken des Entwicklungsflusses in diesen Projekten. Nach Phasen, in denen Features mit stetiger Geschwindigkeit ausgeliefert werden, gibt es Rückschläge und die Produktivität sinkt drastisch. Durch die Integration leichtgewichtiger Architekturpraktiken können Unterbrechungen des Entwicklungsflusses effektiv bekämpft werden (Bel13).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Scrum und eXtreme Programming sind die am weitesten verbreiteten Vorgehensmodelle für agile Projekte (Ver13). Beide wurden nicht für große oder komplexe Projekte entworfen und liefern wenig Hilfestellung für architekturelle Probleme (vgl. (Lef10)). Ein Symptom, das immer wieder zu beobachten ist, ist das Stocken des Entwicklungsflusses in diesen Projekten. Nach Phasen, in denen Features mit stetiger Geschwindigkeit ausgeliefert werden, gibt es Rückschläge und die Produktivität sinkt drastisch. Durch die Integration leichtgewichtiger Architekturpraktiken können Unterbrechungen des Entwicklungsflusses effektiv bekämpft werden (Bel13).",
      "id": [
        "139628"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139629]\n**Agiler Fokus auf Design**\n\nIn der agilen Diskussion um Softwarearchitektur nehmen Designpraktiken einen hohen Stellenwert ein. Testgetriebene Entwicklung, Clean Code, Refactoring, Pair Programming oder die Befolgung von Designprinzipien werden breit gepredigt und gelebt. Wie in Ab­ schnitt 2.1.6 besprochen, kann die Struktur von Software damit flexibler gehalten werden, Architekturarbeit wird aber nur teilweise ersetzt. Qualitätsanforderungen wie Sicherheit oder Zuverlässigkeit werden durch Designarbeit nicht adressiert und Entscheidungen zu Platt­ formen, Frameworks, Programmierstilen oder Protokollen sind meist grundlegender Natur. Lösungen zu diesen Themen wachsen nicht aus gutem Design, sondern aus Architekturarbeit.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Agiler Fokus auf Design**\n\nIn der agilen Diskussion um Softwarearchitektur nehmen Designpraktiken einen hohen Stellenwert ein. Testgetriebene Entwicklung, Clean Code, Refactoring, Pair Programming oder die Befolgung von Designprinzipien werden breit gepredigt und gelebt. Wie in Ab­ schnitt 2.1.6 besprochen, kann die Struktur von Software damit flexibler gehalten werden, Architekturarbeit wird aber nur teilweise ersetzt. Qualitätsanforderungen wie Sicherheit oder Zuverlässigkeit werden durch Designarbeit nicht adressiert und Entscheidungen zu Platt­ formen, Frameworks, Programmierstilen oder Protokollen sind meist grundlegender Natur. Lösungen zu diesen Themen wachsen nicht aus gutem Design, sondern aus Architekturarbeit.",
      "id": [
        "139629"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139630]\n**Fehlende Qualitätsanforderungen**\n\nWartbarkeit und Erweiterbarkeit sind häufig die prominentesten Qualitätsmerkmale in agilen Entwicklungsmannschaften. Selbst diese Qualitätsmerkmale werden aber meist nicht in Anforderungen gegossen. Backlogs von Scrum­Teams sind oft __nur mit funktionalen Stories__ gefüllt – mit Qualitätsanforderungen fehlt die wichtigste Grundlage für Architekturarbeit. Das hat mehrere Konsequenzen:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Fehlende Qualitätsanforderungen**\n\nWartbarkeit und Erweiterbarkeit sind häufig die prominentesten Qualitätsmerkmale in agilen Entwicklungsmannschaften. Selbst diese Qualitätsmerkmale werden aber meist nicht in Anforderungen gegossen. Backlogs von Scrum­Teams sind oft __nur mit funktionalen Stories__ gefüllt – mit Qualitätsanforderungen fehlt die wichtigste Grundlage für Architekturarbeit. Das hat mehrere Konsequenzen:",
      "id": [
        "139630"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139631]\n• **Kompromisse** zwischen konkurrierenden Qualitäten werden **erst spät erkannt** und müssen mühevoll aufgelöst werden, wenn bereits viel Programmcode entwickelt wurde. Entsprechende Anpassungen können projektgefährdend sein.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "• **Kompromisse** zwischen konkurrierenden Qualitäten werden **erst spät erkannt** und müssen mühevoll aufgelöst werden, wenn bereits viel Programmcode entwickelt wurde. Entsprechende Anpassungen können projektgefährdend sein.",
      "id": [
        "139631"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139632]\n• **Architekturanforderungen** sind **nicht sichtbar.** Entwickler können folglich schwerer einschätzen, hinter welchen Backlog­Einträgen sich Architekturaufgaben verbergen. Die Aufwandsschätzung wird schwieriger und es ist manchmal nur zu raten, ob man das nötige Know-­how hat, um sich bestimmte Aufgaben zu nehmen und zu bearbeiten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "• **Architekturanforderungen** sind **nicht sichtbar.** Entwickler können folglich schwerer einschätzen, hinter welchen Backlog­Einträgen sich Architekturaufgaben verbergen. Die Aufwandsschätzung wird schwieriger und es ist manchmal nur zu raten, ob man das nötige Know-­how hat, um sich bestimmte Aufgaben zu nehmen und zu bearbeiten.",
      "id": [
        "139632"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139633]\n• Die **Kommunikation** ist **unfokussierter.** Qualitätsanforderungen sind querschnittlich, Architekturentscheidungen betreffen viele Projektmitglieder. Sie müssen getroffene Entscheidungen breit kommunizieren und Feedback am Weg zur Entscheidung wäre nicht verkehrt. Wenn Sie diese Fragestellungen nicht erkennen, können Sie nicht gezielt zusammenarbeiten, die Kommunikation enthält viel Rauschen. Größere Projekte oder Produktentwicklungen zerbrechen dann unter zu hohem Kommunikationsdruck oder treffen verteilte, integritätsbedrohende Entscheidungen, die schwer zurückzunehmen sind.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "• Die **Kommunikation** ist **unfokussierter.** Qualitätsanforderungen sind querschnittlich, Architekturentscheidungen betreffen viele Projektmitglieder. Sie müssen getroffene Entscheidungen breit kommunizieren und Feedback am Weg zur Entscheidung wäre nicht verkehrt. Wenn Sie diese Fragestellungen nicht erkennen, können Sie nicht gezielt zusammenarbeiten, die Kommunikation enthält viel Rauschen. Größere Projekte oder Produktentwicklungen zerbrechen dann unter zu hohem Kommunikationsdruck oder treffen verteilte, integritätsbedrohende Entscheidungen, die schwer zurückzunehmen sind.",
      "id": [
        "139633"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139634]\nDie Reaktion auf diese Phänomene ist häufig alles andere als agil. Ich habe gesehen, wie „agile“ Projekte Architektur großspurig wiedereinführen, eigene Architekturabteilungen wiederbeleben und dazu übergehen, wieder früh zu planen. Die Muster in diesem Buch zeigen, wie es anders geht.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Reaktion auf diese Phänomene ist häufig alles andere als agil. Ich habe gesehen, wie „agile“ Projekte Architektur großspurig wiedereinführen, eigene Architekturabteilungen wiederbeleben und dazu übergehen, wieder früh zu planen. Die Muster in diesem Buch zeigen, wie es anders geht.",
      "id": [
        "139634"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:139635]\n[%2.2]\n[##Vorgehensmuster zur Hilfe]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "139635"
      ],
      "title": "Vorgehensmuster zur Hilfe"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139636]\nDie im letzten Abschnitt skizzierte Vision einer zeitgemäßen Architekturdisziplin ist nicht einfach umsetzbar und schon gar nicht mit einem Big-­Bang-­Ansatz über eine Organisa­tion oder ein Projekt zu stülpen. Die Muster dieses Buchs stückeln die wichtigsten Ideen deshalb in handhabbare Größe und machen eine iterative Verbesserung in Ihrer täglichen Architektur­ und Entwicklungsarbeit möglich. In diesem Unterabschnitt fasse ich die vier Musterkapitel (3 bis 6) zusammen und zeige alle enthaltenen Muster mit Problemstellung und Kurzbeschreibung. Anschließend teile ich die Muster in drei Kategorien ein: zentrale Muster für häufig auftretende und grundlegende Probleme, unterstützende Muster, die bei der Musteranwendung oder dem Verständnis helfen, und weiterführende Muster mit ergänzenden Praktiken.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die im letzten Abschnitt skizzierte Vision einer zeitgemäßen Architekturdisziplin ist nicht einfach umsetzbar und schon gar nicht mit einem Big-­Bang-­Ansatz über eine Organisa­tion oder ein Projekt zu stülpen. Die Muster dieses Buchs stückeln die wichtigsten Ideen deshalb in handhabbare Größe und machen eine iterative Verbesserung in Ihrer täglichen Architektur­ und Entwicklungsarbeit möglich. In diesem Unterabschnitt fasse ich die vier Musterkapitel (3 bis 6) zusammen und zeige alle enthaltenen Muster mit Problemstellung und Kurzbeschreibung. Anschließend teile ich die Muster in drei Kategorien ein: zentrale Muster für häufig auftretende und grundlegende Probleme, unterstützende Muster, die bei der Musteranwendung oder dem Verständnis helfen, und weiterführende Muster mit ergänzenden Praktiken.",
      "id": [
        "139636"
      ]
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139637]\n[%2.2.1]\n[###Kapitel 3 – die Basis für Architekturarbeit]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.2.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139637"
      ],
      "title": "Kapitel 3 – die Basis für Architekturarbeit"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139638]\nArchitekturarbeit ist dort sinnvoll, wo Entscheidungen risikoreich sind. Idealerweise erkennen Sie dieses Risiko, __bevor__ die Entscheidung getroffen und die Lösung dafür umgesetzt wurde – also auf Anforderungsebene. In diesem Kapitel werden Muster besprochen, die Ihnen dabei helfen, die richtigen Anforderungen abzuholen, sie zu strukturieren, zu priorisieren und laufend zu verfeinern. Auch die iterative Abarbeitung von Architekturanforderungen in Backlogs oder die Verarbeitung mit Kanban sind Themen. Die Muster schaffen damit die Grundlage für Architekturentscheidungen (Kapitel 4) und die Überprüfung von Architek­ tur im Code (Kapitel 6). Tabelle 2.1 zeigt die Muster von Kapitel 3 inklusive Problem und Kurzbeschreibung.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Architekturarbeit ist dort sinnvoll, wo Entscheidungen risikoreich sind. Idealerweise erkennen Sie dieses Risiko, __bevor__ die Entscheidung getroffen und die Lösung dafür umgesetzt wurde – also auf Anforderungsebene. In diesem Kapitel werden Muster besprochen, die Ihnen dabei helfen, die richtigen Anforderungen abzuholen, sie zu strukturieren, zu priorisieren und laufend zu verfeinern. Auch die iterative Abarbeitung von Architekturanforderungen in Backlogs oder die Verarbeitung mit Kanban sind Themen. Die Muster schaffen damit die Grundlage für Architekturentscheidungen (Kapitel 4) und die Überprüfung von Architek­ tur im Code (Kapitel 6). Tabelle 2.1 zeigt die Muster von Kapitel 3 inklusive Problem und Kurzbeschreibung.",
      "id": [
        "139638"
      ]
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139639]\n[%2.2.2]\n[###Kapitel 4 – richtig entscheiden]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.2.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139639"
      ],
      "title": "Kapitel 4 – richtig entscheiden"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139640]\nDie Architekturdisziplin beinhaltet viele Praktiken, Techniken und Mittel, die bei genaue­ rer Betrachtung alle um ein Thema kreisen: Entscheidungen. Ganze Bibliotheken sind mit Büchern gefüllt, die Ihnen die konzeptionelle und technische Basis für Entscheidungen vermitteln wollen. Irgendwann müssen Sie aber auch zum Herzstück selbst vordringen, müssen entscheiden. In diesem Kapitel werden Muster besprochen, die Ihnen dabei helfen, Architekturentscheidungen von unwichtigeren Entscheidungen zu trennen, sie zu planen und bei Bedarf über mehrere Iterationen hinweg zu bearbeiten, sie zum richtigen Zeitpunkt in der richtigen Granularität zu treffen und dabei auftauchende Risiken aktiv zu behandeln. Tabelle 2.2 zeigt die Muster von Kapitel 4 inklusive Problem und Kurzbeschreibung.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Architekturdisziplin beinhaltet viele Praktiken, Techniken und Mittel, die bei genaue­ rer Betrachtung alle um ein Thema kreisen: Entscheidungen. Ganze Bibliotheken sind mit Büchern gefüllt, die Ihnen die konzeptionelle und technische Basis für Entscheidungen vermitteln wollen. Irgendwann müssen Sie aber auch zum Herzstück selbst vordringen, müssen entscheiden. In diesem Kapitel werden Muster besprochen, die Ihnen dabei helfen, Architekturentscheidungen von unwichtigeren Entscheidungen zu trennen, sie zu planen und bei Bedarf über mehrere Iterationen hinweg zu bearbeiten, sie zum richtigen Zeitpunkt in der richtigen Granularität zu treffen und dabei auftauchende Risiken aktiv zu behandeln. Tabelle 2.2 zeigt die Muster von Kapitel 4 inklusive Problem und Kurzbeschreibung.",
      "id": [
        "139640"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139641]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_6.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139641"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_6.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139642]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_7.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139642"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_7.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139643]\n[%2.2.3]\n[###Kapitel 5 – Zusammenarbeit und Interaktion**]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.2.3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139643"
      ],
      "title": "Kapitel 5 – Zusammenarbeit und Interaktion**"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139644]\n__„Ich bin mehr und mehr davon überzeugt, dass es tatsächlich die alltägliche Kommunikation ist, die Softwareprojekte erfolgreich macht oder sie scheitern lässt. Programmierwerkzeuge, Praktiken und Methoden sind sicher wichtig, aber wenn die Kommunikation versagt, ist der Rest nur mehr bunte Bemalung für den Leichnam“.__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__„Ich bin mehr und mehr davon überzeugt, dass es tatsächlich die alltägliche Kommunikation ist, die Softwareprojekte erfolgreich macht oder sie scheitern lässt. Programmierwerkzeuge, Praktiken und Methoden sind sicher wichtig, aber wenn die Kommunikation versagt, ist der Rest nur mehr bunte Bemalung für den Leichnam“.__",
      "id": [
        "139644"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139645]\n__Gojko Adzic__ (Adz09) hebt auf bestechende Art und Weise hervor, was in so vielen Reali­sierungsprojekten offensichtlich wird: Zusammenarbeit, Interaktion und Austausch sind zentral. Und für welche Disziplin der Softwareentwicklung sollte das mehr gelten als für Softwarearchitektur? Von Architekturarbeit sind schließlich viele bis alle Projektmitglieder betroffen. Die Muster dieses Kapitels zeigen, wie Sie effektiv mit Stakeholdern zusammen­arbeiten können, wie Sie trotz der Arbeit mehrerer Entwickler oder Teams eine konsistente Architektur gewährleisten, wie Sie Wissensmonopole vermeiden und für Transparenz sorgen. Tabelle 2.3 zeigt die Muster von Kapitel 5 inklusive Problem und Kurzbeschreibung.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Gojko Adzic__ (Adz09) hebt auf bestechende Art und Weise hervor, was in so vielen Reali­sierungsprojekten offensichtlich wird: Zusammenarbeit, Interaktion und Austausch sind zentral. Und für welche Disziplin der Softwareentwicklung sollte das mehr gelten als für Softwarearchitektur? Von Architekturarbeit sind schließlich viele bis alle Projektmitglieder betroffen. Die Muster dieses Kapitels zeigen, wie Sie effektiv mit Stakeholdern zusammen­arbeiten können, wie Sie trotz der Arbeit mehrerer Entwickler oder Teams eine konsistente Architektur gewährleisten, wie Sie Wissensmonopole vermeiden und für Transparenz sorgen. Tabelle 2.3 zeigt die Muster von Kapitel 5 inklusive Problem und Kurzbeschreibung.",
      "id": [
        "139645"
      ]
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139646]\n[%2.2.4]\n[###Kapitel 6 – Abgleich mit der Realität**]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.2.4",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139646"
      ],
      "title": "Kapitel 6 – Abgleich mit der Realität**"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139647]\nIhre Architektur ist nicht fertig, wenn Sie ein Konzept erstellt, ein Diagramm gezeichnet oder eine Idee formuliert haben. Architekturentscheidungen beeinflussen große Teile der Umsetzungsarbeit und erst durch die Rückmeldung aus der Umsetzung bzw. die Einhaltung der Architekturprinzipien in allen relevanten Systemteilen wird Architektur lebendig. Gute Architekturarbeit versucht, bearbeitete Fragestellungen möglichst schnell, mit möglichst objektivem Feedback zu versorgen. Die Muster dieses Kapitels verschreiben sich dieser Prüfung und zeigen, wie Sie frühe Rückmeldungen fördern können, wie Sie Architekturei­genschaften im Code analysieren und prüfen können, wie Sie Architekturziele realistisch im Auge behalten und wie Sie mit gefundenen Problemen umgehen können. Tabelle 2.4 zeigt die Muster von Kapitel 6 inklusive Problem und Kurzbeschreibung.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Ihre Architektur ist nicht fertig, wenn Sie ein Konzept erstellt, ein Diagramm gezeichnet oder eine Idee formuliert haben. Architekturentscheidungen beeinflussen große Teile der Umsetzungsarbeit und erst durch die Rückmeldung aus der Umsetzung bzw. die Einhaltung der Architekturprinzipien in allen relevanten Systemteilen wird Architektur lebendig. Gute Architekturarbeit versucht, bearbeitete Fragestellungen möglichst schnell, mit möglichst objektivem Feedback zu versorgen. Die Muster dieses Kapitels verschreiben sich dieser Prüfung und zeigen, wie Sie frühe Rückmeldungen fördern können, wie Sie Architekturei­genschaften im Code analysieren und prüfen können, wie Sie Architekturziele realistisch im Auge behalten und wie Sie mit gefundenen Problemen umgehen können. Tabelle 2.4 zeigt die Muster von Kapitel 6 inklusive Problem und Kurzbeschreibung.",
      "id": [
        "139647"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139648]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_8.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139648"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_8.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139649]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_9.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139649"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_9.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139650]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_10.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139650"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_10.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139651]\n[%2.2.5]\n[###Muster kategorisiert]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.2.5",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "139651"
      ],
      "title": "Muster kategorisiert"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139652]\nBild 2.5 zeigt die 30 Vorgehensmuster für Softwarearchitektur in drei Kategorien eingeteilt:\n\n• **Zentrale Muster:**\nDie in diesen Mustern enthaltenen Praktiken behandeln häufig anzutreffende und grund­ legende Probleme der Architekturarbeit. Die Praktiken sind direkt anwendbar und in vielen Kontexten wertvoll.\n• **Unterstützende Muster:**\nDiese Muster unterstützen einige zentrale Muster direkt oder vermitteln grundlegende Ideen, die Ihnen bei der erfolgreichen Anwendung von zentralen Mustern helfen.\n• **Weiterführende Muster:**\nDiese Muster beschreiben zusätzliche Praktiken, die je nach Umfeld spannend sein können. Die Muster sind nicht weniger wichtig als zentrale Muster, beeinflussen das grundsätzliche Architekturvorgehen aber weniger stark.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bild 2.5 zeigt die 30 Vorgehensmuster für Softwarearchitektur in drei Kategorien eingeteilt:\n\n• **Zentrale Muster:**\nDie in diesen Mustern enthaltenen Praktiken behandeln häufig anzutreffende und grund­ legende Probleme der Architekturarbeit. Die Praktiken sind direkt anwendbar und in vielen Kontexten wertvoll.\n• **Unterstützende Muster:**\nDiese Muster unterstützen einige zentrale Muster direkt oder vermitteln grundlegende Ideen, die Ihnen bei der erfolgreichen Anwendung von zentralen Mustern helfen.\n• **Weiterführende Muster:**\nDiese Muster beschreiben zusätzliche Praktiken, die je nach Umfeld spannend sein können. Die Muster sind nicht weniger wichtig als zentrale Muster, beeinflussen das grundsätzliche Architekturvorgehen aber weniger stark.",
      "id": [
        "139652"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139653]\nSollten Sie in Eile sein, können Sie mit zentralen Mustern aus Ihrem Interessensgebiet starten und vor der Anwendung die relevanten unterstützenden Muster nacharbeiten. Weiterführende Muster enthalten danach eventuell noch einige gute Ideen für das ein oder andere Problem. Die Reihenfolge, in der die Muster in den jeweiligen Kapiteln geordnet sind, ist trotzdem sinnvoll – ich möchte Ihnen nur nicht vorschreiben, immer das gesamte Kapitel durchzuarbeiten ...",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sollten Sie in Eile sein, können Sie mit zentralen Mustern aus Ihrem Interessensgebiet starten und vor der Anwendung die relevanten unterstützenden Muster nacharbeiten. Weiterführende Muster enthalten danach eventuell noch einige gute Ideen für das ein oder andere Problem. Die Reihenfolge, in der die Muster in den jeweiligen Kapiteln geordnet sind, ist trotzdem sinnvoll – ich möchte Ihnen nur nicht vorschreiben, immer das gesamte Kapitel durchzuarbeiten ...",
      "id": [
        "139653"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139654]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_11.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139654"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k2/axa_vorgehensmuster_software_architektur_k2_11.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:139655]\n[%2.3]\n[##Kurze Einführung ins Fallbeispiel]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "139655"
      ],
      "title": "Kurze Einführung ins Fallbeispiel"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139656]\nDurch die 30 Vorgehensmuster zieht sich ein Fallbeispiel. Jedes Muster wird durch ein Bruch­ stück dieses Fallbeispiels eingeleitet, in dem die Projektmitarbeiter das Muster entweder anwenden, es motivieren oder auf ein Problem stoßen, das mit dem Muster zu lösen wäre. Die Bruchstücke sind weitgehend unabhängig voneinander und sollten auch verständlich sein, wenn Sie nur ein einzelnes Muster betrachten. Trotzdem bauen einige Muster aufeinander auf oder ergänzen sich sehr gut. In diesen Fällen sind Verweise im Text zu finden. Ziel war, dass die einzelnen Bruchstücke in den Mustern selbsterklärend sind. Die Einführung hier ist möglichst knapp gehalten und soll einen leichten Einstieg ermöglichen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Durch die 30 Vorgehensmuster zieht sich ein Fallbeispiel. Jedes Muster wird durch ein Bruch­ stück dieses Fallbeispiels eingeleitet, in dem die Projektmitarbeiter das Muster entweder anwenden, es motivieren oder auf ein Problem stoßen, das mit dem Muster zu lösen wäre. Die Bruchstücke sind weitgehend unabhängig voneinander und sollten auch verständlich sein, wenn Sie nur ein einzelnes Muster betrachten. Trotzdem bauen einige Muster aufeinander auf oder ergänzen sich sehr gut. In diesen Fällen sind Verweise im Text zu finden. Ziel war, dass die einzelnen Bruchstücke in den Mustern selbsterklärend sind. Die Einführung hier ist möglichst knapp gehalten und soll einen leichten Einstieg ermöglichen.",
      "id": [
        "139656"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139657]\nDas Fallbeispiel ist größtenteils in Dialogform beschrieben. Entwickler, Projektleiter und Kunde tauschen sich über Softwarearchitektur und ihre Probleme in diesem Gebiet aus. Ich stelle hier nun kurz die Idee des Systems und die in den Projektbeispielen agierenden Mitarbeiter vor.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Das Fallbeispiel ist größtenteils in Dialogform beschrieben. Entwickler, Projektleiter und Kunde tauschen sich über Softwarearchitektur und ihre Probleme in diesem Gebiet aus. Ich stelle hier nun kurz die Idee des Systems und die in den Projektbeispielen agierenden Mitarbeiter vor.",
      "id": [
        "139657"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139658]\n\n**Das System – IT-Crunch**\n\nIT­Crunch ist ein Online­Magazin, in dem Redakteure und freie Autoren Artikel über wichtige Entwicklungen im IT­Sektor verfassen. Das Magazin soll als Plattform ausgebaut werden: Mitglieder können sich frei anmelden, in Foren diskutieren und eigene Artikel oder Videos einreichen. Redakteure prüfen diese Einreichungen, bevor sie im Community-­Bereich live gehen. Besucher können Artikel und Forenbeiträge lesen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Das System – IT-Crunch**\n\nIT­Crunch ist ein Online­Magazin, in dem Redakteure und freie Autoren Artikel über wichtige Entwicklungen im IT­Sektor verfassen. Das Magazin soll als Plattform ausgebaut werden: Mitglieder können sich frei anmelden, in Foren diskutieren und eigene Artikel oder Videos einreichen. Redakteure prüfen diese Einreichungen, bevor sie im Community-­Bereich live gehen. Besucher können Artikel und Forenbeiträge lesen.",
      "id": [
        "139658"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139659]\n\nDas Magazin existiert bereits online und hat eine große Leserschaft im deutschsprachigen Raum. Einige Inhalte sind kostenpflichtig (Premiuminhalte wie Gartner­-Studien oder IEEE­ Artikel) und können von Mitgliedern einzeln gekauft oder als Abonnement bezogen werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Das Magazin existiert bereits online und hat eine große Leserschaft im deutschsprachigen Raum. Einige Inhalte sind kostenpflichtig (Premiuminhalte wie Gartner­-Studien oder IEEE­ Artikel) und können von Mitgliedern einzeln gekauft oder als Abonnement bezogen werden.",
      "id": [
        "139659"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139660]\n\nDas System gliedert sich in mehrere Systemteile. Nicht alle werden von dem im Beispiel agierenden Team umgesetzt (wie etwa das Archivsystem, das alte Artikel verwaltet und zum Kauf anbietet). Einige Systemteile werden zugekauft (Mailserver, Buchhaltungssystem, Ad­Server etc.).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Das System gliedert sich in mehrere Systemteile. Nicht alle werden von dem im Beispiel agierenden Team umgesetzt (wie etwa das Archivsystem, das alte Artikel verwaltet und zum Kauf anbietet). Einige Systemteile werden zugekauft (Mailserver, Buchhaltungssystem, Ad­Server etc.).",
      "id": [
        "139660"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139661]\n**Die Akteure des Fallbeispiels**\n\n• **Thorsten (Kunde):** Thorsten ist Vertreter von IT­Crunch und arbeitet mit dem Projekt zu­sammen, um Anforderungen zu erheben und zu detaillieren bzw. um Fragen zu Prioritäten zu beantworten und fachliche Probleme zu beheben. In Scrum wäre er der Product Owner.\n• **Uwe (Projektleiter):** Uwe ist Projektleiter und greift nicht aktiv in die Architekturent­wicklung ein. Er will das Projekt insgesamt zum Erfolg führen und setzt deshalb immer wieder Impulse.\n• **Axel (Entwickler):** Axel ist ein erfahrener Entwickler und hat bereits mit Uwe zusammen Projekte realisiert. Er ist sehr gut mit vielen eingesetzten Technologien vertraut und hat in einigen agilen Projekten mitgewirkt.\n• **Ben, Tommy, Michael, Peter (alles Entwickler):** Die vier Entwickler haben unterschiedli­che Stärken und Schwächen und helfen bei bestimmten Themen mit (oder stellen Fragen). Ben ist der Erfahrenste unter ihnen, Peter hat eben erst sein Studium beendet.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Die Akteure des Fallbeispiels**\n\n• **Thorsten (Kunde):** Thorsten ist Vertreter von IT­Crunch und arbeitet mit dem Projekt zu­sammen, um Anforderungen zu erheben und zu detaillieren bzw. um Fragen zu Prioritäten zu beantworten und fachliche Probleme zu beheben. In Scrum wäre er der Product Owner.\n• **Uwe (Projektleiter):** Uwe ist Projektleiter und greift nicht aktiv in die Architekturent­wicklung ein. Er will das Projekt insgesamt zum Erfolg führen und setzt deshalb immer wieder Impulse.\n• **Axel (Entwickler):** Axel ist ein erfahrener Entwickler und hat bereits mit Uwe zusammen Projekte realisiert. Er ist sehr gut mit vielen eingesetzten Technologien vertraut und hat in einigen agilen Projekten mitgewirkt.\n• **Ben, Tommy, Michael, Peter (alles Entwickler):** Die vier Entwickler haben unterschiedli­che Stärken und Schwächen und helfen bei bestimmten Themen mit (oder stellen Fragen). Ben ist der Erfahrenste unter ihnen, Peter hat eben erst sein Studium beendet.",
      "id": [
        "139661"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:139662]\n[%3]\n[#Die Basis für Architekturarbeit]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 1,
      "progress": true,
      "toc": true,
      "id": [
        "139662"
      ],
      "title": "Die Basis für Architekturarbeit"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139663]\nAnforderungen bilden die Basis für pragmatische und iterative Arbeit an der Softwarearchitektur. Doch nicht alle Anforderungen sind gleich. Einige formen die Architektur und beeinflussen Architekturentscheidungen stärker als andere. Hätten Sie diese architektonisch signifikanten Anforderungen nicht oder wären sie anders ausgeprägt, würde Ihre Architektur anders aussehen. Vernachlässigen Sie deren Behandlung, entstehen technische Schulden auf Architekturniveau. In diesem Kapitel werden Muster besprochen, die Ihnen dabei helfen, die richtigen Anforderungen abzuholen, sie zu strukturieren, zu priorisieren und laufend zu verfeinern. Auch die iterative Abarbeitung von Architekturanforderungen in Backlogs oder die Verarbeitung mit Kanban sind Thema. Bild 3.1 zeigt die Muster des Kapitels im Überblick.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Anforderungen bilden die Basis für pragmatische und iterative Arbeit an der Softwarearchitektur. Doch nicht alle Anforderungen sind gleich. Einige formen die Architektur und beeinflussen Architekturentscheidungen stärker als andere. Hätten Sie diese architektonisch signifikanten Anforderungen nicht oder wären sie anders ausgeprägt, würde Ihre Architektur anders aussehen. Vernachlässigen Sie deren Behandlung, entstehen technische Schulden auf Architekturniveau. In diesem Kapitel werden Muster besprochen, die Ihnen dabei helfen, die richtigen Anforderungen abzuholen, sie zu strukturieren, zu priorisieren und laufend zu verfeinern. Auch die iterative Abarbeitung von Architekturanforderungen in Backlogs oder die Verarbeitung mit Kanban sind Thema. Bild 3.1 zeigt die Muster des Kapitels im Überblick.",
      "id": [
        "139663"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139664]\nWarum sollten Sie sich mit Architekturanforderungen auseinandersetzen? Nun, in Abschnitt 1.3 habe ich Architekturarbeit für sinnvoll erklärt, wo Entscheidungen risikoreich sind. Idealerweise erkennen Sie dieses Risiko, __bevor__ die Entscheidung getroffen und die Lösung dafür umgesetzt wurde – also auf Anforderungsebene. Welche Anforderungen sind architekturrelevant? Welche Anforderungen führen zu Entscheidungen, die Ihr Vorhaben gefährden, wenn sie falsch getroffen werden? Sie werden in diesem Kapitel eine detaillierte Antwort darauf bekommen, wie Sie diese kritischen Anforderungen in Ihrem Kontext finden und bearbeiten. Zunächst folgt aber ein kurzer Blick darauf, wieso sie qualitative Anforderungen in jedem Fall in Ihre Suche einschließen sollten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Warum sollten Sie sich mit Architekturanforderungen auseinandersetzen? Nun, in Abschnitt 1.3 habe ich Architekturarbeit für sinnvoll erklärt, wo Entscheidungen risikoreich sind. Idealerweise erkennen Sie dieses Risiko, __bevor__ die Entscheidung getroffen und die Lösung dafür umgesetzt wurde – also auf Anforderungsebene. Welche Anforderungen sind architekturrelevant? Welche Anforderungen führen zu Entscheidungen, die Ihr Vorhaben gefährden, wenn sie falsch getroffen werden? Sie werden in diesem Kapitel eine detaillierte Antwort darauf bekommen, wie Sie diese kritischen Anforderungen in Ihrem Kontext finden und bearbeiten. Zunächst folgt aber ein kurzer Blick darauf, wieso sie qualitative Anforderungen in jedem Fall in Ihre Suche einschließen sollten.",
      "id": [
        "139664"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139665]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_2.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139665"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_2.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139666]\nSoftwaresysteme werden funktional gegliedert. Die Struktur unserer Software orientiert sich an Domänenbegriffen, fasst ähnliche Funktionalität in Komponenten zusammen und isoliert fachlich unterschiedliche Konzepte voneinander. Die Prinzipien dafür sind teilweise mehr als vier Jahrzehnte alt und haben sich bewährt. Das System wird durch ihren Einsatz wartbarer, reagiert also gutmütiger auf funktionale Änderungen. Was ist aber mit Änderungen an nichtfunktionalen Anforderungen, an der Qualität des Systems? Diese Aspekte betreffen viele oder alle Funktionalitäten des Systems. Verfügbarkeit bezieht sich meist auf das gesamte System oder weite Systemteile, Sicherheit ebenfalls. Anforderungen aus den Bereichen Effizienz und Wartbarkeit mögen etwas besser lokalisierbar sein, sind aber auch schwer isoliert in einer Komponente zu erreichen. Sie können diese Ziele folglich nur erreichen, wenn Sie in vielen bis allen Teilen des Systems darauf Rücksicht nehmen. Das erfordert die gemeinsame Arbeit vieler Entwickler und in manchen Fällen (etwa bei Zuverlässigkeit) sind auch die Kosten relevant genug, um die Entscheidung risikoreich zu machen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Softwaresysteme werden funktional gegliedert. Die Struktur unserer Software orientiert sich an Domänenbegriffen, fasst ähnliche Funktionalität in Komponenten zusammen und isoliert fachlich unterschiedliche Konzepte voneinander. Die Prinzipien dafür sind teilweise mehr als vier Jahrzehnte alt und haben sich bewährt. Das System wird durch ihren Einsatz wartbarer, reagiert also gutmütiger auf funktionale Änderungen. Was ist aber mit Änderungen an nichtfunktionalen Anforderungen, an der Qualität des Systems? Diese Aspekte betreffen viele oder alle Funktionalitäten des Systems. Verfügbarkeit bezieht sich meist auf das gesamte System oder weite Systemteile, Sicherheit ebenfalls. Anforderungen aus den Bereichen Effizienz und Wartbarkeit mögen etwas besser lokalisierbar sein, sind aber auch schwer isoliert in einer Komponente zu erreichen. Sie können diese Ziele folglich nur erreichen, wenn Sie in vielen bis allen Teilen des Systems darauf Rücksicht nehmen. Das erfordert die gemeinsame Arbeit vieler Entwickler und in manchen Fällen (etwa bei Zuverlässigkeit) sind auch die Kosten relevant genug, um die Entscheidung risikoreich zu machen.",
      "id": [
        "139666"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139667]\n::info::\nQualitätsanforderungen sind oft risikoreich. Es ist aufwendig oder teuer, entsprechende Entscheidungen zurückzunehmen, sie sind öfter architekturrelevant.\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\nQualitätsanforderungen sind oft risikoreich. Es ist aufwendig oder teuer, entsprechende Entscheidungen zurückzunehmen, sie sind öfter architekturrelevant.\n::",
      "id": [
        "139667"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139668]\nJedes Softwaresystem hat qualitative Anforderungen. Sicherheit oder Zeitverhalten sind fast omnipräsent, Servicelevel Agreements bilden nicht gerade eine Seltenheit. Bild 3.2 zeigt ein Qualitätsmodell, das diese Anforderungen kategorisiert.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Jedes Softwaresystem hat qualitative Anforderungen. Sicherheit oder Zeitverhalten sind fast omnipräsent, Servicelevel Agreements bilden nicht gerade eine Seltenheit. Bild 3.2 zeigt ein Qualitätsmodell, das diese Anforderungen kategorisiert.",
      "id": [
        "139668"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139669]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_3.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139669"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_3.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139670]\nWenn Qualitätsanforderungen nun meist vorhanden sind und oft Architekturarbeit nach sich ziehen, ist es wichtig aktiv mit ihnen zu arbeiten. Sie müssen die geforderten Qualitätseigenschaften ihres Systems kennen und Sie sollten ihnen keinesfalls weniger Sorgfalt entgegenbringen, als den funktionalen Anforderungen an Ihr System. Definieren Sie Erwartungen an, oder Erkenntnisse zu Qualitätseigenschaften, priorisieren Sie sie nach Geschäftswert und überprüfen (testen) Sie ihre Erreichung. Arbeiten Sie auch Qualitätsanforderungen iterativ ab und verhindern Sie deren Übererfüllung auf Kosten anderer Anforderungen. Das gelingt am besten, indem Sie qualitative Anforderungen ähnlich spezifizieren, priorisieren und bearbeiten wie funktionale Anforderungen und aktiv nach Versäumnissen auf Architekturebene suchen. Die Muster dieses Kapitels legen den Grundstein dafür.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wenn Qualitätsanforderungen nun meist vorhanden sind und oft Architekturarbeit nach sich ziehen, ist es wichtig aktiv mit ihnen zu arbeiten. Sie müssen die geforderten Qualitätseigenschaften ihres Systems kennen und Sie sollten ihnen keinesfalls weniger Sorgfalt entgegenbringen, als den funktionalen Anforderungen an Ihr System. Definieren Sie Erwartungen an, oder Erkenntnisse zu Qualitätseigenschaften, priorisieren Sie sie nach Geschäftswert und überprüfen (testen) Sie ihre Erreichung. Arbeiten Sie auch Qualitätsanforderungen iterativ ab und verhindern Sie deren Übererfüllung auf Kosten anderer Anforderungen. Das gelingt am besten, indem Sie qualitative Anforderungen ähnlich spezifizieren, priorisieren und bearbeiten wie funktionale Anforderungen und aktiv nach Versäumnissen auf Architekturebene suchen. Die Muster dieses Kapitels legen den Grundstein dafür.",
      "id": [
        "139670"
      ]
    }
  },
  {
    "bitmark": "[.chapter:bitmark--]\n[@id:139671]\n[%3.1]\n[##Initialer Anforderungs-Workshop]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "139671"
      ],
      "title": "Initialer Anforderungs-Workshop"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139672]\n__„Die effizienteste und effektivste Methode, um Informationen zu und innerhalb eines Entwicklungsteams zu transportieren, ist direkte Kommunikation.“__\n– Melnik und Martin",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__„Die effizienteste und effektivste Methode, um Informationen zu und innerhalb eines Entwicklungsteams zu transportieren, ist direkte Kommunikation.“__\n– Melnik und Martin",
      "id": [
        "139672"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139673]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_4.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139673"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_4.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139674]\n__In einem Kick-off sitzen Uwe (Projektleiter), Thorsten (Kunde), Axel, Ben, Michael und einige andere Entwickler im großen Besprechungsraum.__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__In einem Kick-off sitzen Uwe (Projektleiter), Thorsten (Kunde), Axel, Ben, Michael und einige andere Entwickler im großen Besprechungsraum.__",
      "id": [
        "139674"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139675]\n**Uwe**: „Wir sind heute hier, weil ich in meinen letzten Projekten gelernt habe, nicht mehr auf Anforderungsspezifikationen zu vertrauen. Es ist immer das Gleiche: Die Anforderungen kommen per Spezifikation an und sollen von den Entwicklungsteams verarbeitet werden. Ziemlich schnell tauchen Fragen auf, die nicht gleich geklärt werden können. Manche Fragen laufen zurück zum Schreiber des Dokuments – der rät aber auch zur Hälfte. Letztendlich machen sich Entwickler und Anforderer ihren eigenen Reim auf die Dinge und das Dokument wird Stück für Stück umgesetzt. Bei der ersten Auslieferung kommt dann der laute Aufschrei und es beginnen die Verhandlungen, was spezifiziert war.“",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Uwe**: „Wir sind heute hier, weil ich in meinen letzten Projekten gelernt habe, nicht mehr auf Anforderungsspezifikationen zu vertrauen. Es ist immer das Gleiche: Die Anforderungen kommen per Spezifikation an und sollen von den Entwicklungsteams verarbeitet werden. Ziemlich schnell tauchen Fragen auf, die nicht gleich geklärt werden können. Manche Fragen laufen zurück zum Schreiber des Dokuments – der rät aber auch zur Hälfte. Letztendlich machen sich Entwickler und Anforderer ihren eigenen Reim auf die Dinge und das Dokument wird Stück für Stück umgesetzt. Bei der ersten Auslieferung kommt dann der laute Aufschrei und es beginnen die Verhandlungen, was spezifiziert war.“",
      "id": [
        "139675"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139676]\n**Axel**: „Beim letzten Projekt war es neben einfachen Missverständnissen auch so, dass Architekturaspekte sehr gut in den Anforderungen versteckt waren. Wir haben sie am Anfang nicht explizit abgeholt und auch bei der Umsetzung von Funktionalität nicht genauer betrachtet. Als wir dann Übertragbarkeitsanforderungen und Sicherheitsaspekte umzusetzen hatten, war es reichlich spät.“",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Axel**: „Beim letzten Projekt war es neben einfachen Missverständnissen auch so, dass Architekturaspekte sehr gut in den Anforderungen versteckt waren. Wir haben sie am Anfang nicht explizit abgeholt und auch bei der Umsetzung von Funktionalität nicht genauer betrachtet. Als wir dann Übertragbarkeitsanforderungen und Sicherheitsaspekte umzusetzen hatten, war es reichlich spät.“",
      "id": [
        "139676"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139677]\n**Uwe**: „Mit teuren Folgen.“",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Uwe**: „Mit teuren Folgen.“",
      "id": [
        "139677"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139678]\n__Uwe ist verantwortlich für das neue Projekt: das Online-Magazin IT-Crunch. Er möchte in diesem Projekt vor allem auf Zusammenarbeit setzen. Erster Schritt ist für ihn eine gemeinsame Vision und ein gemeinsames Vokabular. Statt detaillierter Dokumente möchte er zum Start des Projekts auf eine mehr oder weniger grobe Liste setzen:__ „Es ändert sich sowieso noch viel und wenn der Kunde lernt, was er will, ist es besser, noch nicht alles analysiert zu haben.“",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Uwe ist verantwortlich für das neue Projekt: das Online-Magazin IT-Crunch. Er möchte in diesem Projekt vor allem auf Zusammenarbeit setzen. Erster Schritt ist für ihn eine gemeinsame Vision und ein gemeinsames Vokabular. Statt detaillierter Dokumente möchte er zum Start des Projekts auf eine mehr oder weniger grobe Liste setzen:__ „Es ändert sich sowieso noch viel und wenn der Kunde lernt, was er will, ist es besser, noch nicht alles analysiert zu haben.“",
      "id": [
        "139678"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139679]\n**Uwe**: „Die wichtigen Dinge für den Start sind eine klare Produktvision, die zentralen Qualitätsmerkmale und die grob umrissene Funktionalität des Systems. Das reicht für grobe Architekturplanung und einen Start.“",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Uwe**: „Die wichtigen Dinge für den Start sind eine klare Produktvision, die zentralen Qualitätsmerkmale und die grob umrissene Funktionalität des Systems. Das reicht für grobe Architekturplanung und einen Start.“",
      "id": [
        "139679"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139680]\n__Der Kunde (Thorsten) ist zu Beginn des Meetings etwas skeptisch, mag aber die Idee des Produktkartons, der die Vision des Produkts gut veranschaulicht. Das Versprechen auf frühe und häufige Rückmeldung und die iterative, genauere Spezifikation am konkreten Beispiel klingen auch besser, als er es gewohnt ist.__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Der Kunde (Thorsten) ist zu Beginn des Meetings etwas skeptisch, mag aber die Idee des Produktkartons, der die Vision des Produkts gut veranschaulicht. Das Versprechen auf frühe und häufige Rückmeldung und die iterative, genauere Spezifikation am konkreten Beispiel klingen auch besser, als er es gewohnt ist.__",
      "id": [
        "139680"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139681]\n**Thorsten**: „Ich lasse mich auf das hier ein, vor allem weil ich diese Dokumentschreiberei nicht mag. Aber wenn das schief geht, brauche ich irgendwen, den ich an die Wand nageln kann.“",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Thorsten**: „Ich lasse mich auf das hier ein, vor allem weil ich diese Dokumentschreiberei nicht mag. Aber wenn das schief geht, brauche ich irgendwen, den ich an die Wand nageln kann.“",
      "id": [
        "139681"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139682]\n**Uwe**: „Die Vision wird stabil bleiben, wichtige Anforderungen wollen wir mit dem Vorgehen sogar früher abholen, als das bisher der Fall war.“",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Uwe**: „Die Vision wird stabil bleiben, wichtige Anforderungen wollen wir mit dem Vorgehen sogar früher abholen, als das bisher der Fall war.“",
      "id": [
        "139682"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139683]\n**Axel**: „Der Produktkarton ist das beste Beispiel – da ist von einem modernen Erscheinungsbild die Rede, von einer sehr flüssigen Bedienung und von ‚der größten Community für IT-Wissen im deutschsprachigen Raum‘. Das gibt uns bereits wichtige Ideen für Architektureigenschaften.“",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Axel**: „Der Produktkarton ist das beste Beispiel – da ist von einem modernen Erscheinungsbild die Rede, von einer sehr flüssigen Bedienung und von ‚der größten Community für IT-Wissen im deutschsprachigen Raum‘. Das gibt uns bereits wichtige Ideen für Architektureigenschaften.“",
      "id": [
        "139683"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139684]\n**Uwe**: „Es geht um Fokussierung und direkteren Austausch. Ich habe da Vertrauen und lasse mich zur Not auch an die Wand nageln.“",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Uwe**: „Es geht um Fokussierung und direkteren Austausch. Ich habe da Vertrauen und lasse mich zur Not auch an die Wand nageln.“",
      "id": [
        "139684"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139685]\n__Wie sich später herausstellen wird, fühlen sich alle Beteiligten sicherer und bei Releases gibt es weniger Überraschungen. Große Umbauarbeiten in späten Projektphasen bleiben aus.__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Wie sich später herausstellen wird, fühlen sich alle Beteiligten sicherer und bei Releases gibt es weniger Überraschungen. Große Umbauarbeiten in späten Projektphasen bleiben aus.__",
      "id": [
        "139685"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139686]\nSie wollen in die iterative Erarbeitung Ihres Systems starten. Anforderer und/oder Kunden sind greifbar und haben eine grobe Vision von dem zu entwickelnden System. In einer eventuell schon vorhandenen Anforderungsliste sind wenige bis keine Qualitätsanforderungen zu finden. Die Kommunikation in die Umsetzungsteams steht noch aus oder muss unterstützt werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie wollen in die iterative Erarbeitung Ihres Systems starten. Anforderer und/oder Kunden sind greifbar und haben eine grobe Vision von dem zu entwickelnden System. In einer eventuell schon vorhandenen Anforderungsliste sind wenige bis keine Qualitätsanforderungen zu finden. Die Kommunikation in die Umsetzungsteams steht noch aus oder muss unterstützt werden.",
      "id": [
        "139686"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139687]\n::note::\n**Problemstellung:**\n\nWie können Architekturanforderungen effektiv erhoben und kommuniziert werden?\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::note::\n**Problemstellung:**\n\nWie können Architekturanforderungen effektiv erhoben und kommuniziert werden?\n::",
      "id": [
        "139687"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139688]\nAnforderungen für die Architekturarbeit müssen zu Beginn des Vorhabens grob bekannt sein, um das zu entwickelnde System vom Aufwand her schätzbar zu machen. In dieser frühen Phase sind auch die dringendsten Architekturaufgaben zu identifizieren und für die Umsetzer transparent zu machen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Anforderungen für die Architekturarbeit müssen zu Beginn des Vorhabens grob bekannt sein, um das zu entwickelnde System vom Aufwand her schätzbar zu machen. In dieser frühen Phase sind auch die dringendsten Architekturaufgaben zu identifizieren und für die Umsetzer transparent zu machen.",
      "id": [
        "139688"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139689]\nDer initiale Anforderungsworkshop hat zum Ziel, eine ausreichend befüllte Anforderungsliste zu erzeugen, um mit der Entwicklung starten zu können [Lar10]. Diese Liste ist danach nicht fertig, sondern stellt lediglich die zu dem Zeitpunkt bekannten und am besten verstandenen Anforderungen dar. Aus Architektursicht ist es wichtig, hier auch qualitative Aspekte des Systems zu betrachten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Der initiale Anforderungsworkshop hat zum Ziel, eine ausreichend befüllte Anforderungsliste zu erzeugen, um mit der Entwicklung starten zu können [Lar10]. Diese Liste ist danach nicht fertig, sondern stellt lediglich die zu dem Zeitpunkt bekannten und am besten verstandenen Anforderungen dar. Aus Architektursicht ist es wichtig, hier auch qualitative Aspekte des Systems zu betrachten.",
      "id": [
        "139689"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139690]\nQualitative Aspekte sind, je nach Domäne und Aufgabe, unterschiedlich wichtig. Ein System zur Erkennung von Rissen in Flugzeugtragflächen wird zumindest prominente Zuverlässigkeits- und Sicherheitsanforderungen beinhalten. Bei einem einfachen System, in dem Professoren ihre Vortragsunterlagen organisieren und ablegen können, stehen Qualitätsaspekte etwas weiter im Hintergrund. Trotzdem gibt es sie. Im initialen Anforderungs-Workshop sollten Sie sicherstellen, zentrale Qualitäten in die Anforderungsliste zu übernehmen. Dafürgibt es einige Techniken:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Qualitative Aspekte sind, je nach Domäne und Aufgabe, unterschiedlich wichtig. Ein System zur Erkennung von Rissen in Flugzeugtragflächen wird zumindest prominente Zuverlässigkeits- und Sicherheitsanforderungen beinhalten. Bei einem einfachen System, in dem Professoren ihre Vortragsunterlagen organisieren und ablegen können, stehen Qualitätsaspekte etwas weiter im Hintergrund. Trotzdem gibt es sie. Im initialen Anforderungs-Workshop sollten Sie sicherstellen, zentrale Qualitäten in die Anforderungsliste zu übernehmen. Dafürgibt es einige Techniken:",
      "id": [
        "139690"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139691]\n**• Produktkarton**:\nDer Produktkarton erlaubt einen Blick auf das Gesamtprodukt, aus der Sicht eines potenziellen „Käufers“. Was wären zentrale Funktionalitäten, die Sie bewerben würden? Welche zentralen Merkmale hätte das Produkt? Schon auf dieser hohen Ebene werden Qualitätsziele sichtbar. Auf Produktkartons ist oft von „besonders leicht bedienbar“, „mit System XY integrierbar“, „zukunftssicher“, „schnellste Verarbeitung“ oder „kein Datenverlust selbst bei XY“ die Rede. Diese Anforderungen scheinen zentral zu sein und werden in der Anforderungsliste festgehalten3. Für weitere Informationen zum Produktkarton siehe [Hoh06], [Zör15] und __https://innovationgames.com/product-box/.__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**• Produktkarton**:\nDer Produktkarton erlaubt einen Blick auf das Gesamtprodukt, aus der Sicht eines potenziellen „Käufers“. Was wären zentrale Funktionalitäten, die Sie bewerben würden? Welche zentralen Merkmale hätte das Produkt? Schon auf dieser hohen Ebene werden Qualitätsziele sichtbar. Auf Produktkartons ist oft von „besonders leicht bedienbar“, „mit System XY integrierbar“, „zukunftssicher“, „schnellste Verarbeitung“ oder „kein Datenverlust selbst bei XY“ die Rede. Diese Anforderungen scheinen zentral zu sein und werden in der Anforderungsliste festgehalten3. Für weitere Informationen zum Produktkarton siehe [Hoh06], [Zör15] und __https://innovationgames.com/product-box/.__",
      "id": [
        "139691"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139692]\n**• Launch-Announcement** (Pressemitteilung):\nÄhnlich wie der Produktkarton ist auch das Launch-Announcement eine Möglichkeit, sich vorab die wichtigsten Ziele zu einem System zu erarbeiten. Selbst wenn Ihr Projekt kein Produkt im eigentlichen Sinne erstellt oder nie eine öffentliche Markteinführung geplant ist, hilft dieses Instrument. Nehmen Sie zumindest die folgenden Informationen auf: (1) einen Titel inklusive einem Produkt- oder Projektnamen, (2) die Zielgruppe und eine Erklärung, wie deren Probleme gelöst werden, (3) Beispielfeatures und Vorteile der Lösung, (4) ein Zitat, das Alleinstellungsmerkmale Ihrer Lösung hervorhebt, und (5) eine Begründung, warum die eigene Firma das Produkt entwickelt (verknüpfte Geschäftsziele und Kompetenzbeweis).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**• Launch-Announcement** (Pressemitteilung):\nÄhnlich wie der Produktkarton ist auch das Launch-Announcement eine Möglichkeit, sich vorab die wichtigsten Ziele zu einem System zu erarbeiten. Selbst wenn Ihr Projekt kein Produkt im eigentlichen Sinne erstellt oder nie eine öffentliche Markteinführung geplant ist, hilft dieses Instrument. Nehmen Sie zumindest die folgenden Informationen auf: (1) einen Titel inklusive einem Produkt- oder Projektnamen, (2) die Zielgruppe und eine Erklärung, wie deren Probleme gelöst werden, (3) Beispielfeatures und Vorteile der Lösung, (4) ein Zitat, das Alleinstellungsmerkmale Ihrer Lösung hervorhebt, und (5) eine Begründung, warum die eigene Firma das Produkt entwickelt (verknüpfte Geschäftsziele und Kompetenzbeweis).",
      "id": [
        "139692"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139693]\n**• Produkt-Canvas:**\nVon Roman Pichler als Alternative zum traditionellen Product Backlog in Scrum-Projekten erarbeitet, stellt der Produkt-Canvas die Zielgruppe und einen groben Überblick des Gesamtprodukts dar. Daneben haben auch Rahmenbedingungen, Skizzen und einige detaillierte Anforderungen Platz. Der Produkt-Canvas unterstützt die Beleuchtung von unterschiedlichen Projektaspekten in Anforderungs-Workshops und hilft beim Festhalten. Mehr Informationen dazu finden Sie hier: __https://www.romanpichler.com/blog/agile-productinnovation/the-product-canvas/.__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**• Produkt-Canvas:**\nVon Roman Pichler als Alternative zum traditionellen Product Backlog in Scrum-Projekten erarbeitet, stellt der Produkt-Canvas die Zielgruppe und einen groben Überblick des Gesamtprodukts dar. Daneben haben auch Rahmenbedingungen, Skizzen und einige detaillierte Anforderungen Platz. Der Produkt-Canvas unterstützt die Beleuchtung von unterschiedlichen Projektaspekten in Anforderungs-Workshops und hilft beim Festhalten. Mehr Informationen dazu finden Sie hier: __https://www.romanpichler.com/blog/agile-productinnovation/the-product-canvas/.__",
      "id": [
        "139693"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139694]\n**• Brainwriting:**\nDie Workshop-Teilnehmer finden sich in kleinen Gruppen zusammen und sammeln mögliche Anforderungen und Rahmenbedingungen für das Entwicklungsvorhaben. Brainwriting-Ergebnisse werden anschließend in der Großgruppe konsolidiert und gruppiert. Für die weitere Architekturarbeit sind besonders Ideen zu qualitativen Aspekten des Systems spannend – starten Sie also Brainwritings, um Szenarien zu finden (siehe Abschnitt 3.3). Basis sind allgemeine Qualitätsmerkmale oder die Fragen zu Szenarioarten aus Tabelle 3.1.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**• Brainwriting:**\nDie Workshop-Teilnehmer finden sich in kleinen Gruppen zusammen und sammeln mögliche Anforderungen und Rahmenbedingungen für das Entwicklungsvorhaben. Brainwriting-Ergebnisse werden anschließend in der Großgruppe konsolidiert und gruppiert. Für die weitere Architekturarbeit sind besonders Ideen zu qualitativen Aspekten des Systems spannend – starten Sie also Brainwritings, um Szenarien zu finden (siehe Abschnitt 3.3). Basis sind allgemeine Qualitätsmerkmale oder die Fragen zu Szenarioarten aus Tabelle 3.1.",
      "id": [
        "139694"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139695]\nWeitere Tätigkeiten in einem initialen Anforderungs-Workshop wären die Suche nach funktionalen Anforderungen, die ähnlich wie jene nach Szenarien funktioniert, und die Anfertigung von Domänenmodellentwürfen, um ein gemeinsames Vokabular zu entwickeln. Auch Story-Maps [Pat08] oder Beispieltests [Adz09] für Anforderungen können helfen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Weitere Tätigkeiten in einem initialen Anforderungs-Workshop wären die Suche nach funktionalen Anforderungen, die ähnlich wie jene nach Szenarien funktioniert, und die Anfertigung von Domänenmodellentwürfen, um ein gemeinsames Vokabular zu entwickeln. Auch Story-Maps [Pat08] oder Beispieltests [Adz09] für Anforderungen können helfen.",
      "id": [
        "139695"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139696]\nNach dem Anforderungs-Workshop sollten die wichtigsten architektonischen Fragestellungen bekannt und in der Anforderungsliste zu finden sein. Sie können diese reine Anforderungssicht später für Architekturarbeit aufbereiten, indem Sie eine Architekturvision entwickeln (siehe GERADE GENUG ARCHITEKTUR VORWEG vorweg → Abschnitt 4.3).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nach dem Anforderungs-Workshop sollten die wichtigsten architektonischen Fragestellungen bekannt und in der Anforderungsliste zu finden sein. Sie können diese reine Anforderungssicht später für Architekturarbeit aufbereiten, indem Sie eine Architekturvision entwickeln (siehe GERADE GENUG ARCHITEKTUR VORWEG vorweg → Abschnitt 4.3).",
      "id": [
        "139696"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139697]\n**Workshops statt Dokumente**\n\nDurch die Zusammenarbeit in Workshops entstehen gemeinsames Wissen und Transparenz für Architekturfragen. Missverständnisse können schnell, effektiv und früh beseitigt werden. Anders als bei Dokumenten und asynchroner Arbeitsweise, halten sich Reibungsverluste in Grenzen. Nutzt man Anforderungs-Workshops auch um Akzeptanzkriterien, Szenarien (→ Abschnitt 3.3) und Testfälle (→ Abschnitt 6.3) zu identifizieren, wird die Überprüfung der gebauten Software realistischer. Man testet schließlich mit Beispielen des Kunden und hält nicht die Interpretation eines Entwicklers gegen die Interpretation eines Testers. Bild 3.3 illustriert den dokumentenzentrierten und den workshop-basierten Umgang mit Anforderungen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Workshops statt Dokumente**\n\nDurch die Zusammenarbeit in Workshops entstehen gemeinsames Wissen und Transparenz für Architekturfragen. Missverständnisse können schnell, effektiv und früh beseitigt werden. Anders als bei Dokumenten und asynchroner Arbeitsweise, halten sich Reibungsverluste in Grenzen. Nutzt man Anforderungs-Workshops auch um Akzeptanzkriterien, Szenarien (→ Abschnitt 3.3) und Testfälle (→ Abschnitt 6.3) zu identifizieren, wird die Überprüfung der gebauten Software realistischer. Man testet schließlich mit Beispielen des Kunden und hält nicht die Interpretation eines Entwicklers gegen die Interpretation eines Testers. Bild 3.3 illustriert den dokumentenzentrierten und den workshop-basierten Umgang mit Anforderungen.",
      "id": [
        "139697"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139698]\nNicht nur bei der initialen Findung von Anforderungen sind Workshops das Mittel der Wahl. Auch die iterative Verfeinerung der jeweils wichtigsten Anforderungen (siehe Anforderungspflege-Workshop → Abschnitt 3.2) oder die Kommunikation von Architekturentscheidungen (siehe Wiederkehrende Reflexion → Abschnitt 5.5) haben sich im Workshop-Format bewährt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nicht nur bei der initialen Findung von Anforderungen sind Workshops das Mittel der Wahl. Auch die iterative Verfeinerung der jeweils wichtigsten Anforderungen (siehe Anforderungspflege-Workshop → Abschnitt 3.2) oder die Kommunikation von Architekturentscheidungen (siehe Wiederkehrende Reflexion → Abschnitt 5.5) haben sich im Workshop-Format bewährt.",
      "id": [
        "139698"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139699]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_5.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139699"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_5.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139700]\n::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Versuchen Sie, im initialen Anforderungs-Workshop ein detailliertes Bild möglichst aller Anforderungen zu erarbeiten. So können Sie gleich mehrere Iterationen mit Anforderungen speisen – im Idealfall alle.\n•  Versuchen Sie nicht, Ihren Kunden oder Anforderer zu überreden, an dem Workshop teilzunehmen, wenn Sie bereits eine Anforderungsspezifikation haben. Lesen Sie die Spezifikation stattdessen vor und arbeiten Sie Feedback als Kommentare im Dokument ein.\n• Laden Sie nicht alle Umsetzer (Entwickler, Tester etc.) zu dem Workshop ein.\nNur jene, die keine wichtigen anderen Aufgaben erledigen, haben den Kopf für so etwas. \n• Vertrauen Sie in Workshops hauptsächlich auf PowerPoint-Präsentationen und Bildschirmarbeit. Als Entwickler können Sie so passiv bleiben und die Anforderungen den echten Experten überlassen.\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Versuchen Sie, im initialen Anforderungs-Workshop ein detailliertes Bild möglichst aller Anforderungen zu erarbeiten. So können Sie gleich mehrere Iterationen mit Anforderungen speisen – im Idealfall alle.\n•  Versuchen Sie nicht, Ihren Kunden oder Anforderer zu überreden, an dem Workshop teilzunehmen, wenn Sie bereits eine Anforderungsspezifikation haben. Lesen Sie die Spezifikation stattdessen vor und arbeiten Sie Feedback als Kommentare im Dokument ein.\n• Laden Sie nicht alle Umsetzer (Entwickler, Tester etc.) zu dem Workshop ein.\nNur jene, die keine wichtigen anderen Aufgaben erledigen, haben den Kopf für so etwas. \n• Vertrauen Sie in Workshops hauptsächlich auf PowerPoint-Präsentationen und Bildschirmarbeit. Als Entwickler können Sie so passiv bleiben und die Anforderungen den echten Experten überlassen.\n::",
      "id": [
        "139700"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139701]\nDie Anforderungs-Workshops, wie sie hier beschrieben sind, unterstützen das Finden von SZENARIEN ALS ARCHITEKTURANFORDERUNG (→ Abschnitt 3.3). In späteren AFORDERUNGSPFLEGE-WORKSHOPS (→ Abschnitt 3.2) erfolgt die schrittweise Detaillierung der erarbeiteten Ideen. ARCHITEKTURARBEIT IM BACKLOG (→ Abschnitt 3.6) und ARCHITEKTUR AUF KANBAN (→ Abschnitt 3.7) erhalten im initialen Anforderungs-Workshop ihre Grundbefüllung.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Anforderungs-Workshops, wie sie hier beschrieben sind, unterstützen das Finden von SZENARIEN ALS ARCHITEKTURANFORDERUNG (→ Abschnitt 3.3). In späteren AFORDERUNGSPFLEGE-WORKSHOPS (→ Abschnitt 3.2) erfolgt die schrittweise Detaillierung der erarbeiteten Ideen. ARCHITEKTURARBEIT IM BACKLOG (→ Abschnitt 3.6) und ARCHITEKTUR AUF KANBAN (→ Abschnitt 3.7) erhalten im initialen Anforderungs-Workshop ihre Grundbefüllung.",
      "id": [
        "139701"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139702]\nNeben diesen direkten Verbindungen zu anderen Mustern aus dem Anforderungsbereich, machen es Anforderungsworkshops einfacher STAKEHOLDER ZU INVOLVIEREN (→ Abschnitt 5.4) und GEMEINSAM ZU ENTSCHEIDEN (→ Abschnitt 5.2). Die gefundenen Architekturziele können an der Architekturwand eines INFORMATIVEN ARBEITSPLATZES (→ Abschnitt 5.1) ausgestellt werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Neben diesen direkten Verbindungen zu anderen Mustern aus dem Anforderungsbereich, machen es Anforderungsworkshops einfacher STAKEHOLDER ZU INVOLVIEREN (→ Abschnitt 5.4) und GEMEINSAM ZU ENTSCHEIDEN (→ Abschnitt 5.2). Die gefundenen Architekturziele können an der Architekturwand eines INFORMATIVEN ARBEITSPLATZES (→ Abschnitt 5.1) ausgestellt werden.",
      "id": [
        "139702"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:139703]\n[%3.2]\n[##Anforderungspflege-Workshops]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "139703"
      ],
      "title": "Anforderungspflege-Workshops"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139704]\n__„Die Politik zieht hauptsächlich Männer an, weil sie dort nicht putzen müssen.“__\n– Pavel Kosorin",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__„Die Politik zieht hauptsächlich Männer an, weil sie dort nicht putzen müssen.“__\n– Pavel Kosorin",
      "id": [
        "139704"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139705]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_6.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139705"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_6.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139706]\n__In einer Retrospektive ...__\n\n**Ben:** Wir arbeiten nun ja mit dieser priorisierten Anforderungsliste, von der wir jede Iteration etwas verfeinern und abarbeiten. Leider ist die Granularität der Einträge sehr unterschiedlich und, nichts gegen Thorsten, aber Architektur­aspekte werden von Fachseite ständig unterschätzt und zu niedrig priorisiert. Architekturell wertvolle Szenarien laufen so zu spät in Iterationen – da haben wir oft schon einiges am Programmcode anzupassen.\n**Axel:** Ich weiß, was du meinst ...\n**Ben:** Ja, letztens zum Beispiel. Eine hochpriore Anforderung kommt zu mir: „Fehler im Produktivbetrieb sollen schnell gefunden werden“... Was ist schnell? Welche Fehler kann es geben? Ist das ein reines Infrastrukturthema oder ist hier auch auf Strukturebene unserer Software etwas zu tun? Wir sollten uns Zeit neh­men, über solche Dinge zu sprechen, bevor wir schätzen und loslegen.\n**Michael:** Können wir nicht bei der Iterationsplanung4 darauf eingehen?\nDie Granularität wird dort durch Schätzungen offensichtlich und dort können wir Thorsten auch ein wenig Kontext geben, was die Wichtigkeit von architektoni­schen Fragestellungen angeht.\n**Axel:** Prinzipiell würde das gehen. Allerdings weiß ich aus anderen Projekten, dass diese Iterationsplanungstreffen __sehr__ lang werden, wenn alle diese Fragen geklärt werden. Vom Planungstreffen bis zur folgenden Iteration ist auch nicht wirklich viel Zeit, um Probleme auszuräumen.\n**Ben:** Könnten wir uns nicht schon früher zusammensetzen und hochpriore Ein­träge der Anforderungsliste schätzen, sie eventuell auftrennen, architekturelle Fragestellungen ein wenig analysieren und Abhängigkeiten auflösen? Das würde doch die Iterationsplanungstreffen viel effektiver machen.\n**Axel:** So etwas gibt es als Idee schon. Nennt sich im Scrum­Umfeld __Backlog-Grooming__, glaube ich. Dieses Grooming findet auf halbem Weg durch die Itera­tion statt und soll das Stocken des Entwicklungsprozesses verhindern. Da wäre auch Zeit, um nach versteckten Architekturaspekten zu suchen ...",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__In einer Retrospektive ...__\n\n**Ben:** Wir arbeiten nun ja mit dieser priorisierten Anforderungsliste, von der wir jede Iteration etwas verfeinern und abarbeiten. Leider ist die Granularität der Einträge sehr unterschiedlich und, nichts gegen Thorsten, aber Architektur­aspekte werden von Fachseite ständig unterschätzt und zu niedrig priorisiert. Architekturell wertvolle Szenarien laufen so zu spät in Iterationen – da haben wir oft schon einiges am Programmcode anzupassen.\n**Axel:** Ich weiß, was du meinst ...\n**Ben:** Ja, letztens zum Beispiel. Eine hochpriore Anforderung kommt zu mir: „Fehler im Produktivbetrieb sollen schnell gefunden werden“... Was ist schnell? Welche Fehler kann es geben? Ist das ein reines Infrastrukturthema oder ist hier auch auf Strukturebene unserer Software etwas zu tun? Wir sollten uns Zeit neh­men, über solche Dinge zu sprechen, bevor wir schätzen und loslegen.\n**Michael:** Können wir nicht bei der Iterationsplanung4 darauf eingehen?\nDie Granularität wird dort durch Schätzungen offensichtlich und dort können wir Thorsten auch ein wenig Kontext geben, was die Wichtigkeit von architektoni­schen Fragestellungen angeht.\n**Axel:** Prinzipiell würde das gehen. Allerdings weiß ich aus anderen Projekten, dass diese Iterationsplanungstreffen __sehr__ lang werden, wenn alle diese Fragen geklärt werden. Vom Planungstreffen bis zur folgenden Iteration ist auch nicht wirklich viel Zeit, um Probleme auszuräumen.\n**Ben:** Könnten wir uns nicht schon früher zusammensetzen und hochpriore Ein­träge der Anforderungsliste schätzen, sie eventuell auftrennen, architekturelle Fragestellungen ein wenig analysieren und Abhängigkeiten auflösen? Das würde doch die Iterationsplanungstreffen viel effektiver machen.\n**Axel:** So etwas gibt es als Idee schon. Nennt sich im Scrum­Umfeld __Backlog-Grooming__, glaube ich. Dieses Grooming findet auf halbem Weg durch die Itera­tion statt und soll das Stocken des Entwicklungsprozesses verhindern. Da wäre auch Zeit, um nach versteckten Architekturaspekten zu suchen ...",
      "id": [
        "139706"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139707]\nSie gehen iterativ vor. Eine Liste von unterschiedlich groben Anforderungen speist den Pro­zess und muss spätestens bei der Planung der jeweils folgenden Iteration detailliert genug sein, um ein Stocken des Entwicklungsprozesses zu verhindern. Anforderer, Kunde oder Product Owner sind greifbar und stehen zu definierten Zeiten für Klärungen zur Verfügung.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie gehen iterativ vor. Eine Liste von unterschiedlich groben Anforderungen speist den Pro­zess und muss spätestens bei der Planung der jeweils folgenden Iteration detailliert genug sein, um ein Stocken des Entwicklungsprozesses zu verhindern. Anforderer, Kunde oder Product Owner sind greifbar und stehen zu definierten Zeiten für Klärungen zur Verfügung.",
      "id": [
        "139707"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139708]\n::info::\n**Problemstellung:**\n\nWie kann auf Basis einer Anforderungsliste mit architekturrelevanten Inhalten ein stetiger Fluss iterativ verarbeitbarer Aufgaben gewährleistet werden?\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Problemstellung:**\n\nWie kann auf Basis einer Anforderungsliste mit architekturrelevanten Inhalten ein stetiger Fluss iterativ verarbeitbarer Aufgaben gewährleistet werden?\n::",
      "id": [
        "139708"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139709]\nIn der iterativen Softwareentwicklung gilt es, Anforderungen nach und nach in lauffähige Software zu gießen. Damit das reibungslos gelingt, muss eine ausreichende Menge an detail­ lierten Anforderungen zur Verfügung stehen. Das ist die Aufgabe des Anforderungspflege­-Workshops: Er sorgt für die iterative Aufbereitung der wichtigsten (Architektur­-)Anforde­rungen. Mit genügend Vorlauf verhindert er ein Stocken des Prozesses und verschlankt die Planungsaktivitäten für die nachfolgende Iteration. Im Scrum­-Umfeld wird ein ähnliches Treffen oft als „Backlog­Pflege“ oder „Grooming“ bezeichnet, hier spreche ich allgemein von „Anforderungspflege“. Bild 3.4 zeigt die zeitliche Einordnung von Anforderungspflege­-Workshops und grenzt sie gegen den initialen Anforderungs­-Workshop ab.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In der iterativen Softwareentwicklung gilt es, Anforderungen nach und nach in lauffähige Software zu gießen. Damit das reibungslos gelingt, muss eine ausreichende Menge an detail­ lierten Anforderungen zur Verfügung stehen. Das ist die Aufgabe des Anforderungspflege­-Workshops: Er sorgt für die iterative Aufbereitung der wichtigsten (Architektur­-)Anforde­rungen. Mit genügend Vorlauf verhindert er ein Stocken des Prozesses und verschlankt die Planungsaktivitäten für die nachfolgende Iteration. Im Scrum­-Umfeld wird ein ähnliches Treffen oft als „Backlog­Pflege“ oder „Grooming“ bezeichnet, hier spreche ich allgemein von „Anforderungspflege“. Bild 3.4 zeigt die zeitliche Einordnung von Anforderungspflege­-Workshops und grenzt sie gegen den initialen Anforderungs­-Workshop ab.",
      "id": [
        "139709"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139710]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_7.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139710"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_7.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139711]\nTypischerweise findet die Anforderungspflege auf halbem Weg durch die aktuelle Iteration statt. So bleibt noch ausreichend Zeit, erkannte Probleme zu beseitigen, bevor die nächste Iteration startet, und der Entwicklungsfluss wird nicht gebremst. Beteiligt sind mindestens ein Anforderungsvertreter und die Umsetzer. Gemeinsam werden bekannte Anforderungen analysiert, in kleinere Stückchen zerlegt, geschätzt und priorisiert. Der Fokus liegt auf An­forderungen, die für die kommende Iteration interessant (also hochprior oder dringend) sind.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Typischerweise findet die Anforderungspflege auf halbem Weg durch die aktuelle Iteration statt. So bleibt noch ausreichend Zeit, erkannte Probleme zu beseitigen, bevor die nächste Iteration startet, und der Entwicklungsfluss wird nicht gebremst. Beteiligt sind mindestens ein Anforderungsvertreter und die Umsetzer. Gemeinsam werden bekannte Anforderungen analysiert, in kleinere Stückchen zerlegt, geschätzt und priorisiert. Der Fokus liegt auf An­forderungen, die für die kommende Iteration interessant (also hochprior oder dringend) sind.",
      "id": [
        "139711"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139712]\nBild 3.5 zeigt den typischen Ablauf eines Anforderungspflege-­Workshops. Von einer Anfor­derungsliste werden Einträge nach Priorität und Dringlichkeit ausgewählt. Dabei spielen auch Abhängigkeiten unter den Einträgen und architektonische Überlegungen eine Rolle (siehe auch Architekturarbeit vom Rest trennen → Abschnitt 4.1). In kurzen Arbeitszyklen von etwa 30 Minuten werden die ausgewählten Einträge diskutiert, geteilt, analysiert und geschätzt. In größeren Vorhaben kann man diese Tätigkeiten auch parallel in mehreren Teams durchführen. Die Teams arbeiten dann entweder an verschiedenen Einträgen, um die Analysegeschwindigkeit zu steigern, oder sie analysieren sehr wichtige Einträge redundant, um unterschiedliche Sichtweisen zu fördern und Unsicherheiten zu beseitigen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bild 3.5 zeigt den typischen Ablauf eines Anforderungspflege-­Workshops. Von einer Anfor­derungsliste werden Einträge nach Priorität und Dringlichkeit ausgewählt. Dabei spielen auch Abhängigkeiten unter den Einträgen und architektonische Überlegungen eine Rolle (siehe auch Architekturarbeit vom Rest trennen → Abschnitt 4.1). In kurzen Arbeitszyklen von etwa 30 Minuten werden die ausgewählten Einträge diskutiert, geteilt, analysiert und geschätzt. In größeren Vorhaben kann man diese Tätigkeiten auch parallel in mehreren Teams durchführen. Die Teams arbeiten dann entweder an verschiedenen Einträgen, um die Analysegeschwindigkeit zu steigern, oder sie analysieren sehr wichtige Einträge redundant, um unterschiedliche Sichtweisen zu fördern und Unsicherheiten zu beseitigen.",
      "id": [
        "139712"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139713]\nDer Architekturaspekt in der Anforderungspflege liegt einerseits darin, die Anforderungsliste nach wichtigen architektonischen Herausforderungen zu durchsuchen, und andererseits in der Detaillierung der Anforderungen mit Akzeptanzkriterien, die häufig qualitative Eigenschaften ausdrücken. Definieren Sie Akzeptanzkriterien in Form von Beispielen, die ausführbare Tests begünstigen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Der Architekturaspekt in der Anforderungspflege liegt einerseits darin, die Anforderungsliste nach wichtigen architektonischen Herausforderungen zu durchsuchen, und andererseits in der Detaillierung der Anforderungen mit Akzeptanzkriterien, die häufig qualitative Eigenschaften ausdrücken. Definieren Sie Akzeptanzkriterien in Form von Beispielen, die ausführbare Tests begünstigen.",
      "id": [
        "139713"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139714]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_1.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139714"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_1.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139715]\nRegelmäßige Anforderungspflege reduziert Unsicherheiten und Unklarheiten deutlich. Pla­nungstreffen für die nächste Iteration (__Sprint Planning__ in Scrum) werden durch die Vorarbeit in Anforderungs-­Workshops schlanker und leichter handhabbar. Große Unterbrechungen oder Rückschläge während der Umsetzung werden seltener und Abhängigkeiten (wie etwa die Schaffung von architektonischen Grundlagen vor der Entwicklung darauf basierender Features) werden leichter handhabbar. Die verwobene Behandlung von funktionalen und qualitativen Anforderungen fördert den gezielten Umgang mit der Architektur.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Regelmäßige Anforderungspflege reduziert Unsicherheiten und Unklarheiten deutlich. Pla­nungstreffen für die nächste Iteration (__Sprint Planning__ in Scrum) werden durch die Vorarbeit in Anforderungs-­Workshops schlanker und leichter handhabbar. Große Unterbrechungen oder Rückschläge während der Umsetzung werden seltener und Abhängigkeiten (wie etwa die Schaffung von architektonischen Grundlagen vor der Entwicklung darauf basierender Features) werden leichter handhabbar. Die verwobene Behandlung von funktionalen und qualitativen Anforderungen fördert den gezielten Umgang mit der Architektur.",
      "id": [
        "139715"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139716]\n::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Selbst wenn Ihnen die Workshops ineffektiv und ziellos vorkommen: Verzichten Sie auf die Ernennung eines Moderators, der die Workshops anleitet. Schließlich ist Selbstorganisation gut.\n• Planen Sie lange Anforderungspflege­Workshops. Um sich auf Probleme richtig einzustellen, braucht man schon mal einen Tag oder zwei.\n• Entbinden Sie sich und andere Entwickler davon, neben Anforderungs-Workshops über Anforderungen nachzudenken. Aktualisierungen der Anforderungsliste und Erkenntnisse sollten ausschließlich in Workshops erfolgen.\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Selbst wenn Ihnen die Workshops ineffektiv und ziellos vorkommen: Verzichten Sie auf die Ernennung eines Moderators, der die Workshops anleitet. Schließlich ist Selbstorganisation gut.\n• Planen Sie lange Anforderungspflege­Workshops. Um sich auf Probleme richtig einzustellen, braucht man schon mal einen Tag oder zwei.\n• Entbinden Sie sich und andere Entwickler davon, neben Anforderungs-Workshops über Anforderungen nachzudenken. Aktualisierungen der Anforderungsliste und Erkenntnisse sollten ausschließlich in Workshops erfolgen.\n::",
      "id": [
        "139716"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139717]\nDie Anforderungsliste, auf der Anforderungspflege arbeitet, kann ursprünglich aus einem initialen Anforderungs­-Workshop (→ Abschnitt 3.1) stammen. Anforderungspflege­-Work­ shops unterstützen dabei Szenarien zu kategorisieren (→ Abschnitt 3.4). Architekturarbeit im Backlog (→ Abschnitt 3.6) wird damit effektiver und bei Architekturarbeit auf Kanban (→ Abschnitt 3.7) wandern detaillierte Anforderungen von der „neu“­ in die „analysiert“­ Spalte.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Anforderungsliste, auf der Anforderungspflege arbeitet, kann ursprünglich aus einem initialen Anforderungs­-Workshop (→ Abschnitt 3.1) stammen. Anforderungspflege­-Work­ shops unterstützen dabei Szenarien zu kategorisieren (→ Abschnitt 3.4). Architekturarbeit im Backlog (→ Abschnitt 3.6) wird damit effektiver und bei Architekturarbeit auf Kanban (→ Abschnitt 3.7) wandern detaillierte Anforderungen von der „neu“­ in die „analysiert“­ Spalte.",
      "id": [
        "139717"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139718]\nNeben diesen direkten Verbindungen zu anderen Mustern aus dem Anforderungsbereich machen es Anforderungspflege-­Workshops einfacher, Stakeholder zu involvieren (→ Ab­ schnitt 5.4) und gemeinsam zu entscheiden (→ Abschnitt 5.2).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Neben diesen direkten Verbindungen zu anderen Mustern aus dem Anforderungsbereich machen es Anforderungspflege-­Workshops einfacher, Stakeholder zu involvieren (→ Ab­ schnitt 5.4) und gemeinsam zu entscheiden (→ Abschnitt 5.2).",
      "id": [
        "139718"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139719]\nDie Detaillierung von Akzeptanzkriterien ist ein wertvoller Input, um qualitative Eigen­schaften zu Testen (→ Abschnitt 6.3) und erlaubt die direkte Verbindung von Architektur­anforderungen und Tests.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Detaillierung von Akzeptanzkriterien ist ein wertvoller Input, um qualitative Eigen­schaften zu Testen (→ Abschnitt 6.3) und erlaubt die direkte Verbindung von Architektur­anforderungen und Tests.",
      "id": [
        "139719"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:139720]\n[%3.3]\n[##Szenarien als Architekturanforderungen]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "139720"
      ],
      "title": "Szenarien als Architekturanforderungen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139721]\n__„Nichts macht einen zarteren und tieferen Eindruck auf den Geist des Menschen als das Beispiel.“__\n– John Locke",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__„Nichts macht einen zarteren und tieferen Eindruck auf den Geist des Menschen als das Beispiel.“__\n– John Locke",
      "id": [
        "139721"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139722]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_8.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139722"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_8.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139723]\n__In einem Anforderungs-Workshop sollen Architekturanforderungen abgeholt werden ...__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__In einem Anforderungs-Workshop sollen Architekturanforderungen abgeholt werden ...__",
      "id": [
        "139723"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139724]\n**Thorsten:** Mir ist wichtig, dass neue Mitarbeiter des Magazins am besten ohne Einschulung dazu in der Lage sind, das System zu benutzen.\n**Michael:** O.k., ich notiere Benutzbarkeit. Ist das wichtiger als Sicherheit? \n**Thorsten:** Öh ... Weiß nicht so recht. Wieso? Klingt beides sehr wichtig.\n**Ben:** Moment mal. Mit Generalisierungen habe ich schon im letzten Projekt schlechte Erfahrungen gemacht. Damals haben wir wegen „Performanz“ alles Mögliche optimiert, Schichten wegoptimiert, redundanten Code erzeugt,\nKlassen zusammengezogen, sogar Stored Procedures eingeführt. Am Ende haben wir rausgefunden, dass es dem Kunden eigentlich um Benutzungseffizienz und Latenzzeiten im Call­Center ging. Das hätten wir auch anders hinbekommen können und wir hätten uns nicht einen unwartbaren Klotz ans Bein gebunden ...\n**Michael:** Und was schlägst du vor?\n**Ben:** Halten wir doch einfach die konkrete Aussage fest: „Mitarbeiter sollen sich schnell einarbeiten.“ In welchen Bereichen fangen neue Mitarbeiter denn norma­ lerweise an?\n**Thorsten:** Der Klassiker sind das Prüfen und Freischalten von Artikeln.\n**Ben:** O.k., das können wir doch so festhalten: „Ein neuer Mitarbeiter möchte Artikel prüfen und freischalten. Er ist dazu ohne Einarbeitungsphase in der Lage.“ Das hilft sicher auch dabei, Kompromisse konkret zu formulieren. Außer­ dem können wir solche Aussagen gezielt bearbeiten. „Benutzbarkeit“ wäre hin­ gegen schwierig in Tasks zu überführen oder zu schätzen ...\n**Thorsten:** Das klingt für mich auch nachvollziehbarer.\n**Michael:** Aber ob Benutzbarkeit wichtig ist, wäre trotzdem interessant ...\n**Ben:** Wir können diese konkreten Aussagen auch Qualitätsmerkmalen zuordnen und darauf achten, unter welchen Merkmalen viele wichtige Aussagen hängen. So bekommen wir auch einen generellen Eindruck. Ansonsten sollte uns alleine schon der Produktkarton vom initialen Anforderungs­Workshop helfen, die Top­ Qualitätsmerkmale zu bestimmen. Benutzbarkeit gehört bei uns dazu.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Thorsten:** Mir ist wichtig, dass neue Mitarbeiter des Magazins am besten ohne Einschulung dazu in der Lage sind, das System zu benutzen.\n**Michael:** O.k., ich notiere Benutzbarkeit. Ist das wichtiger als Sicherheit? \n**Thorsten:** Öh ... Weiß nicht so recht. Wieso? Klingt beides sehr wichtig.\n**Ben:** Moment mal. Mit Generalisierungen habe ich schon im letzten Projekt schlechte Erfahrungen gemacht. Damals haben wir wegen „Performanz“ alles Mögliche optimiert, Schichten wegoptimiert, redundanten Code erzeugt,\nKlassen zusammengezogen, sogar Stored Procedures eingeführt. Am Ende haben wir rausgefunden, dass es dem Kunden eigentlich um Benutzungseffizienz und Latenzzeiten im Call­Center ging. Das hätten wir auch anders hinbekommen können und wir hätten uns nicht einen unwartbaren Klotz ans Bein gebunden ...\n**Michael:** Und was schlägst du vor?\n**Ben:** Halten wir doch einfach die konkrete Aussage fest: „Mitarbeiter sollen sich schnell einarbeiten.“ In welchen Bereichen fangen neue Mitarbeiter denn norma­ lerweise an?\n**Thorsten:** Der Klassiker sind das Prüfen und Freischalten von Artikeln.\n**Ben:** O.k., das können wir doch so festhalten: „Ein neuer Mitarbeiter möchte Artikel prüfen und freischalten. Er ist dazu ohne Einarbeitungsphase in der Lage.“ Das hilft sicher auch dabei, Kompromisse konkret zu formulieren. Außer­ dem können wir solche Aussagen gezielt bearbeiten. „Benutzbarkeit“ wäre hin­ gegen schwierig in Tasks zu überführen oder zu schätzen ...\n**Thorsten:** Das klingt für mich auch nachvollziehbarer.\n**Michael:** Aber ob Benutzbarkeit wichtig ist, wäre trotzdem interessant ...\n**Ben:** Wir können diese konkreten Aussagen auch Qualitätsmerkmalen zuordnen und darauf achten, unter welchen Merkmalen viele wichtige Aussagen hängen. So bekommen wir auch einen generellen Eindruck. Ansonsten sollte uns alleine schon der Produktkarton vom initialen Anforderungs­Workshop helfen, die Top­ Qualitätsmerkmale zu bestimmen. Benutzbarkeit gehört bei uns dazu.",
      "id": [
        "139724"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139725]\nSie wollen gemeinsam mit Anforderern und/oder Kunden Qualitätsanforderungen festhalten, um sie anschließend als Basis für die Architekturarbeit zu verwenden. Ihr Anforderer und/ oder Kunde kann Kompromisse oder Probleme nur auf Anforderungsniveau verstehen – technische Argumentationen sind für ihn nicht leicht nachvollziehbar.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie wollen gemeinsam mit Anforderern und/oder Kunden Qualitätsanforderungen festhalten, um sie anschließend als Basis für die Architekturarbeit zu verwenden. Ihr Anforderer und/ oder Kunde kann Kompromisse oder Probleme nur auf Anforderungsniveau verstehen – technische Argumentationen sind für ihn nicht leicht nachvollziehbar.",
      "id": [
        "139725"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139726]\n::info::\n**Problemstellung:**\n\nWie drückt man Qualitätsanforderungen aus, um (1) Architekturarbeit sinnvoll zu leiten und (2) stakeholdergerecht zu kommunizieren?\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Problemstellung:**\n\nWie drückt man Qualitätsanforderungen aus, um (1) Architekturarbeit sinnvoll zu leiten und (2) stakeholdergerecht zu kommunizieren?\n::",
      "id": [
        "139726"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139727]\nQualitätsszenarien (oder kurz „Szenarien“) sind konkrete Aussagen darüber, wie sich das System bei gewöhnlicher Benutzung oder in Ausnahmefällen verhalten soll. Dabei steht nicht Funktionalität, sondern Qualität im Fokus: Wie oft, wie schnell, wie schön oder wie gut abgesichert muss bestimmte Funktionalität verfügbar sein? Qualitätsmerkmale wie Zuverlässigkeit, Effizienz oder Sicherheit werden also beispielhaft genauer beschrieben. Sie finden formulierte Szenarien im Projektbeispiel zu diesem Muster, in den Bildern 3.6 und 3.7 sowie im nächsten Abschnitt (3.4).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Qualitätsszenarien (oder kurz „Szenarien“) sind konkrete Aussagen darüber, wie sich das System bei gewöhnlicher Benutzung oder in Ausnahmefällen verhalten soll. Dabei steht nicht Funktionalität, sondern Qualität im Fokus: Wie oft, wie schnell, wie schön oder wie gut abgesichert muss bestimmte Funktionalität verfügbar sein? Qualitätsmerkmale wie Zuverlässigkeit, Effizienz oder Sicherheit werden also beispielhaft genauer beschrieben. Sie finden formulierte Szenarien im Projektbeispiel zu diesem Muster, in den Bildern 3.6 und 3.7 sowie im nächsten Abschnitt (3.4).",
      "id": [
        "139727"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139728]\nDie Beschreibung von Anforderungen über Beispiele ist ein Trend, der im Dunstkreis der agi­len Softwareentwicklung vor allem den Testbereich ergriffen hat. Behaviour Driven Develop­ment (BDD) und Acceptance Test­Driven Development (ATDD) zeigen, wie effektiv Beispiele sind, wenn es darum geht, Anforderungen zu formulieren, zu kommunizieren und schließlich (automatisiert) zu testen. Qualitätsszenarien sind als Idee etwas älter als diese Konzepte, negieren aber ebenfalls allgemeine Aussagen und erzielen so eine Reihe positiver Effekte:\n\n• Szenarien bilden eine hervorragende Grundlage zur Bearbeitung von Architekturentschei­dungen. Durch die konkrete Formulierung lassen sich die architekturrelevanten Aspekte eines Qualitätsmerkmals besser verstehen und gezielt bearbeiten.\n• Szenarien machen die Vorstellungen zu Qualitätsaspekten des Systems transparent. So findet ein Abgleich zwischen Kunden, Benutzern, Entwicklern, Betrieb und anderen Stake­holdern statt, der sonst erst viel später möglich ist.\n• Szenarien bilden die Basis, um Softwarearchitekturen sinnvoll bewerten zu können. In einem iterativen Prozess führt Architekturbewertung zu besseren Entscheidungen mit breiterer Akzeptanz.\n• Szenarien unterstützen dabei, Kompromisse zu kommunizieren und aufzulösen. Beschreibt man die Auswirkungen von Architekturentscheidungen mit Szenarien, werden sie für fachliche Ansprechpartner greifbar. So sind sinnvolle Abwägungen möglich, wo vorher nur „Rauschen durch technische Aussagen“ war.\n• Szenarien können relativ einfach in Akzeptanztests verarbeitet werden (siehe Qualitative Eigenschaften testen → Abschnitt 6.3) und sind ein wichtiger Schritt bei der Übersetzung zentraler Qualitätsanforderungen in automatisierte Tests.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Beschreibung von Anforderungen über Beispiele ist ein Trend, der im Dunstkreis der agi­len Softwareentwicklung vor allem den Testbereich ergriffen hat. Behaviour Driven Develop­ment (BDD) und Acceptance Test­Driven Development (ATDD) zeigen, wie effektiv Beispiele sind, wenn es darum geht, Anforderungen zu formulieren, zu kommunizieren und schließlich (automatisiert) zu testen. Qualitätsszenarien sind als Idee etwas älter als diese Konzepte, negieren aber ebenfalls allgemeine Aussagen und erzielen so eine Reihe positiver Effekte:\n\n• Szenarien bilden eine hervorragende Grundlage zur Bearbeitung von Architekturentschei­dungen. Durch die konkrete Formulierung lassen sich die architekturrelevanten Aspekte eines Qualitätsmerkmals besser verstehen und gezielt bearbeiten.\n• Szenarien machen die Vorstellungen zu Qualitätsaspekten des Systems transparent. So findet ein Abgleich zwischen Kunden, Benutzern, Entwicklern, Betrieb und anderen Stake­holdern statt, der sonst erst viel später möglich ist.\n• Szenarien bilden die Basis, um Softwarearchitekturen sinnvoll bewerten zu können. In einem iterativen Prozess führt Architekturbewertung zu besseren Entscheidungen mit breiterer Akzeptanz.\n• Szenarien unterstützen dabei, Kompromisse zu kommunizieren und aufzulösen. Beschreibt man die Auswirkungen von Architekturentscheidungen mit Szenarien, werden sie für fachliche Ansprechpartner greifbar. So sind sinnvolle Abwägungen möglich, wo vorher nur „Rauschen durch technische Aussagen“ war.\n• Szenarien können relativ einfach in Akzeptanztests verarbeitet werden (siehe Qualitative Eigenschaften testen → Abschnitt 6.3) und sind ein wichtiger Schritt bei der Übersetzung zentraler Qualitätsanforderungen in automatisierte Tests.",
      "id": [
        "139728"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139729]\n**Qualitätsszenarien formulieren**\n\nGute Szenarien sind für fachliche Stakeholder verständlich und für Umsetzer richtungsgebend. Bei der Formulierung von Qualitätsszenarien können Sie sich an einem typischen Aufbau orientieren. [Bas12] definiert mögliche Teile eines Szenarios, die in Bild 3.6 dargestellt und mit einem Beispiel illustriert werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Qualitätsszenarien formulieren**\n\nGute Szenarien sind für fachliche Stakeholder verständlich und für Umsetzer richtungsgebend. Bei der Formulierung von Qualitätsszenarien können Sie sich an einem typischen Aufbau orientieren. [Bas12] definiert mögliche Teile eines Szenarios, die in Bild 3.6 dargestellt und mit einem Beispiel illustriert werden.",
      "id": [
        "139729"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139730]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_9.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139730"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_9.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139731]\nDie Szenarioteile sollen bei der Formulierung qualitativer Anforderungen unterstützen, fühlen Sie sich jedoch keinesfalls verpflichtet, immer alle Szenarioteile zu befüllen. Insbesondere bei der Erhebung von Szenarien ist es üblich, Teile offen zu lassen und zunächst die Idee eher formlos festzuhalten. Fachlich wichtige oder technisch herausfordernde Szenarien können Sie später mit dem Schema schärfen. Achten Sie generell darauf:\n\n• Szenarien **kurz** zu halten.\nAls Daumenregel für die Länge eines Szenarios gelten ein bis drei Sätze. Lange Szenarien deuten darauf hin, dass Qualitätsaspekte vermischt sind.\n• Szenarien **aktiv** zu formulieren.\nVermeiden Sie Wörter wie „sollte“, „müsste“ und „könnte“, indem Sie mit dem Szenario den Zustand nach Systemfertigstellung beschreiben. Durch die aktive Formulierung werden Sie konkreter und die übrigen Teile des Szenarios sind leichter zu formulieren.\n• Szenarien **fachlich relevant** zu halten.\nDriften Sie nicht zu stark in Richtung technischer Formulierung ab. Auslöser und Antwort müssen von Stakeholdern auf Kundenseite verstanden werden. Anderenfalls verlieren Szenarien ihren Kommunikationszweck und Sie werden tendenziell zu viele Szenarien finden, um sie noch sinnvoll handhaben zu können.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Szenarioteile sollen bei der Formulierung qualitativer Anforderungen unterstützen, fühlen Sie sich jedoch keinesfalls verpflichtet, immer alle Szenarioteile zu befüllen. Insbesondere bei der Erhebung von Szenarien ist es üblich, Teile offen zu lassen und zunächst die Idee eher formlos festzuhalten. Fachlich wichtige oder technisch herausfordernde Szenarien können Sie später mit dem Schema schärfen. Achten Sie generell darauf:\n\n• Szenarien **kurz** zu halten.\nAls Daumenregel für die Länge eines Szenarios gelten ein bis drei Sätze. Lange Szenarien deuten darauf hin, dass Qualitätsaspekte vermischt sind.\n• Szenarien **aktiv** zu formulieren.\nVermeiden Sie Wörter wie „sollte“, „müsste“ und „könnte“, indem Sie mit dem Szenario den Zustand nach Systemfertigstellung beschreiben. Durch die aktive Formulierung werden Sie konkreter und die übrigen Teile des Szenarios sind leichter zu formulieren.\n• Szenarien **fachlich relevant** zu halten.\nDriften Sie nicht zu stark in Richtung technischer Formulierung ab. Auslöser und Antwort müssen von Stakeholdern auf Kundenseite verstanden werden. Anderenfalls verlieren Szenarien ihren Kommunikationszweck und Sie werden tendenziell zu viele Szenarien finden, um sie noch sinnvoll handhaben zu können.",
      "id": [
        "139731"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139732]\n**Qualitätsszenarien erheben**\n\nAbschnitt 3.1 beschreibt Anforderungs­Workshops, die auch zur Erhebung von Szenarien verwendet werden können. Außerdem lassen sich Szenarien aus grob definierten nicht­funktionalen Anforderungen ableiten oder über die Betrachtung der bisher getroffenen Architekturentscheidungen finden. Dabei sind vor allem jene Entscheidungen spannend, die vom Standard abweichen oder die Lösung komplizierter machen. Die Abweichung von der einfachsten Lösung sollte einen Grund haben. Meistens ist er in qualitativen Anforderungen oder einschränkenden Rahmenbedingungen zu finden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Qualitätsszenarien erheben**\n\nAbschnitt 3.1 beschreibt Anforderungs­Workshops, die auch zur Erhebung von Szenarien verwendet werden können. Außerdem lassen sich Szenarien aus grob definierten nicht­funktionalen Anforderungen ableiten oder über die Betrachtung der bisher getroffenen Architekturentscheidungen finden. Dabei sind vor allem jene Entscheidungen spannend, die vom Standard abweichen oder die Lösung komplizierter machen. Die Abweichung von der einfachsten Lösung sollte einen Grund haben. Meistens ist er in qualitativen Anforderungen oder einschränkenden Rahmenbedingungen zu finden.",
      "id": [
        "139732"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139733]\nAls Hilfestellung für Brainstormings eignen sich die Szenarioarten aus Tabelle 3.1. Die Fragen aus Spalte zwei leiten die Szenariogenerierung für Use­-Case-­, Wachstums-­ und Stressszena­rien, hinter denen sich meist unterschiedliche Qualitätsmerkmale verbergen (siehe Spalte 3). In der Praxis funktioniert das deutlich besser als die direkte Abfrage von Szenarien für ein Qualitätsmerkmal oder die völlig freie Erhebung. Durch die Beachtung aller drei Szenarioarten decken Sie die Qualitätsmerkmale aus Bild 3.2 gut ab.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Als Hilfestellung für Brainstormings eignen sich die Szenarioarten aus Tabelle 3.1. Die Fragen aus Spalte zwei leiten die Szenariogenerierung für Use­-Case-­, Wachstums-­ und Stressszena­rien, hinter denen sich meist unterschiedliche Qualitätsmerkmale verbergen (siehe Spalte 3). In der Praxis funktioniert das deutlich besser als die direkte Abfrage von Szenarien für ein Qualitätsmerkmal oder die völlig freie Erhebung. Durch die Beachtung aller drei Szenarioarten decken Sie die Qualitätsmerkmale aus Bild 3.2 gut ab.",
      "id": [
        "139733"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139734]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_10.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139734"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_10.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139735]\nNicht nur in Anforderungs­-Workshops, sondern auch während der Architekturarbeit und be­sonders in der Umsetzung werden Fragen und Probleme offensichtlich, die qualitative Aspekte betreffen. Wichtig ist dabei, dass Sie diese Fragen und Probleme mit dem Kunden abstimmen und auf Anforderungen zurückführen. Stellen Sie beispielsweise fest, dass die vorgesehene Datenbank mit der erwarteten Datenmenge nicht zurechtkommt, gehen Sie in Abstimmung mit dem Kunden, um die Erwartungen bezüglich Latenz, Durchsatz, Skalierbarkeit, Sicherheit und Verfügbarkeit zu verstehen. Sie definieren auf dieser Basis entsprechende Szenarien, priorisieren sie und treffen schließlich transparente und nachvollziehbare Entscheidungen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nicht nur in Anforderungs­-Workshops, sondern auch während der Architekturarbeit und be­sonders in der Umsetzung werden Fragen und Probleme offensichtlich, die qualitative Aspekte betreffen. Wichtig ist dabei, dass Sie diese Fragen und Probleme mit dem Kunden abstimmen und auf Anforderungen zurückführen. Stellen Sie beispielsweise fest, dass die vorgesehene Datenbank mit der erwarteten Datenmenge nicht zurechtkommt, gehen Sie in Abstimmung mit dem Kunden, um die Erwartungen bezüglich Latenz, Durchsatz, Skalierbarkeit, Sicherheit und Verfügbarkeit zu verstehen. Sie definieren auf dieser Basis entsprechende Szenarien, priorisieren sie und treffen schließlich transparente und nachvollziehbare Entscheidungen.",
      "id": [
        "139735"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139736]\nUm erhobene Szenarien abzulegen, bietet sich ein __Qualitätsbaum__ an. Er ordnet Qualitäts­ szenarien dem jeweils bestimmenden Qualitätsmerkmal zu (siehe Bild 3.7). Die Kontext­information macht Szenarien besser lesbar, die Fokussierung auf einzelne Qualitätsaspekte wird leichter und es wird auf einen Blick deutlich, welche Qualitätsmerkmale für Ihr System wichtig sind bzw. welche Sie (noch) nicht betrachtet haben. In iterativen Vorhaben stellt der Qualitätsbaum eine Art Speicher für qualitative Anforderungen dar, aus dem sich Backlogs und Kanban­Spalten bedienen können (siehe Abschnitte 3.6 und 3.7).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Um erhobene Szenarien abzulegen, bietet sich ein __Qualitätsbaum__ an. Er ordnet Qualitäts­ szenarien dem jeweils bestimmenden Qualitätsmerkmal zu (siehe Bild 3.7). Die Kontext­information macht Szenarien besser lesbar, die Fokussierung auf einzelne Qualitätsaspekte wird leichter und es wird auf einen Blick deutlich, welche Qualitätsmerkmale für Ihr System wichtig sind bzw. welche Sie (noch) nicht betrachtet haben. In iterativen Vorhaben stellt der Qualitätsbaum eine Art Speicher für qualitative Anforderungen dar, aus dem sich Backlogs und Kanban­Spalten bedienen können (siehe Abschnitte 3.6 und 3.7).",
      "id": [
        "139736"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139737]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_11.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139737"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_11.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139738]\n::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Verstehen Sie Szenarien als eine Möglichkeit, rein technische Tätigkeiten zu ver­packen. Holen Sie sich Szenarien nicht vom Kunden, sondern definieren Sie im Stile von „Als ein Entwickler möchte XY“.\n• Versuchen Sie möglichst alle qualitativen Anforderungen an Ihr System in Sze­narien zu gießen. Verstehen Sie Szenarien als Anforderungen mit Vollständig­keitsanspruch, nicht als Beispiel.\n• Erheben Sie Szenarien immer vollständig. Es darf nie ein Szenarioteil fehlen. Fachliche Wichtigkeit und technisches Risiko sind dabei völlig unerheblich.\n• Definieren Sie das Antwortmaß für Szenarien möglichst genau und unterschei­den Sie nicht zu offiziellen Akzeptanzkriterien. Größenordnungen reichen für die meisten Architekturentscheidungen nicht aus.\n• Zeigen Sie Szenarien keinesfalls Ihrem Kunden. Er könnte auf dumme Ideen kommen.\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Verstehen Sie Szenarien als eine Möglichkeit, rein technische Tätigkeiten zu ver­packen. Holen Sie sich Szenarien nicht vom Kunden, sondern definieren Sie im Stile von „Als ein Entwickler möchte XY“.\n• Versuchen Sie möglichst alle qualitativen Anforderungen an Ihr System in Sze­narien zu gießen. Verstehen Sie Szenarien als Anforderungen mit Vollständig­keitsanspruch, nicht als Beispiel.\n• Erheben Sie Szenarien immer vollständig. Es darf nie ein Szenarioteil fehlen. Fachliche Wichtigkeit und technisches Risiko sind dabei völlig unerheblich.\n• Definieren Sie das Antwortmaß für Szenarien möglichst genau und unterschei­den Sie nicht zu offiziellen Akzeptanzkriterien. Größenordnungen reichen für die meisten Architekturentscheidungen nicht aus.\n• Zeigen Sie Szenarien keinesfalls Ihrem Kunden. Er könnte auf dumme Ideen kommen.\n::",
      "id": [
        "139738"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139739]\nSzenarien bilden die Grundlage für iterative Arbeit an der Architektur. Sie werden in initialen Anforderungs­-Workshops (→ Abschnitt 3.1) bei Anforderungspflege-­Workshops (→ Abschnitt 3.2) oder durch Erkenntnisse in der Umsetzung gefunden (siehe Kapitel 6 – Abgleich mit der Realität). Verarbeitet werden Szenarien, z. B. als Architekturarbeit im Backlog (→ Abschnitt 3.6) oder ARCHITEKTURARBEIT AUF KANBAN (→ Abschnitt 3.7). SZENARIEN KATEGORISIEREN (→ Abschnitt 3.4) hilft bei der Übersetzung in diese Konzepte.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Szenarien bilden die Grundlage für iterative Arbeit an der Architektur. Sie werden in initialen Anforderungs­-Workshops (→ Abschnitt 3.1) bei Anforderungspflege-­Workshops (→ Abschnitt 3.2) oder durch Erkenntnisse in der Umsetzung gefunden (siehe Kapitel 6 – Abgleich mit der Realität). Verarbeitet werden Szenarien, z. B. als Architekturarbeit im Backlog (→ Abschnitt 3.6) oder ARCHITEKTURARBEIT AUF KANBAN (→ Abschnitt 3.7). SZENARIEN KATEGORISIEREN (→ Abschnitt 3.4) hilft bei der Übersetzung in diese Konzepte.",
      "id": [
        "139739"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139740]\nDurch die Sichtbarkeit, die Szenarien der qualitativen Anforderungsseite geben, ist es einfacher, Architekturarbeit vom Rest zu trennen (→ Abschnitt 4.1), und gemeinsam zu entscheiden (→ Abschnitt 5.2) wird einfacher. Wiederkehrende Reflexion (→ Abschnitt 5.5) ist meist szenariogetrieben und erhöht den Kommunikationsfaktor im Team weiter. Aber selbst über die Grenzen der Umsetzungsteams hinweg sind Szenarien wichtige Kommunikationstrei­ber. Sie sind Teil der Architekturwand eines Informativen Arbeitsplatzes (→ Abschnitt 5.1) und spielen auch ein Rolle, wenn Sie Stakeholder involvieren (→ Abschnitt 5.4).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Durch die Sichtbarkeit, die Szenarien der qualitativen Anforderungsseite geben, ist es einfacher, Architekturarbeit vom Rest zu trennen (→ Abschnitt 4.1), und gemeinsam zu entscheiden (→ Abschnitt 5.2) wird einfacher. Wiederkehrende Reflexion (→ Abschnitt 5.5) ist meist szenariogetrieben und erhöht den Kommunikationsfaktor im Team weiter. Aber selbst über die Grenzen der Umsetzungsteams hinweg sind Szenarien wichtige Kommunikationstrei­ber. Sie sind Teil der Architekturwand eines Informativen Arbeitsplatzes (→ Abschnitt 5.1) und spielen auch ein Rolle, wenn Sie Stakeholder involvieren (→ Abschnitt 5.4).",
      "id": [
        "139740"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139741]\nQualitätsszenarien sind konkrete Beispiele für qualitative Anforderungen und damit eine gute Basis, um qualitative Eigenschaften zu testen (→ Abschnitt 6.3) oder Qualitätsindikatoren zu nutzen (→ Abschnitt 6.4).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Qualitätsszenarien sind konkrete Beispiele für qualitative Anforderungen und damit eine gute Basis, um qualitative Eigenschaften zu testen (→ Abschnitt 6.3) oder Qualitätsindikatoren zu nutzen (→ Abschnitt 6.4).",
      "id": [
        "139741"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:139742]\n[%3.4]\n[##Szenarien kategorisieren]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.4",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "139742"
      ],
      "title": "Szenarien kategorisieren"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139743]\n__„Es gibt drei Arten von Pianisten: jüdische Pianisten, homosexuelle Pianisten – und schlechte Pianisten.“__\n– Vladimir Horowitz",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__„Es gibt drei Arten von Pianisten: jüdische Pianisten, homosexuelle Pianisten – und schlechte Pianisten.“__\n– Vladimir Horowitz",
      "id": [
        "139743"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139744]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_12.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139744"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_12.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139745]\n__Michael und Tommy finden Szenarien nicht so toll ...__\n\n**Tommy:** Also diese Szenarien sind ja ganz nett, aber irgendwie ist die Bearbei­tung schwierig. Unsere funktionalen Anforderungen sind priorisiert, was machen wir aber mit den Szenarien? Ein getrennter Backlog für Szenarien passt nicht, weil wir nicht wirklich wüssten, ob das oberste Szenario im Szenario­Backlog oder die oberste Story im normalen Backlog wichtiger ist.\n**Michael:** Eine andere Idee war, fixe Zeiten für Architekturarbeit vorzusehen. Das ist aber sehr starr. Es kann ja von Iteration zu Iteration unterschiedlich sein, wie viele Szenarien bearbeitet werden müssen. Mit fixen Architekturzeiten würden wir immer zu wenig oder zu viel machen.\n**Tommy:** Noch dazu sind die Storys im Backlog mit Akzeptanzkriterien versehen. Diese Kriterien sind teilweise auch nichtfunktional und unter Umständen auch als Szenario im Szenario­Backlog vertreten. Das ist ein Horror.\n**Axel:** Und was ist, wenn wir die Szenarien einfach zu den Stories in den norma­len Backlog werfen?\n**Tommy:** Das haben wir ganz am Anfang auch versucht, aber das ging irgendwie auch schwer. Szenarien sind oft nicht unabhängig von Stories priorisierbar.\n**Axel:** Hast du ein Beispiel dafür?\n**Tommy:** Michael, du hattest doch da Beispiele ...\n**Michael:** Ja, ich suche gerade schon ... Ah, hier zum Beispiel: „Der Algorithmus zur Berechnung der Artikelbeliebtheit soll leicht anpassbar und austauschbar sein.“ Hier macht es wenig Sinn, das Szenario losgelöst von der funktionalen Anforderung der Artikelbeliebtheit zu betrachten. Auch bei diesem Szenario ist das so: „Das Editieren, Korrigieren und Freigeben eines Artikels ist über eine ein­zelne Bildschirmmaske möglich.“\n**Tommy:** Mit anderen Szenarien kommen noch größere Probleme. Ein Beispiel: „Für Wartung und Erweiterung des Systems findet man am „freien Markt“ leicht Unterstützung.“ Hier haben wir noch einmal mit dem Kunden gesprochen, was genau das Ziel ist. Die Lösung beinhaltet wohl den generellen Verzicht auf exoti­sche Frameworks und die Vermeidung von eigenen, individuellen Anpassungen an Standardbibliotheken. Wir sollten auch Lösungen mit großer Community be­vorzugen und komplexere Teile des Systems gut dokumentieren. Das alles ist nur sinnvoll, wenn sich alle Entwickler daran halten. Es betrifft alle Entscheidungen und alle Stories im Backlog. Das ist überhaupt nicht unabhängig priorisierbar.\n**Axel:** Wenn ich das richtig sehe, ist Szenario nicht gleich Szenario. Bei manchen Szenarien hat das mit der Unabhängigkeit im Backlog auch gut geklappt oder?\n**Tommy:** Schon.\n**Axel:** Ich denke, wir sollten drei Kategorien von Szenarien bilden. Solche, die ohne Weiteres in den Backlog passen, solche, die sich auf alles und jeden bezie­hen und solche, die direkt zu einer Story passen. Das Letzte klingt sowieso eher nach Akzeptanzkriterium. Vielleicht können wir so einen separaten Backlog für Szenarien und den beschriebenen Horror vermeiden ...",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Michael und Tommy finden Szenarien nicht so toll ...__\n\n**Tommy:** Also diese Szenarien sind ja ganz nett, aber irgendwie ist die Bearbei­tung schwierig. Unsere funktionalen Anforderungen sind priorisiert, was machen wir aber mit den Szenarien? Ein getrennter Backlog für Szenarien passt nicht, weil wir nicht wirklich wüssten, ob das oberste Szenario im Szenario­Backlog oder die oberste Story im normalen Backlog wichtiger ist.\n**Michael:** Eine andere Idee war, fixe Zeiten für Architekturarbeit vorzusehen. Das ist aber sehr starr. Es kann ja von Iteration zu Iteration unterschiedlich sein, wie viele Szenarien bearbeitet werden müssen. Mit fixen Architekturzeiten würden wir immer zu wenig oder zu viel machen.\n**Tommy:** Noch dazu sind die Storys im Backlog mit Akzeptanzkriterien versehen. Diese Kriterien sind teilweise auch nichtfunktional und unter Umständen auch als Szenario im Szenario­Backlog vertreten. Das ist ein Horror.\n**Axel:** Und was ist, wenn wir die Szenarien einfach zu den Stories in den norma­len Backlog werfen?\n**Tommy:** Das haben wir ganz am Anfang auch versucht, aber das ging irgendwie auch schwer. Szenarien sind oft nicht unabhängig von Stories priorisierbar.\n**Axel:** Hast du ein Beispiel dafür?\n**Tommy:** Michael, du hattest doch da Beispiele ...\n**Michael:** Ja, ich suche gerade schon ... Ah, hier zum Beispiel: „Der Algorithmus zur Berechnung der Artikelbeliebtheit soll leicht anpassbar und austauschbar sein.“ Hier macht es wenig Sinn, das Szenario losgelöst von der funktionalen Anforderung der Artikelbeliebtheit zu betrachten. Auch bei diesem Szenario ist das so: „Das Editieren, Korrigieren und Freigeben eines Artikels ist über eine ein­zelne Bildschirmmaske möglich.“\n**Tommy:** Mit anderen Szenarien kommen noch größere Probleme. Ein Beispiel: „Für Wartung und Erweiterung des Systems findet man am „freien Markt“ leicht Unterstützung.“ Hier haben wir noch einmal mit dem Kunden gesprochen, was genau das Ziel ist. Die Lösung beinhaltet wohl den generellen Verzicht auf exoti­sche Frameworks und die Vermeidung von eigenen, individuellen Anpassungen an Standardbibliotheken. Wir sollten auch Lösungen mit großer Community be­vorzugen und komplexere Teile des Systems gut dokumentieren. Das alles ist nur sinnvoll, wenn sich alle Entwickler daran halten. Es betrifft alle Entscheidungen und alle Stories im Backlog. Das ist überhaupt nicht unabhängig priorisierbar.\n**Axel:** Wenn ich das richtig sehe, ist Szenario nicht gleich Szenario. Bei manchen Szenarien hat das mit der Unabhängigkeit im Backlog auch gut geklappt oder?\n**Tommy:** Schon.\n**Axel:** Ich denke, wir sollten drei Kategorien von Szenarien bilden. Solche, die ohne Weiteres in den Backlog passen, solche, die sich auf alles und jeden bezie­hen und solche, die direkt zu einer Story passen. Das Letzte klingt sowieso eher nach Akzeptanzkriterium. Vielleicht können wir so einen separaten Backlog für Szenarien und den beschriebenen Horror vermeiden ...",
      "id": [
        "139745"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139746]\nSie haben Szenarien erhoben oder definiert (z. B. in einem Anforderungs-Workshop). In Ihrem Vorgehen werden hauptsächlich funktionale Anforderungen abgearbeitet – entweder iterativ oder in einem stetigen Fluss wie in Kanban. Sie wollen Architekturaufgaben gegen fachliche Aufgaben priorisieren und Architekturarbeit nicht einfach zu Beginn erledigen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie haben Szenarien erhoben oder definiert (z. B. in einem Anforderungs-Workshop). In Ihrem Vorgehen werden hauptsächlich funktionale Anforderungen abgearbeitet – entweder iterativ oder in einem stetigen Fluss wie in Kanban. Sie wollen Architekturaufgaben gegen fachliche Aufgaben priorisieren und Architekturarbeit nicht einfach zu Beginn erledigen.",
      "id": [
        "139746"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139747]\n::info::\n**Problemstellung:**\n\nWie können Szenarien in iterativen und/oder agilen Prozessen abgearbeitet werden, ohne zu verzögern oder zu behindern?\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Problemstellung:**\n\nWie können Szenarien in iterativen und/oder agilen Prozessen abgearbeitet werden, ohne zu verzögern oder zu behindern?\n::",
      "id": [
        "139747"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139748]\nNicht alle Qualitätsszenarien erfordern das gleiche Maß an Architekturarbeit. Manche Szenarien müssen früh entschieden und breit kommuniziert werden, andere müssen mit Funktionalität gemeinsam betrachtet werden. Durch die Kategorisierung von Szenarien sind Abhängigkeiten zwischen Qualität und Funktionalität handhabbar und der Bearbeitungsauf­ wand sinkt. Nur architekturrelevante Szenarien werden später als eigene Aufgaben definiert, der Rest wird direkt mit Umsetzungsaufgaben verwoben. Die Verarbeitung in Backlogs oder auf Kanban­Boards wird so leichter.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nicht alle Qualitätsszenarien erfordern das gleiche Maß an Architekturarbeit. Manche Szenarien müssen früh entschieden und breit kommuniziert werden, andere müssen mit Funktionalität gemeinsam betrachtet werden. Durch die Kategorisierung von Szenarien sind Abhängigkeiten zwischen Qualität und Funktionalität handhabbar und der Bearbeitungsauf­ wand sinkt. Nur architekturrelevante Szenarien werden später als eigene Aufgaben definiert, der Rest wird direkt mit Umsetzungsaufgaben verwoben. Die Verarbeitung in Backlogs oder auf Kanban­Boards wird so leichter.",
      "id": [
        "139748"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139749]\nBild 3.8 zeigt die drei Kategorien für Qualitätsszenarien: Akzeptanzkriterien, Qualitäts­geschichten und allgemeine Merker. Während sich Akzeptanzkriterien direkt auf einzelne funktionale Anforderungen beziehen, sind Szenarien der anderen beiden Kategorien unabhängig zu handhaben. Qualitätsgeschichten können relativ losgelöst von funktionalen Anforderungen bearbeitet werden, allgemeine Merker können nur durch Regeln oder Prin­zipien bearbeitet werden, an die sich viele bis alle Entwickler halten. Die Definition dieser Regeln kann wiederum als Qualitätsgeschichte gesehen werden. Mit der Regel alleine ist ein allgemeiner Merker allerdings noch nicht umgesetzt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bild 3.8 zeigt die drei Kategorien für Qualitätsszenarien: Akzeptanzkriterien, Qualitäts­geschichten und allgemeine Merker. Während sich Akzeptanzkriterien direkt auf einzelne funktionale Anforderungen beziehen, sind Szenarien der anderen beiden Kategorien unabhängig zu handhaben. Qualitätsgeschichten können relativ losgelöst von funktionalen Anforderungen bearbeitet werden, allgemeine Merker können nur durch Regeln oder Prin­zipien bearbeitet werden, an die sich viele bis alle Entwickler halten. Die Definition dieser Regeln kann wiederum als Qualitätsgeschichte gesehen werden. Mit der Regel alleine ist ein allgemeiner Merker allerdings noch nicht umgesetzt.",
      "id": [
        "139749"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139750]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_13.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139750"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_13.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139751]\nLassen Sie uns die grob beschriebenen Kategorien etwas genauer fassen:\n\n• **Akzeptanzkriterien** sind direkte Erweiterungen von funktionalen Anforderungen und werden z. B. auf der Rückseite einer Story­Karte notiert (siehe Abschnitt 3.6). Sie eignen sich vor allem für Qualitäten, die der Benutzer bei der Ausführung genau dieser Funk­tionalität auch spürt: Benutzbarkeit, Performanz etc. Akzeptanzkriterien können auch ad­hoc gefunden werden, wenn funktionale Anforderungen analysiert oder verfeinert werden (siehe Anforderungspflege­Workshops → Abschnitt 3.2). Sie führen meist nicht zu grundlegenden Architekturfragen.\n\n• **Qualitätsgeschichten** sind Anforderungen, die weitgehend unabhängig von einzelnen funktionalen Anforderungen sind (wie z. B. Skalierbarkeit und Verfügbarkeit) und eigen­ständig bearbeitet werden können. Soll eine Webseite eine hohe Verfügbarkeit haben, sind die Erkennung von Serverausfällen, Redundanz von Systemteilen und Diensten, Replizie­rungs­- und Rollbackmechanismen oder Monitoringlösungen zu schaffen. Würde man nur nach Akzeptanzkriterien suchen, würden diese Aspekte leicht übersehen.\n\n• **Allgemeine Merker** sind omnipräsente Erinnerungen für die Projektmitarbeiter. Sie wer­den verwendet, um anzuwendende Prinzipien oder definierte Regeln zu kommunizieren. In agilen Projekten bietet es sich an, hierfür auch einen Vermerk in der Definition of Done\nzu setzen. Wartbarkeit, Portierbarkeit oder Sicherheit sind typische Qualitätsmerkmale, die diese Art der Behandlung nach sich ziehen. Anders als bei der Qualitätsgeschichte ist die eigentliche Entscheidung relativ einfach, wie z. B. ein Verbot der Verwendung von Bibliothek XY wegen Sicherheitsbedenken. Die Umsetzung der Entscheidung erfolgt jedoch erst durch die breite Beachtung vieler bis aller Projektmitglieder.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Lassen Sie uns die grob beschriebenen Kategorien etwas genauer fassen:\n\n• **Akzeptanzkriterien** sind direkte Erweiterungen von funktionalen Anforderungen und werden z. B. auf der Rückseite einer Story­Karte notiert (siehe Abschnitt 3.6). Sie eignen sich vor allem für Qualitäten, die der Benutzer bei der Ausführung genau dieser Funk­tionalität auch spürt: Benutzbarkeit, Performanz etc. Akzeptanzkriterien können auch ad­hoc gefunden werden, wenn funktionale Anforderungen analysiert oder verfeinert werden (siehe Anforderungspflege­Workshops → Abschnitt 3.2). Sie führen meist nicht zu grundlegenden Architekturfragen.\n\n• **Qualitätsgeschichten** sind Anforderungen, die weitgehend unabhängig von einzelnen funktionalen Anforderungen sind (wie z. B. Skalierbarkeit und Verfügbarkeit) und eigen­ständig bearbeitet werden können. Soll eine Webseite eine hohe Verfügbarkeit haben, sind die Erkennung von Serverausfällen, Redundanz von Systemteilen und Diensten, Replizie­rungs­- und Rollbackmechanismen oder Monitoringlösungen zu schaffen. Würde man nur nach Akzeptanzkriterien suchen, würden diese Aspekte leicht übersehen.\n\n• **Allgemeine Merker** sind omnipräsente Erinnerungen für die Projektmitarbeiter. Sie wer­den verwendet, um anzuwendende Prinzipien oder definierte Regeln zu kommunizieren. In agilen Projekten bietet es sich an, hierfür auch einen Vermerk in der Definition of Done\nzu setzen. Wartbarkeit, Portierbarkeit oder Sicherheit sind typische Qualitätsmerkmale, die diese Art der Behandlung nach sich ziehen. Anders als bei der Qualitätsgeschichte ist die eigentliche Entscheidung relativ einfach, wie z. B. ein Verbot der Verwendung von Bibliothek XY wegen Sicherheitsbedenken. Die Umsetzung der Entscheidung erfolgt jedoch erst durch die breite Beachtung vieler bis aller Projektmitglieder.",
      "id": [
        "139751"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139752]\nDie Vorteile der Kategorisierung liegen in der besseren Verarbeitbarkeit und der Transparenz, die geschaffen wird. Bearbeitenden Entwicklern ist klar, wie viel Architekturarbeit bei den Aufgaben zu erwarten ist, sie verstehen die Tragweite von resultierenden Entscheidungen und können Kommunikation und Abstimmungsaufwände entsprechend wählen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Vorteile der Kategorisierung liegen in der besseren Verarbeitbarkeit und der Transparenz, die geschaffen wird. Bearbeitenden Entwicklern ist klar, wie viel Architekturarbeit bei den Aufgaben zu erwarten ist, sie verstehen die Tragweite von resultierenden Entscheidungen und können Kommunikation und Abstimmungsaufwände entsprechend wählen.",
      "id": [
        "139752"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139753]\n::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Nehmen Sie die Kategorisierung als Basis, um Architekturaufgaben zu iden­ tifizieren, die Sie in einer von der Entwicklung getrennten Architekturgruppe entscheiden.\n• Ordnen Sie Szenarien immer eindeutig einer Kategorie zu und diskutieren Sie das im Zweifelsfall aus – auch wenn es viel Zeit kostet.\n• Glauben Sie fest daran, dass mit der Szenarioerhebung und der Kategorisierung qualitative Aspekte abschließend behandelt sind. Entbinden Sie Entwickler da­ von, mit Kunden zu sprechen oder weitere Überlegungen anzustellen.\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Nehmen Sie die Kategorisierung als Basis, um Architekturaufgaben zu iden­ tifizieren, die Sie in einer von der Entwicklung getrennten Architekturgruppe entscheiden.\n• Ordnen Sie Szenarien immer eindeutig einer Kategorie zu und diskutieren Sie das im Zweifelsfall aus – auch wenn es viel Zeit kostet.\n• Glauben Sie fest daran, dass mit der Szenarioerhebung und der Kategorisierung qualitative Aspekte abschließend behandelt sind. Entbinden Sie Entwickler da­ von, mit Kunden zu sprechen oder weitere Überlegungen anzustellen.\n::",
      "id": [
        "139753"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139754]\nDie Ergebnisse aus Szenarien als Architekturanforderungen (→ Abschnitt 3.3) werden in diesem Muster aufbereitet, um Architekturarbeit im Backlog (→ Abschnitt 3.6) oder Architekturarbeit auf Kanban (→ Abschnitt 3.7) effektiv zu speisen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Ergebnisse aus Szenarien als Architekturanforderungen (→ Abschnitt 3.3) werden in diesem Muster aufbereitet, um Architekturarbeit im Backlog (→ Abschnitt 3.6) oder Architekturarbeit auf Kanban (→ Abschnitt 3.7) effektiv zu speisen.",
      "id": [
        "139754"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139755]\nNeben der Übersetzung für die iterative Bearbeitung hilft die Kategorisierung dabei, Ar­chitekturaufgaben transparent zu machen. Gemeinsames Entscheiden (→ Abschnitt 5.2) ist einfacher zu leben, wenn die Beteiligten wissen, wie weittragend und risikoreich die Bearbeitung einzelner Anforderungen ist.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Neben der Übersetzung für die iterative Bearbeitung hilft die Kategorisierung dabei, Ar­chitekturaufgaben transparent zu machen. Gemeinsames Entscheiden (→ Abschnitt 5.2) ist einfacher zu leben, wenn die Beteiligten wissen, wie weittragend und risikoreich die Bearbeitung einzelner Anforderungen ist.",
      "id": [
        "139755"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139756]\nSchließlich hilft die Kategorie des allgemeinen Merkers noch bei der Identifizierung be­sonders dringender Szenarien und ist wichtiger Input, wenn Sie im Prinzip entscheiden (→ Abschnitt 4.7).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Schließlich hilft die Kategorie des allgemeinen Merkers noch bei der Identifizierung be­sonders dringender Szenarien und ist wichtiger Input, wenn Sie im Prinzip entscheiden (→ Abschnitt 4.7).",
      "id": [
        "139756"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:139757]\n[%3.5]\n[##Technische Schulden als Architekturanforderungen]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.5",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "139757"
      ],
      "title": "Technische Schulden als Architekturanforderungen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139758]\n__„Nicht die vor dir liegenden Berge, auf die Du klettern willst, machen dich fertig; es ist der Kieselstein in deinem Schuh.“5__\n– Muhammad Ali",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__„Nicht die vor dir liegenden Berge, auf die Du klettern willst, machen dich fertig; es ist der Kieselstein in deinem Schuh.“5__\n– Muhammad Ali",
      "id": [
        "139758"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139759]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_14.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139759"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_14.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139760]\n**Ben:** Das mit den Szenarien klappt ganz gut, aber wir haben immer noch Archi­ tekturarbeiten, die wir nicht priorisieren und planen können. Schlicht weil sie nicht gefordert sind, sondern einfach notwendig. Ich finde das nicht so schlimm, aber Axel sagt, auch diese Arbeiten gehören offen gelegt.\n**Michael:** Was heißt nicht gefordert, aber notwendig?\n**Ben:** Na, wir haben zum Beispiel dieses alte System zur Verwaltung der\nWerbeverträge. In Zukunft sollen dort auch geschaltete Anzeigen mit aufgeommen werden, aber alles, was wir mit dem System machen, ist ein Graus. Jede Änderung an Rabattmodellen kostet Aufwand und neue Geschichten wie Online­Anzeigen sind aufwendiger zu implementieren – weil wir teilweise mit Workarounds arbeiten müssen und der Altcode nicht mit Tests abgedeckt ist. Wir haben uns nun entschlossen, die Schnittstellen anzupassen, und wollten sie auch auf REST umstellen. Diese Arbeiten tauchen allerdings nirgendwo als Anfor­derung auf. Es handelt sich einfach um Altlasten, die wir mal anpacken müssen.\n**Tommy:** So etwas Ähnliches passiert aber auch bei Dingen, die wir gerade erst entwickeln. Ich habe letztens, kurz vor dem Release­Termin, den Abrechnungs­prozess umgesetzt. Weil zu wenig Zeit war, das ordentlich zu machen, habe ich einfach einen festen Ablauf vorgegeben. Das wird in Zukunft so nicht funktionie­ren. Eigentlich sollte da eine Eventing-­Lösung mit einer Liste an austauschbaren Kalkulationsbefehlen entstehen. Die müssen wir irgendwann noch bauen. Wann machen wir das? Je länger wir warten, desto schwieriger werden Anpassungen an dem fixen Ablauf. Ich glaube auch, ein paar Kollegen verlassen sich bereits darauf, dass das deterministisch bleibt ...\n**Michael:** O.k., das sind schon unterschiedliche Dinge. Das eine ist einfach ein Problem, das andere ist irgendwie geplant gewesen.\n**Ben:** So oder so müssen wir uns darum kümmern. Axel meinte, diese Dinge soll­ ten auch in den Backlog. Nur die Priorisierung ist schwierig – schließlich hat es für das Endprodukt ja keinen Wert.\n**Michael:** Hol doch mal Axel dazu, wenn er so gute Ideen hat.\n__Fünf Minuten später. Axel ist dazugekommen und kurz auf den aktuellen Stand der Diskussion gebracht worden. Seine Stellungnahme zu den Aufräumarbeiten oder Problembeseitigungen im Backlog ...__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Ben:** Das mit den Szenarien klappt ganz gut, aber wir haben immer noch Archi­ tekturarbeiten, die wir nicht priorisieren und planen können. Schlicht weil sie nicht gefordert sind, sondern einfach notwendig. Ich finde das nicht so schlimm, aber Axel sagt, auch diese Arbeiten gehören offen gelegt.\n**Michael:** Was heißt nicht gefordert, aber notwendig?\n**Ben:** Na, wir haben zum Beispiel dieses alte System zur Verwaltung der\nWerbeverträge. In Zukunft sollen dort auch geschaltete Anzeigen mit aufgeommen werden, aber alles, was wir mit dem System machen, ist ein Graus. Jede Änderung an Rabattmodellen kostet Aufwand und neue Geschichten wie Online­Anzeigen sind aufwendiger zu implementieren – weil wir teilweise mit Workarounds arbeiten müssen und der Altcode nicht mit Tests abgedeckt ist. Wir haben uns nun entschlossen, die Schnittstellen anzupassen, und wollten sie auch auf REST umstellen. Diese Arbeiten tauchen allerdings nirgendwo als Anfor­derung auf. Es handelt sich einfach um Altlasten, die wir mal anpacken müssen.\n**Tommy:** So etwas Ähnliches passiert aber auch bei Dingen, die wir gerade erst entwickeln. Ich habe letztens, kurz vor dem Release­Termin, den Abrechnungs­prozess umgesetzt. Weil zu wenig Zeit war, das ordentlich zu machen, habe ich einfach einen festen Ablauf vorgegeben. Das wird in Zukunft so nicht funktionie­ren. Eigentlich sollte da eine Eventing-­Lösung mit einer Liste an austauschbaren Kalkulationsbefehlen entstehen. Die müssen wir irgendwann noch bauen. Wann machen wir das? Je länger wir warten, desto schwieriger werden Anpassungen an dem fixen Ablauf. Ich glaube auch, ein paar Kollegen verlassen sich bereits darauf, dass das deterministisch bleibt ...\n**Michael:** O.k., das sind schon unterschiedliche Dinge. Das eine ist einfach ein Problem, das andere ist irgendwie geplant gewesen.\n**Ben:** So oder so müssen wir uns darum kümmern. Axel meinte, diese Dinge soll­ ten auch in den Backlog. Nur die Priorisierung ist schwierig – schließlich hat es für das Endprodukt ja keinen Wert.\n**Michael:** Hol doch mal Axel dazu, wenn er so gute Ideen hat.\n__Fünf Minuten später. Axel ist dazugekommen und kurz auf den aktuellen Stand der Diskussion gebracht worden. Seine Stellungnahme zu den Aufräumarbeiten oder Problembeseitigungen im Backlog ...__",
      "id": [
        "139760"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139761]\n**Axel:** Ja, sollten wir machen. Letztlich ist schon wichtig, dass auch sichtbar ist, woran wir arbeiten. Ob wir das Werbesystem ersetzen oder auf REST umbauen, ist wohl auch eine größere Entscheidung. Da müssten wir auch überlegen, wie die neue Lösung aussehen würde, was das kosten würde und ob sich das insge­samt lohnt. Das ist genauso zu priorisieren wie andere Architekturarbeiten, die durch Szenarien gefordert werden.\n**Ben:** Es ist doch aber sehr technisch und hat keinen echten Geschäftswert. \n**Axel:** Ich würde das wie technische Schulden betrachten.\n**Ben:** Aber das ist doch ein Implementierungskonzept ...\n**Axel:** Ich habe das letztens auch auf Architekturebene als Metapher gesehen. Im Prinzip ist es das Gleiche: Wir leben mit nicht perfekten Lösungen und unsere Arbeit wird dadurch teurer oder schwerer. Die Frage ist, ob diese laufenden Mehrkosten jene einer Schuldenbeseitigung übersteigen. Also machen wir eine grobe Schätzung, was uns die Anpassung des Werbesystems kosten würde, und vergleichen das mit den Kosten, die durch Mehraufwand und Workarounds ent­ stehen. Die Differenz ist der „Wert“ des Backlog­Eintrags. Das geht bei dem Ab­rechnungsprozess und der flexiblen Ausgestaltung genauso, Tommy. Da wird die flexible Lösung über die Zeit halt immer teurer – auch eine Art von Schuldenlast.\n**Ben:** Aber der Wert ist dann als nackte Zahl ausgedrückt. Wie soll das unser Kunde gegen wichtige Anforderungen priorisieren?\n**Tommy:** Wir könnten ja Szenarien definieren, die beschreiben, wie sich Verbes­serungen anfühlen würden. So etwas wie „Eine Veränderung im Rabattmodell ist in 10 Minuten erledigt“. Diese Szenarien kann Thorsten durchaus priorisieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Axel:** Ja, sollten wir machen. Letztlich ist schon wichtig, dass auch sichtbar ist, woran wir arbeiten. Ob wir das Werbesystem ersetzen oder auf REST umbauen, ist wohl auch eine größere Entscheidung. Da müssten wir auch überlegen, wie die neue Lösung aussehen würde, was das kosten würde und ob sich das insge­samt lohnt. Das ist genauso zu priorisieren wie andere Architekturarbeiten, die durch Szenarien gefordert werden.\n**Ben:** Es ist doch aber sehr technisch und hat keinen echten Geschäftswert. \n**Axel:** Ich würde das wie technische Schulden betrachten.\n**Ben:** Aber das ist doch ein Implementierungskonzept ...\n**Axel:** Ich habe das letztens auch auf Architekturebene als Metapher gesehen. Im Prinzip ist es das Gleiche: Wir leben mit nicht perfekten Lösungen und unsere Arbeit wird dadurch teurer oder schwerer. Die Frage ist, ob diese laufenden Mehrkosten jene einer Schuldenbeseitigung übersteigen. Also machen wir eine grobe Schätzung, was uns die Anpassung des Werbesystems kosten würde, und vergleichen das mit den Kosten, die durch Mehraufwand und Workarounds ent­ stehen. Die Differenz ist der „Wert“ des Backlog­Eintrags. Das geht bei dem Ab­rechnungsprozess und der flexiblen Ausgestaltung genauso, Tommy. Da wird die flexible Lösung über die Zeit halt immer teurer – auch eine Art von Schuldenlast.\n**Ben:** Aber der Wert ist dann als nackte Zahl ausgedrückt. Wie soll das unser Kunde gegen wichtige Anforderungen priorisieren?\n**Tommy:** Wir könnten ja Szenarien definieren, die beschreiben, wie sich Verbes­serungen anfühlen würden. So etwas wie „Eine Veränderung im Rabattmodell ist in 10 Minuten erledigt“. Diese Szenarien kann Thorsten durchaus priorisieren.",
      "id": [
        "139761"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139762]\nIhre Software ist bereits seit einiger Zeit in Entwicklung und Architekturarbeit wird zuneh­mend schwieriger. Mit Ihrem jetzigen Problemverständnis erkennen Sie Versäumnisse auf Architekturebene, merken, dass einige getroffene Annahmen sich als falsch herausstellen oder dass sich Inkonsistenzen eingeschlichen haben. Einige „schnelle Hacks“ sind schon recht lange unverändert im Programmcode und Ihnen fehlen Ansatzpunkte, um entsprechende Aufräumaktivitäten gegen neue fachliche Anforderungen zu priorisieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Ihre Software ist bereits seit einiger Zeit in Entwicklung und Architekturarbeit wird zuneh­mend schwieriger. Mit Ihrem jetzigen Problemverständnis erkennen Sie Versäumnisse auf Architekturebene, merken, dass einige getroffene Annahmen sich als falsch herausstellen oder dass sich Inkonsistenzen eingeschlichen haben. Einige „schnelle Hacks“ sind schon recht lange unverändert im Programmcode und Ihnen fehlen Ansatzpunkte, um entsprechende Aufräumaktivitäten gegen neue fachliche Anforderungen zu priorisieren.",
      "id": [
        "139762"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139763]\n::info::\n**Problemstellung:**\n\nWie werden architektonische Probleme und Versäumnisse effizient, transparent und in die restliche Architekturentwicklung integriert behandelt?\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Problemstellung:**\n\nWie werden architektonische Probleme und Versäumnisse effizient, transparent und in die restliche Architekturentwicklung integriert behandelt?\n::",
      "id": [
        "139763"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139764]\nDie Metapher der technischen Schulden wurde erstmals 1992 von Ward Cunningham verwendet, um die Auswirkungen von gedankenloser, schneller Codierung zu illustrieren [Cun92]. Ohne Entwurfsüberlegungen und Tests werden Erweiterungen und Anpassungen schwieriger, die Software wird starr und unbeweglich. Die „schnelle Lösung“ wird also durch späteren Mehraufwand insgesamt vielleicht teurer. Technische Schulden werden oft auf Design­ und Entwicklungsebene betrachtet6, sind aber als Konzept viel breiter und gut auf Architekturversäumnisse anwendbar. Tatsächlich sind sich technische Schulden und Archi­tekturanforderungen nicht unähnlich. Wie Architekturanforderungen, können technische Schulden einen Bedarf an Architekturarbeit aufdecken. Das passiert allerdings zu einem Zeitpunkt, an dem bereits Umsetzungsarbeit geleistet wurde und die nötigen (Architektur­-) entscheidungen, bewusst oder unbewusst, verpasst wurden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Metapher der technischen Schulden wurde erstmals 1992 von Ward Cunningham verwendet, um die Auswirkungen von gedankenloser, schneller Codierung zu illustrieren [Cun92]. Ohne Entwurfsüberlegungen und Tests werden Erweiterungen und Anpassungen schwieriger, die Software wird starr und unbeweglich. Die „schnelle Lösung“ wird also durch späteren Mehraufwand insgesamt vielleicht teurer. Technische Schulden werden oft auf Design­ und Entwicklungsebene betrachtet6, sind aber als Konzept viel breiter und gut auf Architekturversäumnisse anwendbar. Tatsächlich sind sich technische Schulden und Archi­tekturanforderungen nicht unähnlich. Wie Architekturanforderungen, können technische Schulden einen Bedarf an Architekturarbeit aufdecken. Das passiert allerdings zu einem Zeitpunkt, an dem bereits Umsetzungsarbeit geleistet wurde und die nötigen (Architektur­-) entscheidungen, bewusst oder unbewusst, verpasst wurden.",
      "id": [
        "139764"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139765]\n::info::\n**Technische Schulden**\n\n__Entwurfs- und Konstruktionsansätze, die kurzfristig brauchbar sind, aber einen technischen Kontext schaffen, in dem die gleiche Arbeit später teurer ist als jetzt.__ – (McC11)\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Technische Schulden**\n\n__Entwurfs- und Konstruktionsansätze, die kurzfristig brauchbar sind, aber einen technischen Kontext schaffen, in dem die gleiche Arbeit später teurer ist als jetzt.__ – (McC11)\n::",
      "id": [
        "139765"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139766]\nTechnische Schulden sind ein bisschen wie das letzte Bier des Abends, das Ihnen für den Moment Spaß macht, die Arbeitsleistung am nächsten Tag jedoch relevant schmälert. Sie können diesen Kompromiss bewusst eingehen (etwa wenn in der Arbeit nichts Wichtiges ansteht), in manchen Fällen fällt die Entscheidung aber auch ungeplant. Etwa wenn Sie sich rücksichtslos an der Bar bedient haben und Ihnen der nächste Tag erst in den Sinn kommt, wenn der Wecker läutet und Ihr Kopf seltsam drückt. Tatsächlich hat Martin Fowler einen Quadranten für technische Schulden definiert, der diese Elemente aufgreift und auf die Softwareentwicklung überträgt (Fow09) (siehe Bild 3.9).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Technische Schulden sind ein bisschen wie das letzte Bier des Abends, das Ihnen für den Moment Spaß macht, die Arbeitsleistung am nächsten Tag jedoch relevant schmälert. Sie können diesen Kompromiss bewusst eingehen (etwa wenn in der Arbeit nichts Wichtiges ansteht), in manchen Fällen fällt die Entscheidung aber auch ungeplant. Etwa wenn Sie sich rücksichtslos an der Bar bedient haben und Ihnen der nächste Tag erst in den Sinn kommt, wenn der Wecker läutet und Ihr Kopf seltsam drückt. Tatsächlich hat Martin Fowler einen Quadranten für technische Schulden definiert, der diese Elemente aufgreift und auf die Softwareentwicklung überträgt (Fow09) (siehe Bild 3.9).",
      "id": [
        "139766"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139767]\nGegen „ungewollte“ technische Schulden hilft alleine die Kenntnis über technische Schulden schon etwas. Gepaart mit Architektur­ und Designverständnis sollte die Zelle unten links auszuschließen sein. Dass Sie ungewollt Schulden machen, obwohl Sie geplant vorgehen, kann und wird Ihnen trotzdem passieren –hinterher ist man immer schlauer und ein gutes Vorgehen kann nicht alles abfangen. In der Praxis ist es leider oft der Fall, dass in der Umset­zung Fragen oder Probleme auftauchen. Sie haben zu wenig Zeit, kennen die Anforderungen nicht genau genug, nicht alle Entwickler sind Meisterarchitekten oder Rahmenbedingungen ändern sich. Softwarelösungen und die zugrunde liegende Softwarearchitektur sind deshalb nie perfekt. Gehen Sie mit den späten Erkenntnissen, wie man es hätte machen sollen, geplant um (siehe „Umgang mit technischen Schulden“ auf S. 56).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Gegen „ungewollte“ technische Schulden hilft alleine die Kenntnis über technische Schulden schon etwas. Gepaart mit Architektur­ und Designverständnis sollte die Zelle unten links auszuschließen sein. Dass Sie ungewollt Schulden machen, obwohl Sie geplant vorgehen, kann und wird Ihnen trotzdem passieren –hinterher ist man immer schlauer und ein gutes Vorgehen kann nicht alles abfangen. In der Praxis ist es leider oft der Fall, dass in der Umset­zung Fragen oder Probleme auftauchen. Sie haben zu wenig Zeit, kennen die Anforderungen nicht genau genug, nicht alle Entwickler sind Meisterarchitekten oder Rahmenbedingungen ändern sich. Softwarelösungen und die zugrunde liegende Softwarearchitektur sind deshalb nie perfekt. Gehen Sie mit den späten Erkenntnissen, wie man es hätte machen sollen, geplant um (siehe „Umgang mit technischen Schulden“ auf S. 56).",
      "id": [
        "139767"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139768]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_15.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139768"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_15.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139769]\nIn der „bewussten“ Zeile grenzt der rücksichtslose Umgang mit technischen Schulden an Fahrlässigkeit, aber die geplante Aufnahme von Schulden (oben rechts) ist spannend: Sie können unter bestimmten Umständen willentlich Schulden aufnehmen und damit Ihrem Vorhaben helfen. Etwa wenn Sie knapp vor Releases stehen, um schneller zu einer testba­ren Version zu kommen, oder bei Unsicherheiten bezüglich der architektonisch „richtigen“ Lösung. Auch der (temporäre) Verzicht auf eine saubere Architektur gehört manchmal zu guter Architekturarbeit.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In der „bewussten“ Zeile grenzt der rücksichtslose Umgang mit technischen Schulden an Fahrlässigkeit, aber die geplante Aufnahme von Schulden (oben rechts) ist spannend: Sie können unter bestimmten Umständen willentlich Schulden aufnehmen und damit Ihrem Vorhaben helfen. Etwa wenn Sie knapp vor Releases stehen, um schneller zu einer testba­ren Version zu kommen, oder bei Unsicherheiten bezüglich der architektonisch „richtigen“ Lösung. Auch der (temporäre) Verzicht auf eine saubere Architektur gehört manchmal zu guter Architekturarbeit.",
      "id": [
        "139769"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139770]\n**Arten von technischen Schulden**\n\nNun, da technische Schulden als etwas etabliert sind, was jedes System hat, ist ein Blick auf die Arten und die Behandlung von Schulden angebracht. Technische Schulden können auf mehreren Ebenen eingegangen werden (angelehnt an [McC07]):\n\n• **Code:**\nVerstöße gegen Codierrichtlinien, Code­Smells\n• **Architektur:**\ndie (falsche) Wahl von Komponenten, Frameworks, Technologien etc.\n• **Test:**\nfehlende, behindernde oder unfokussierte Tests (auf System­ und Unit­Ebene)",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Arten von technischen Schulden**\n\nNun, da technische Schulden als etwas etabliert sind, was jedes System hat, ist ein Blick auf die Arten und die Behandlung von Schulden angebracht. Technische Schulden können auf mehreren Ebenen eingegangen werden (angelehnt an [McC07]):\n\n• **Code:**\nVerstöße gegen Codierrichtlinien, Code­Smells\n• **Architektur:**\ndie (falsche) Wahl von Komponenten, Frameworks, Technologien etc.\n• **Test:**\nfehlende, behindernde oder unfokussierte Tests (auf System­ und Unit­Ebene)",
      "id": [
        "139770"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139771]\nAuf Codeebene sind technische Schulden eine feste Größe und relativ gut verstanden. Code­-Smells sorgen für eine verringerte Geschwindigkeit bei der Entwicklung und damit für eine stetige Schuldenlast bis der Geruch behoben ist. Meist versucht man, Codeschulden bereits während der initialen Entwicklung zu verhindern, indem man testet, refactored und Standard­prinzipien (z.B. aus Clean Code 4 [Mar08]) gehorcht.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Auf Codeebene sind technische Schulden eine feste Größe und relativ gut verstanden. Code­-Smells sorgen für eine verringerte Geschwindigkeit bei der Entwicklung und damit für eine stetige Schuldenlast bis der Geruch behoben ist. Meist versucht man, Codeschulden bereits während der initialen Entwicklung zu verhindern, indem man testet, refactored und Standard­prinzipien (z.B. aus Clean Code 4 [Mar08]) gehorcht.",
      "id": [
        "139771"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139772]\nAuf Architekturebene ist der Begriff der technischen Schulden weniger stark etabliert, aber keineswegs weniger wertvoll8. Nicht optimal getroffene Architekturentscheidungen, nicht ein­gehaltene oder verwässerte Architekturkonzepte, fehlende Prinzipien oder größere technische Versäumnisse führen zu einer Schuldenlast. Diese Schuldenlast tragen Sie teilweise, genau wie Codeschulden, stetig (verwässerte Architektur und Inkonsistenzen), teilweise zeigen sich Architekturschulden, indem die Herstellung einer letztendlich brauchbaren Lösung immer teurer wird. Arbeiten Sie momentan etwa auf einer Systemkonfiguration, die unpassend für den Produktionsbetrieb ist, können Sie weiterhin Funktionalität entwickeln oder auch nicht funktionale Tests durchführen – je später Sie aber die tatsächlich nötige Umgebung wechseln, desto teurer wird der Umstieg (alleine weil die Menge an zu übertragenden Artefakten höher ist). Die Schulden steigen also „im Stillen“. Ähnlich verhält es sich mit halbherzig getroffe­nen Entscheidungen wie die Idee, Portierbarkeitsanforderungen alleine durch den Einsatz von Java vollständig gelöst zu haben. Allgemein können die folgenden Probleme technische Schulden auf Architekturebene anzeigen:\n\n• Inkonsistenzen\n• Redundanzen\n• unrealistische Lösungen (unpassend zu aktuellen Qualitätsmerkmalen oder Rahmen­bedingungen)\n• Trivialaufwände (Stellen, die viel triviale Arbeit erfordern)\n• Sonderlösungen\n• fehlende Richtlinien (leitende Prinzipien oder rahmengebende Entscheidungen)\n• fehlender Überbau (allgemeine Lösungen, Frameworks, Kommunikationsinfrastruktur etc.)",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Auf Architekturebene ist der Begriff der technischen Schulden weniger stark etabliert, aber keineswegs weniger wertvoll8. Nicht optimal getroffene Architekturentscheidungen, nicht ein­gehaltene oder verwässerte Architekturkonzepte, fehlende Prinzipien oder größere technische Versäumnisse führen zu einer Schuldenlast. Diese Schuldenlast tragen Sie teilweise, genau wie Codeschulden, stetig (verwässerte Architektur und Inkonsistenzen), teilweise zeigen sich Architekturschulden, indem die Herstellung einer letztendlich brauchbaren Lösung immer teurer wird. Arbeiten Sie momentan etwa auf einer Systemkonfiguration, die unpassend für den Produktionsbetrieb ist, können Sie weiterhin Funktionalität entwickeln oder auch nicht funktionale Tests durchführen – je später Sie aber die tatsächlich nötige Umgebung wechseln, desto teurer wird der Umstieg (alleine weil die Menge an zu übertragenden Artefakten höher ist). Die Schulden steigen also „im Stillen“. Ähnlich verhält es sich mit halbherzig getroffe­nen Entscheidungen wie die Idee, Portierbarkeitsanforderungen alleine durch den Einsatz von Java vollständig gelöst zu haben. Allgemein können die folgenden Probleme technische Schulden auf Architekturebene anzeigen:\n\n• Inkonsistenzen\n• Redundanzen\n• unrealistische Lösungen (unpassend zu aktuellen Qualitätsmerkmalen oder Rahmen­bedingungen)\n• Trivialaufwände (Stellen, die viel triviale Arbeit erfordern)\n• Sonderlösungen\n• fehlende Richtlinien (leitende Prinzipien oder rahmengebende Entscheidungen)\n• fehlender Überbau (allgemeine Lösungen, Frameworks, Kommunikationsinfrastruktur etc.)",
      "id": [
        "139772"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139773]\n**Umgang mit technischen (Architektur-)Schulden**\n\nTechnische Schulden haben negative Auswirkungen auf die Produktivität in der Softwareent­wicklung. Schulden auf Architekturebene wären etwa Inkonsistenzen, ein fehlender Archi­tekturrahmen oder komplizierte Konzepte und Ideen. Schlechte Verständlichkeit, redundante Entwurfsarbeit und „nicht gelebte“ Architektur sind die Folge. Architektonische Schulden entstehen auch bei Entscheidungen, die wichtige Qualitätsmerkmale oder Rahmenbedingun­gen unberücksichtigt lassen. Hier kommt es teilweise zu massiven Rückschlägen in späteren Entwicklungsphasen. Die verringerte Produktivität sorgt meist für noch mehr Zeitdruck, was zu neuen technischen Schulden führt – eine Spirale, die Sie nur durch den geplanten Umgang mit Schulden aufhalten können (siehe rechte Spalte in Bild 3.9). Suchen Sie deshalb aktiv nach ungewollten Schulden und gehen Sie architektonische Schulden nur bewusst ein, wenn es sich rechnet, etwa zur Risikominderung, für kurzfristig höhere Stabilität und bei vertretbarer Schuldenlast. Bild 3.10 zeigt den Umgang mit technischen Schulden im Überblick.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Umgang mit technischen (Architektur-)Schulden**\n\nTechnische Schulden haben negative Auswirkungen auf die Produktivität in der Softwareent­wicklung. Schulden auf Architekturebene wären etwa Inkonsistenzen, ein fehlender Archi­tekturrahmen oder komplizierte Konzepte und Ideen. Schlechte Verständlichkeit, redundante Entwurfsarbeit und „nicht gelebte“ Architektur sind die Folge. Architektonische Schulden entstehen auch bei Entscheidungen, die wichtige Qualitätsmerkmale oder Rahmenbedingun­gen unberücksichtigt lassen. Hier kommt es teilweise zu massiven Rückschlägen in späteren Entwicklungsphasen. Die verringerte Produktivität sorgt meist für noch mehr Zeitdruck, was zu neuen technischen Schulden führt – eine Spirale, die Sie nur durch den geplanten Umgang mit Schulden aufhalten können (siehe rechte Spalte in Bild 3.9). Suchen Sie deshalb aktiv nach ungewollten Schulden und gehen Sie architektonische Schulden nur bewusst ein, wenn es sich rechnet, etwa zur Risikominderung, für kurzfristig höhere Stabilität und bei vertretbarer Schuldenlast. Bild 3.10 zeigt den Umgang mit technischen Schulden im Überblick.",
      "id": [
        "139773"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139774]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_16.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139774"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_16.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139775]\nDie Suche nach technischen Schulden sollte stetig und durch alle Entwickler erfolgen. Zu­sätzlich helfen manchmal Workshops, um etwas Abstand zu gewinnen und die Lösung aus unterschiedlichen Perspektiven zu durchleuchten:\n\n• Die **stetige** Suche nach technischen Schulden erfordert entsprechendes Wissen und Bewusstsein bei allen Entwicklern. Achten Sie darauf, (1) wo Sie aufwendiger als nötig arbeiten müssen, (2) wo Lösungen unrealistisch für den finalen Ausbau des Systems sind, (3) wo Inkonsistenzen zu beobachten sind oder (4) wo Ihnen Leitlinien für Entscheidung, Entwurf oder Codierung fehlen. Halten Sie Ausschau nach (5) alten, nicht mehr gewarteten oder unterstützten Fremdbibliotheken oder Frameworks, analysieren Sie (6) die Ursache von Produktionsproblemen und (7) den Grund für Produktivitätseinbrüche in der Entwicklung (z. B. fallende Velocity in Scrum­Teams). In manchen Bereichen helfen auch (8) Metriken und Messungen, die z. B. Komplexität, Größe und Abhängigkeiten überwachen (siehe Abschnitt 6.4).\n\n• **Gezielte Workshops** helfen dabei, Überblick zu gewinnen und kurzfristig aus dem Fluss der Entwicklung auszubrechen. Diese kurzen Treffen funktionieren am besten, wenn Sie verschiedene Ansätze nutzen, um technische Schulden zu identifizieren: Nutzen Sie Brainstormings, um bottom­up wichtige Schuldenbereiche zu identifizieren. Stellen Sie für die Top­Down Suche wichtige Qualitätsanforderungen in den Raum und identifizieren Sie behindernde oder widersprechende Architekturlösungen. Suchen Sie aktiv nach Inkonsis­tenzen in Konzepten und Entwürfen oder stellen Sie kürzlich getroffene Architekturentschei­dungen kurz vor, um sie vor dem Hintergrund von technischen Schulden zu diskutieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Suche nach technischen Schulden sollte stetig und durch alle Entwickler erfolgen. Zu­sätzlich helfen manchmal Workshops, um etwas Abstand zu gewinnen und die Lösung aus unterschiedlichen Perspektiven zu durchleuchten:\n\n• Die **stetige** Suche nach technischen Schulden erfordert entsprechendes Wissen und Bewusstsein bei allen Entwicklern. Achten Sie darauf, (1) wo Sie aufwendiger als nötig arbeiten müssen, (2) wo Lösungen unrealistisch für den finalen Ausbau des Systems sind, (3) wo Inkonsistenzen zu beobachten sind oder (4) wo Ihnen Leitlinien für Entscheidung, Entwurf oder Codierung fehlen. Halten Sie Ausschau nach (5) alten, nicht mehr gewarteten oder unterstützten Fremdbibliotheken oder Frameworks, analysieren Sie (6) die Ursache von Produktionsproblemen und (7) den Grund für Produktivitätseinbrüche in der Entwicklung (z. B. fallende Velocity in Scrum­Teams). In manchen Bereichen helfen auch (8) Metriken und Messungen, die z. B. Komplexität, Größe und Abhängigkeiten überwachen (siehe Abschnitt 6.4).\n\n• **Gezielte Workshops** helfen dabei, Überblick zu gewinnen und kurzfristig aus dem Fluss der Entwicklung auszubrechen. Diese kurzen Treffen funktionieren am besten, wenn Sie verschiedene Ansätze nutzen, um technische Schulden zu identifizieren: Nutzen Sie Brainstormings, um bottom­up wichtige Schuldenbereiche zu identifizieren. Stellen Sie für die Top­Down Suche wichtige Qualitätsanforderungen in den Raum und identifizieren Sie behindernde oder widersprechende Architekturlösungen. Suchen Sie aktiv nach Inkonsis­tenzen in Konzepten und Entwürfen oder stellen Sie kürzlich getroffene Architekturentschei­dungen kurz vor, um sie vor dem Hintergrund von technischen Schulden zu diskutieren.",
      "id": [
        "139775"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139776]\nWenn Sie technische Schulden finden, sollten Sie sie so einfach wie möglich festhalten. Es muss schnell gehen, darf nicht behindern und soll trotzdem nachvollziehbar sein. Das geht am einfachsten, indem Sie das Problem und den Teil der Lösung, den es betrifft („behindert bei“), festhalten. Ein Beispiel, um zu untermauern, wie einfach es gehen sollte: Sie stolpern beim Design eines neuen DTOs9 darüber, dass bereits existierende DTOs sehr unterschiedliche Granularität haben, sie Daten anders aggregieren und Zugriffsfunktionen nicht einheitlich benannt sind. Sie könnten das __Problem__ als „Inkonsistenz“ oder „Uneinheitlichkeit“ festhalten. Fragen Sie sich nun, wobei Sie dieses Problem behindert oder welche Tätigkeiten eingeschränkt werden („behindert bei ...“). In unserem Fall wäre das zumindest das Design neuer DTOs. Sie können also sehr grob festhalten: „Uneinheitlichkeit behindert das DTO­Design“. Achten Sie auch darauf, dass Sie das Medium, in dem Sie technische Schulden festhalten, nicht behindert. Nutzen Sie immer zugreifbare, einfache Werkzeuge wie Post­-Its, Mindmaps oder mit anderen Entwicklern geteilte Evernote-Notizen. In Bild 3.10 wird dieses Verzeichnis von technischen Schulden kurz „Schuldenliste“ genannt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wenn Sie technische Schulden finden, sollten Sie sie so einfach wie möglich festhalten. Es muss schnell gehen, darf nicht behindern und soll trotzdem nachvollziehbar sein. Das geht am einfachsten, indem Sie das Problem und den Teil der Lösung, den es betrifft („behindert bei“), festhalten. Ein Beispiel, um zu untermauern, wie einfach es gehen sollte: Sie stolpern beim Design eines neuen DTOs9 darüber, dass bereits existierende DTOs sehr unterschiedliche Granularität haben, sie Daten anders aggregieren und Zugriffsfunktionen nicht einheitlich benannt sind. Sie könnten das __Problem__ als „Inkonsistenz“ oder „Uneinheitlichkeit“ festhalten. Fragen Sie sich nun, wobei Sie dieses Problem behindert oder welche Tätigkeiten eingeschränkt werden („behindert bei ...“). In unserem Fall wäre das zumindest das Design neuer DTOs. Sie können also sehr grob festhalten: „Uneinheitlichkeit behindert das DTO­Design“. Achten Sie auch darauf, dass Sie das Medium, in dem Sie technische Schulden festhalten, nicht behindert. Nutzen Sie immer zugreifbare, einfache Werkzeuge wie Post­-Its, Mindmaps oder mit anderen Entwicklern geteilte Evernote-Notizen. In Bild 3.10 wird dieses Verzeichnis von technischen Schulden kurz „Schuldenliste“ genannt.",
      "id": [
        "139776"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139777]\nNicht alle gefundenen technischen Schulden verdienen eine Behandlung. Sie haben drei Handlungsoptionen [Bus11]:\n\n• **Schuldenfortzahlung:**\nSie bearbeiten das Problem nicht weiter, sondern akzeptieren es (Null­Entscheidung).\n• **Schuldenrückzahlung:**\nSie beseitigen die Schuld durch Umstrukturierungen, Migration, Portierung etc.\n• **Umschuldung:**\nSie ersetzen die momentane Lösung durch eine gute, aber nicht perfekte Lösung, die eine geringere Schuldenlast verursacht (aber billiger ist als die komplette Schuldenrückzahlung).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nicht alle gefundenen technischen Schulden verdienen eine Behandlung. Sie haben drei Handlungsoptionen [Bus11]:\n\n• **Schuldenfortzahlung:**\nSie bearbeiten das Problem nicht weiter, sondern akzeptieren es (Null­Entscheidung).\n• **Schuldenrückzahlung:**\nSie beseitigen die Schuld durch Umstrukturierungen, Migration, Portierung etc.\n• **Umschuldung:**\nSie ersetzen die momentane Lösung durch eine gute, aber nicht perfekte Lösung, die eine geringere Schuldenlast verursacht (aber billiger ist als die komplette Schuldenrückzahlung).",
      "id": [
        "139777"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139778]\nEntscheidend ist die Schuldenlast (wie viel kostet das uneinheitliche Design von DTOs?) im Vergleich zu den Beseitigungs­ oder Minderungskosten (was kostet der Entwurf einer einheit­lichen Lösung und das Refactoring der bestehenden DTOs bzw. verarbeitenden Methoden?). Eine __Schuldenfortzahlung__ ist die richtige Option, wenn das Problem in weniger wichtigen oder sehr stabilen Systemteilen auftaucht oder die Schulden selten und im geringen Umfang schmerzen (das „behindert bei“ ist weniger relevant). Die Bearbeitungskosten würden die Schuldenlast in diesen Fällen übersteigen und Sie können Ihr System nicht in allen Bereichen perfekt aufstellen (vgl. __Strategic Design__ [Eva03]).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Entscheidend ist die Schuldenlast (wie viel kostet das uneinheitliche Design von DTOs?) im Vergleich zu den Beseitigungs­ oder Minderungskosten (was kostet der Entwurf einer einheit­lichen Lösung und das Refactoring der bestehenden DTOs bzw. verarbeitenden Methoden?). Eine __Schuldenfortzahlung__ ist die richtige Option, wenn das Problem in weniger wichtigen oder sehr stabilen Systemteilen auftaucht oder die Schulden selten und im geringen Umfang schmerzen (das „behindert bei“ ist weniger relevant). Die Bearbeitungskosten würden die Schuldenlast in diesen Fällen übersteigen und Sie können Ihr System nicht in allen Bereichen perfekt aufstellen (vgl. __Strategic Design__ [Eva03]).",
      "id": [
        "139778"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139779]\nWo die Schuldenlast höher ist oder öfter zum Tragen kommt, lohnt sich die Bearbeitung. Bei der __Umschuldung__ erarbeiten Sie eine Lösung, die nicht alle Schulden beseitigt, aber wenigstens mindert. Sie stellen etwa nicht alle DTOs um, sondern Sie entwickeln einfach eine Vorgabe für zukünftig entwickelte DTOs und verhindern so zumindest, dass sich das Problem ausweitet. Die vollständige __Schuldenrückzahlung__ ist an zentralen Stellen oder bei im weiteren Verlauf markant steigenden Kosten angebracht. Im Prinzip ist es eine ökonomische Entscheidung, die Sie hier treffen. Wandern Sie regelmäßig über die gefundenen technischen Schulden und schätzen Sie grob ab, ob die Schuldenlast die Bearbeitungskosten übersteigt. Wo sich die Bearbeitung lohnt, sind zwei Schritte wichtig:\n\n• **Schulden fachlich ausdrücken:**\nDefinieren Sie die Schuldenlast in Form von Szenarien, die fachliche Ansprechpartner verstehen (grob gesprochen drücken Sie das „behindert bei“ in Szenarien aus). Im DTO­ Beispiel könnten Sie Szenarien beschreiben, die Änderungen an transportierten Daten, die Entwicklung neuer Funktionalität (inkl. neuer DTOs) oder die spätere Wartung des Systems als Auslöser haben und zeigen, wie ein Redesign diese Tätigkeiten vereinfachen würde. Das Maß der Szenarien wäre die Einarbeitungszeit eines Entwicklers, die Zeit von Anforderung bis Auslieferung oder der Bearbeitungsaufwand – und zwar bei Behandlung und __Nicht-Behandlung__ der Schuld10. Ich nenne diese Szenarien mit zwei Maßen gerne „Delta-Szenarien“, weil sie die zu erwartende Verbesserung oder Veränderung greifbar machen. So kann ein fachlicher Ansprechpartner entscheiden, wie schwerwiegend das Problem ist, und es gegen bestehende Anforderungen priorisieren.\n\n• **Dringlichkeit bestimmen:**\nTechnische Schulden unterscheiden sich darin, wie rasch sich Schuldenlast oder Behebungs­kosten über die Zeit erhöhen. Im DTO­Beispiel werden neu zu entwickelnde DTOs, ohne Konsolidierung, die zukünftigen Behebungskosten steigern. Die Schuldenlast hat hingegen hauptsächlich mit Verständlichkeit und Veränderungen an einzelnen DTOs zu tun und wird sich bei einer späteren Bearbeitung nicht deutlich steigern. Die Dringlichkeit würde ich somit als moderat bezeichnen, falls nicht 90 % aller DTOs noch zu entwickeln sind.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wo die Schuldenlast höher ist oder öfter zum Tragen kommt, lohnt sich die Bearbeitung. Bei der __Umschuldung__ erarbeiten Sie eine Lösung, die nicht alle Schulden beseitigt, aber wenigstens mindert. Sie stellen etwa nicht alle DTOs um, sondern Sie entwickeln einfach eine Vorgabe für zukünftig entwickelte DTOs und verhindern so zumindest, dass sich das Problem ausweitet. Die vollständige __Schuldenrückzahlung__ ist an zentralen Stellen oder bei im weiteren Verlauf markant steigenden Kosten angebracht. Im Prinzip ist es eine ökonomische Entscheidung, die Sie hier treffen. Wandern Sie regelmäßig über die gefundenen technischen Schulden und schätzen Sie grob ab, ob die Schuldenlast die Bearbeitungskosten übersteigt. Wo sich die Bearbeitung lohnt, sind zwei Schritte wichtig:\n\n• **Schulden fachlich ausdrücken:**\nDefinieren Sie die Schuldenlast in Form von Szenarien, die fachliche Ansprechpartner verstehen (grob gesprochen drücken Sie das „behindert bei“ in Szenarien aus). Im DTO­ Beispiel könnten Sie Szenarien beschreiben, die Änderungen an transportierten Daten, die Entwicklung neuer Funktionalität (inkl. neuer DTOs) oder die spätere Wartung des Systems als Auslöser haben und zeigen, wie ein Redesign diese Tätigkeiten vereinfachen würde. Das Maß der Szenarien wäre die Einarbeitungszeit eines Entwicklers, die Zeit von Anforderung bis Auslieferung oder der Bearbeitungsaufwand – und zwar bei Behandlung und __Nicht-Behandlung__ der Schuld10. Ich nenne diese Szenarien mit zwei Maßen gerne „Delta-Szenarien“, weil sie die zu erwartende Verbesserung oder Veränderung greifbar machen. So kann ein fachlicher Ansprechpartner entscheiden, wie schwerwiegend das Problem ist, und es gegen bestehende Anforderungen priorisieren.\n\n• **Dringlichkeit bestimmen:**\nTechnische Schulden unterscheiden sich darin, wie rasch sich Schuldenlast oder Behebungs­kosten über die Zeit erhöhen. Im DTO­Beispiel werden neu zu entwickelnde DTOs, ohne Konsolidierung, die zukünftigen Behebungskosten steigern. Die Schuldenlast hat hingegen hauptsächlich mit Verständlichkeit und Veränderungen an einzelnen DTOs zu tun und wird sich bei einer späteren Bearbeitung nicht deutlich steigern. Die Dringlichkeit würde ich somit als moderat bezeichnen, falls nicht 90 % aller DTOs noch zu entwickeln sind.",
      "id": [
        "139779"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139780]\nMit der fachlichen Sicht auf die technische Schuld und der untersuchten Dringlichkeit steht einer Ablage im Backlog oder auf einer Kanban­Tafel nichts mehr im Wege (siehe Abschnitte 3.6 und 3.7).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Mit der fachlichen Sicht auf die technische Schuld und der untersuchten Dringlichkeit steht einer Ablage im Backlog oder auf einer Kanban­Tafel nichts mehr im Wege (siehe Abschnitte 3.6 und 3.7).",
      "id": [
        "139780"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139781]\n::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Beheben Sie alle technischen Schulden sofort! Sie können die gesamte Codebasis in den Zero­-Debt­-Bereich führen! Sie müssen nur ausreichend motiviert sein!\n• Tun Sie technische Schulden als Einmal­Fehler ab und vermeiden Sie die Suche nach Ursachen. Das kostet nur Zeit. Streichen Sie das Wort „Lernchance“ aus Ihrem Vokabular.\n• Formulieren Sie technische Schulden rein technisch und behandeln Sie sie\nvöllig getrennt von Anforderungen. Ihr Kunde versteht das alles sowieso nicht.\n• Wenn Sie technische Schulden beseitigen, sorgen Sie immer für die vollständige Schuldenrückzahlung – kostengünstige Minderungsstrategien fallen Ihnen hin­terher doch nur wieder auf den Kopf.\n• Glauben Sie fest daran, mit gutem Vorgehen jeglichen Schulden auf Architektur­ ebene vorzubeugen. Die Suche erübrigt sich somit.\n• Weisen Sie gefundenen Schulden immer Entwicklernamen zu. Wenn Sie die Schuldigen nicht benennen, lernen diese es nie!\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Beheben Sie alle technischen Schulden sofort! Sie können die gesamte Codebasis in den Zero­-Debt­-Bereich führen! Sie müssen nur ausreichend motiviert sein!\n• Tun Sie technische Schulden als Einmal­Fehler ab und vermeiden Sie die Suche nach Ursachen. Das kostet nur Zeit. Streichen Sie das Wort „Lernchance“ aus Ihrem Vokabular.\n• Formulieren Sie technische Schulden rein technisch und behandeln Sie sie\nvöllig getrennt von Anforderungen. Ihr Kunde versteht das alles sowieso nicht.\n• Wenn Sie technische Schulden beseitigen, sorgen Sie immer für die vollständige Schuldenrückzahlung – kostengünstige Minderungsstrategien fallen Ihnen hin­terher doch nur wieder auf den Kopf.\n• Glauben Sie fest daran, mit gutem Vorgehen jeglichen Schulden auf Architektur­ ebene vorzubeugen. Die Suche erübrigt sich somit.\n• Weisen Sie gefundenen Schulden immer Entwicklernamen zu. Wenn Sie die Schuldigen nicht benennen, lernen diese es nie!\n::",
      "id": [
        "139781"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139782]\nTechnische Schulden zeigen Bereiche auf, in denen die eigene Lösung nicht (mehr) den ge­gebenen Rahmenbedingungen oder Anforderungen genügt. Diese konzeptionellen oder tech­nischen Schwächen erkennen Sie z. B. durch wiederkehrende Reflexion (→ Abschnitt 5.5), qualitative Eigenschaften testen (→ Abschnitt 6.3) oder Qualitätsindikatoren nutzen (Abschnitt 6.4). Technische Schulden können aber auch einfach während der Umsetzung gefunden werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Technische Schulden zeigen Bereiche auf, in denen die eigene Lösung nicht (mehr) den ge­gebenen Rahmenbedingungen oder Anforderungen genügt. Diese konzeptionellen oder tech­nischen Schwächen erkennen Sie z. B. durch wiederkehrende Reflexion (→ Abschnitt 5.5), qualitative Eigenschaften testen (→ Abschnitt 6.3) oder Qualitätsindikatoren nutzen (Abschnitt 6.4). Technische Schulden können aber auch einfach während der Umsetzung gefunden werden.",
      "id": [
        "139782"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139783]\nDie Schuld wird als Architekturanforderung festgehalten. Ihr Wert ist über Szenarien als Architekturanforderung (→ Abschnitt 3.3) ausdrückbar, die mit der technischen Schuld assoziiert werden. Über die Szenarien und die Kosten der Schuld(­beseitigung) ist Architekturarbeit im Backlog (→ Abschnitt 3.6) möglich. Auch Architekturarbeit auf Kanban (→ Abschnitt 3.7) kann mit technischen Schulden funktionieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Schuld wird als Architekturanforderung festgehalten. Ihr Wert ist über Szenarien als Architekturanforderung (→ Abschnitt 3.3) ausdrückbar, die mit der technischen Schuld assoziiert werden. Über die Szenarien und die Kosten der Schuld(­beseitigung) ist Architekturarbeit im Backlog (→ Abschnitt 3.6) möglich. Auch Architekturarbeit auf Kanban (→ Abschnitt 3.7) kann mit technischen Schulden funktionieren.",
      "id": [
        "139783"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139784]\nHochpriore Schulden werden in Iterationen übernommen oder (bei Kanban) als „nächste Features“ in die Bearbeitung geschoben. Die darauf basierende Architekturarbeit können Sie danach erledigen, indem Sie Architekturentscheidungen treffen (→ Abschnitt 4.4). Ist in Ihrem Vorhaben mehr Planung nötig, weil Auslieferungen die Arbeit mehrerer Iterationen beinhalten, empfiehlt sich die Release­Planung mit Architekturfragen (→ Abschnitt 4.5).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Hochpriore Schulden werden in Iterationen übernommen oder (bei Kanban) als „nächste Features“ in die Bearbeitung geschoben. Die darauf basierende Architekturarbeit können Sie danach erledigen, indem Sie Architekturentscheidungen treffen (→ Abschnitt 4.4). Ist in Ihrem Vorhaben mehr Planung nötig, weil Auslieferungen die Arbeit mehrerer Iterationen beinhalten, empfiehlt sich die Release­Planung mit Architekturfragen (→ Abschnitt 4.5).",
      "id": [
        "139784"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:139785]\n[%3.6]\n[##Architekturarbeit im Backlog]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.6",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "139785"
      ],
      "title": "Architekturarbeit im Backlog"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139786]\n__„Sich Federn in den Hintern zu stecken, macht dich nicht zum Huhn.“__\n– Tyler Durden in „Fight Club“",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__„Sich Federn in den Hintern zu stecken, macht dich nicht zum Huhn.“__\n– Tyler Durden in „Fight Club“",
      "id": [
        "139786"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139787]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_17.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139787"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_17.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139788]\n**Peter:** Sag, wie sieht das denn jetzt mit Architekturarbeit aus? \n**Ben:** Was meinst du?\n**Peter:** Ist die jetzt genauso priorisiert im Backlog wie die Umsetzung von Funk­tionalität?\n**Ben:** Naja, mit kategorisierten Szenarien und technischen Schulden haben wir alles soweit im Griff. Passt eigentlich alles schön in den Backlog jetzt. Wieso?\n**Peter:** Ach nur so. Pizza? \n**Ben:** Oh ja, Pizza!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Peter:** Sag, wie sieht das denn jetzt mit Architekturarbeit aus? \n**Ben:** Was meinst du?\n**Peter:** Ist die jetzt genauso priorisiert im Backlog wie die Umsetzung von Funk­tionalität?\n**Ben:** Naja, mit kategorisierten Szenarien und technischen Schulden haben wir alles soweit im Griff. Passt eigentlich alles schön in den Backlog jetzt. Wieso?\n**Peter:** Ach nur so. Pizza? \n**Ben:** Oh ja, Pizza!",
      "id": [
        "139788"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139789]\nSie haben Szenarien oder andere konkrete Beispiele für qualitative Anforderungen erhoben. Ihr Vorgehen sieht die Abarbeitung priorisierter Anforderungen vor und ist primär funk­tional ausgerichtet (z. B. Scrum). Auf Szenarien basierende Architekturarbeit soll, wie die Umsetzung auch, iterativ erfolgen und Softwarearchitektur inkrementell entstehen lassen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie haben Szenarien oder andere konkrete Beispiele für qualitative Anforderungen erhoben. Ihr Vorgehen sieht die Abarbeitung priorisierter Anforderungen vor und ist primär funk­tional ausgerichtet (z. B. Scrum). Auf Szenarien basierende Architekturarbeit soll, wie die Umsetzung auch, iterativ erfolgen und Softwarearchitektur inkrementell entstehen lassen.",
      "id": [
        "139789"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139790]\n::info::\n**Problemstellung:**\n\nWie kann Architekturarbeit (1) iterativ, (2) stetig priorisiert und (3) mit funktionalen Aufgaben verwoben erledigt werden?\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Problemstellung:**\n\nWie kann Architekturarbeit (1) iterativ, (2) stetig priorisiert und (3) mit funktionalen Aufgaben verwoben erledigt werden?\n::",
      "id": [
        "139790"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139791]\nAls Steuerungsinstrument für die iterative Abarbeitung von Anforderungen verwenden viele Entwicklungsvorhaben Backlogs. Diese priorisierten Anforderungslisten, die nach oben hin feingranularer werden, sind auch der Schlüssel zu iterativer Architekturarbeit. Architekturanforderungen können gemeinsam mit funktionalen Anforderungen in Backlogs abgelegt und bearbeitet werden. Qualitative Anforderungen haben allerdings den „Makel“, dass sie sich auf viele funktionale Anforderungen beziehen können. Ein unabhängiger Eintrag in einer funktional geprägten Anforderungsliste ist eher eine Ausnahme. Durch die Verwendung von Szenarien (→ Abschnitt 3.3) und deren Kategorisierung (→ Abschnitt 3.4) ist die Weiterverarbeitung in funktional geprägten Backlogs trotzdem gut möglich. Auch technische Schulden (→ Abschnitt 3.5) lassen sich mit der geeigneten Vorbereitung im Backlog priorisieren. Bild 3.11 illustriert das Konzept.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Als Steuerungsinstrument für die iterative Abarbeitung von Anforderungen verwenden viele Entwicklungsvorhaben Backlogs. Diese priorisierten Anforderungslisten, die nach oben hin feingranularer werden, sind auch der Schlüssel zu iterativer Architekturarbeit. Architekturanforderungen können gemeinsam mit funktionalen Anforderungen in Backlogs abgelegt und bearbeitet werden. Qualitative Anforderungen haben allerdings den „Makel“, dass sie sich auf viele funktionale Anforderungen beziehen können. Ein unabhängiger Eintrag in einer funktional geprägten Anforderungsliste ist eher eine Ausnahme. Durch die Verwendung von Szenarien (→ Abschnitt 3.3) und deren Kategorisierung (→ Abschnitt 3.4) ist die Weiterverarbeitung in funktional geprägten Backlogs trotzdem gut möglich. Auch technische Schulden (→ Abschnitt 3.5) lassen sich mit der geeigneten Vorbereitung im Backlog priorisieren. Bild 3.11 illustriert das Konzept.",
      "id": [
        "139791"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139792]\nQualitätsgeschichten und allgemeine Merker werden direkt in den Backlog gelegt. Erstere sind weitgehend unabhängig von funktionalen Geschichten bearbeitbar, allgemeine Merker sind zumindest in ihrer Definition unabhängig. Wegen ihrer Tragweite sollten sie weit oben im Backlog landen. Es besteht aber kein Zwang, alle Merker zu Beginn des Vorhabens zu behandeln. Nach wie vor ist der Geschäftswert die bestimmende Größe für die Priorität von Backlog­Einträgen. Auch Qualitätsanforderungen sind nach Geschäftswert bewertbar – und im Fall von Merkern lässt der erreichbare Wert stark nach, je länger die Entwicklung schon läuft (bzw. wird es ungleich teurer, den Wert zu erreichen).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Qualitätsgeschichten und allgemeine Merker werden direkt in den Backlog gelegt. Erstere sind weitgehend unabhängig von funktionalen Geschichten bearbeitbar, allgemeine Merker sind zumindest in ihrer Definition unabhängig. Wegen ihrer Tragweite sollten sie weit oben im Backlog landen. Es besteht aber kein Zwang, alle Merker zu Beginn des Vorhabens zu behandeln. Nach wie vor ist der Geschäftswert die bestimmende Größe für die Priorität von Backlog­Einträgen. Auch Qualitätsanforderungen sind nach Geschäftswert bewertbar – und im Fall von Merkern lässt der erreichbare Wert stark nach, je länger die Entwicklung schon läuft (bzw. wird es ungleich teurer, den Wert zu erreichen).",
      "id": [
        "139792"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139793]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_18.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139793"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_18.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139794]\nAkzeptanzkriterien beziehen sich auf eine oder wenige funktionale Geschichten und können direkt bei den funktionalen Einträgen hinterlegt werden – als Akzeptanzkriterium.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Akzeptanzkriterien beziehen sich auf eine oder wenige funktionale Geschichten und können direkt bei den funktionalen Einträgen hinterlegt werden – als Akzeptanzkriterium.",
      "id": [
        "139794"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139795]\nTechnische Schulden werden mit beschreibenden Szenarien assoziiert und wie allgemeine Merker und Qualitätsgeschichten direkt in den Backlog gelegt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Technische Schulden werden mit beschreibenden Szenarien assoziiert und wie allgemeine Merker und Qualitätsgeschichten direkt in den Backlog gelegt.",
      "id": [
        "139795"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139796]\nIn Anforderungspflege­-Workshops (→ Abschnitt 3.2) werden hochpriore allgemeine Merker und Qualitätsgeschichten geschärft. Sobald funktionale Anforderungen für die kommende Iteration relevant werden, stehen auch zugeordnete Akzeptanzkriterien im Fokus: Sie wer­den geschärft und eventuell um weitere Ideen ergänzt. Im anschließenden Planungsschritt werden die wichtigsten und detaillierten Anforderungen aus dem Backlog in kleinere Iterations­Backlogs übernommen (im Bild „Sprint Backlog“). Architekturaspekte sind dann berücksichtigt und bereits breit bekannt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In Anforderungspflege­-Workshops (→ Abschnitt 3.2) werden hochpriore allgemeine Merker und Qualitätsgeschichten geschärft. Sobald funktionale Anforderungen für die kommende Iteration relevant werden, stehen auch zugeordnete Akzeptanzkriterien im Fokus: Sie wer­den geschärft und eventuell um weitere Ideen ergänzt. Im anschließenden Planungsschritt werden die wichtigsten und detaillierten Anforderungen aus dem Backlog in kleinere Iterations­Backlogs übernommen (im Bild „Sprint Backlog“). Architekturaspekte sind dann berücksichtigt und bereits breit bekannt.",
      "id": [
        "139796"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139797]\n::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Führen Sie einen zweiten Backlog für Architekturanforderungen ein. Trotz allem haben Sie so einfach den besseren Überblick.\n• Nutzen Sie die Zuordnung von Akzeptanzkriterien zu Backlog­Einträgen gleich, um diese Einträge zu schärfen und zu verfeinern. Die genaue, feingranulare Zu­ordnung ist auch bei niedrigprioren Backlog­-Einträgen wichtig.\n• Verstehen Sie die Architekturanforderungen im Backlog als Vertrag. Sie können sich 100 % darauf verlassen, dass sich Szenarien im Backlog nicht mehr ändern. Verklagen Sie den Kunden andernfalls.\n• Nutzen Sie den Backlog zur Entkopplung mit fachlichen Ansprechpartnern. Haben Sie alle Szenarien erfasst, können Entwickler so völlig losgelöst vom Kunden arbeiten und die Einträge sprechen für sich.\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Führen Sie einen zweiten Backlog für Architekturanforderungen ein. Trotz allem haben Sie so einfach den besseren Überblick.\n• Nutzen Sie die Zuordnung von Akzeptanzkriterien zu Backlog­Einträgen gleich, um diese Einträge zu schärfen und zu verfeinern. Die genaue, feingranulare Zu­ordnung ist auch bei niedrigprioren Backlog­-Einträgen wichtig.\n• Verstehen Sie die Architekturanforderungen im Backlog als Vertrag. Sie können sich 100 % darauf verlassen, dass sich Szenarien im Backlog nicht mehr ändern. Verklagen Sie den Kunden andernfalls.\n• Nutzen Sie den Backlog zur Entkopplung mit fachlichen Ansprechpartnern. Haben Sie alle Szenarien erfasst, können Entwickler so völlig losgelöst vom Kunden arbeiten und die Einträge sprechen für sich.\n::",
      "id": [
        "139797"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139798]\nDer Backlog verarbeitet Szenarien als Architekturanforderungen (→ Abschnitt 3.3), die über Szenarien kategorisieren (→ Abschnitt 3.4) vorbereitet wurden, und ermöglicht so deren iterative Abarbeitung. Der Backlog kann über initiale Anforderungs­Workshops (→ Abschnitt 3.1) befüllt und durch Anforderungspflege­Workshops (→ Abschnitt 3.2) schrittweise verfeinert werden. Die Priorisierung von architekturrelevanten Einträgen sollte dabei auch vom letzten vernünftigen Moment (→ Abschnitt 4.2) beeinflusst werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Der Backlog verarbeitet Szenarien als Architekturanforderungen (→ Abschnitt 3.3), die über Szenarien kategorisieren (→ Abschnitt 3.4) vorbereitet wurden, und ermöglicht so deren iterative Abarbeitung. Der Backlog kann über initiale Anforderungs­Workshops (→ Abschnitt 3.1) befüllt und durch Anforderungspflege­Workshops (→ Abschnitt 3.2) schrittweise verfeinert werden. Die Priorisierung von architekturrelevanten Einträgen sollte dabei auch vom letzten vernünftigen Moment (→ Abschnitt 4.2) beeinflusst werden.",
      "id": [
        "139798"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139799]\nDen Backlog als die alleinige Quelle von Anforderungen zu verstehen, egal, ob funktional oder qualitativ, macht Architekturentscheidungen treffen (→ Abschnitt 4.4) und gemeinsam entscheiden (→ Abschnitt 5.2) einfacher. Die Release­Planung mit Architekturfragen (→ Abschnitt 4.5) setzt auf der Architekturarbeit im Backlog auf und plant mehrere Iterationen statt nur eines Iterations­-Backlogs.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Den Backlog als die alleinige Quelle von Anforderungen zu verstehen, egal, ob funktional oder qualitativ, macht Architekturentscheidungen treffen (→ Abschnitt 4.4) und gemeinsam entscheiden (→ Abschnitt 5.2) einfacher. Die Release­Planung mit Architekturfragen (→ Abschnitt 4.5) setzt auf der Architekturarbeit im Backlog auf und plant mehrere Iterationen statt nur eines Iterations­-Backlogs.",
      "id": [
        "139799"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:139800]\n[%3.7]\n[##Architekturarbeit auf Kanban]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.7",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "139800"
      ],
      "title": "Architekturarbeit auf Kanban"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139801]\n__„Alles fließt.“__\n– Heraklit",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__„Alles fließt.“__\n– Heraklit",
      "id": [
        "139801"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139802]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_20.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139802"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_20.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139803]\n__Michael kommt von einer Konferenz in Minneapolis wieder, auf der Mary Poppendieck einen Vortrag zu Lean Thinking hielt. In einem Teil sprach sie über Kanban und die Visualisierung von Softwareentwicklungsprozessen.__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Michael kommt von einer Konferenz in Minneapolis wieder, auf der Mary Poppendieck einen Vortrag zu Lean Thinking hielt. In einem Teil sprach sie über Kanban und die Visualisierung von Softwareentwicklungsprozessen.__",
      "id": [
        "139803"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139804]\n**Michael:** Mir hat gut gefallen, wie kleinteilige Aufgaben vorhersagbar über das Kanban­-Board wandern und stetig Output erzeugt wird. Dass der Fluss von An­forderungen wichtiger ist als die Auslastung jedes einzelnen Entwicklers, hat sie mit einer Verkehrsmetapher erklärt: In einem Verkehrsstau wird die Kapazität der Straße perfekt ausgenutzt, aber es geht nichts weiter. Man erreicht mehr, wenn man das Ganze analysiert und optimiert. Kanban­Tafeln sind ein Mittel, um ein Stocken des Flusses zu erkennen und gemeinsam hin zu schnellerem, vor­hersagbarem Output zu kommen.\n**Ben:** Nett!\n**Michael:** Ich habe auch überlegt, wie das bei uns funktionieren würde. Wir haben ja normale Stories und Szenarien bzw. neuerdings auch technische Schulden im Backlog. Würden wir auf einer Kanban-­Tafel eine Architekturspalte einführen, würden jede Story, jedes Szenario und jede Schuld da durch wandern. Bei den meisten Stories ist das aber gar nicht nötig. Und bei Szenarien würde die gesamte Architekturarbeit, inklusive Analyse, Wissensaufbau, Entscheidung und Kommunikation in einer einzigen Spalte stattfinden. Das finde ich irgendwie unschön. Auch allgemeine Merker, die immer von allen beachtet werden müs­sen, kann ich schwer einordnen. Würden die in der Umsetzungsspalte hängen­bleiben, bis das Projekt zu Ende ist? Und was ist ...\n**Axel:** Sorry, dass ich unterbreche, aber wir haben Kanban im letzten Projekt eingesetzt und aus diesen und anderen Gründen auf eine Architekturspalte ver­zichtet. Die Idee von Kanban ist durchaus, eine eigene Ausprägung des Boards zu finden, die gut funktioniert. Bei uns war das ohne eine Architekturspalte ganz gut. Architekturaufgaben sind in der Umsetzungsspalte entschieden worden und wir haben nichtfunktionale Tests und Metriken entwickelt, um eine gewisse Testbarkeit herzustellen. Daneben mussten die Ergebnisse der Architekturarbeit natürlich sichtbar gemacht werden, weshalb wir in den Testspalten auch kleine Architekturbewertungs­-Workshops abgehalten haben.\n**Michael:** Spannend!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Michael:** Mir hat gut gefallen, wie kleinteilige Aufgaben vorhersagbar über das Kanban­-Board wandern und stetig Output erzeugt wird. Dass der Fluss von An­forderungen wichtiger ist als die Auslastung jedes einzelnen Entwicklers, hat sie mit einer Verkehrsmetapher erklärt: In einem Verkehrsstau wird die Kapazität der Straße perfekt ausgenutzt, aber es geht nichts weiter. Man erreicht mehr, wenn man das Ganze analysiert und optimiert. Kanban­Tafeln sind ein Mittel, um ein Stocken des Flusses zu erkennen und gemeinsam hin zu schnellerem, vor­hersagbarem Output zu kommen.\n**Ben:** Nett!\n**Michael:** Ich habe auch überlegt, wie das bei uns funktionieren würde. Wir haben ja normale Stories und Szenarien bzw. neuerdings auch technische Schulden im Backlog. Würden wir auf einer Kanban-­Tafel eine Architekturspalte einführen, würden jede Story, jedes Szenario und jede Schuld da durch wandern. Bei den meisten Stories ist das aber gar nicht nötig. Und bei Szenarien würde die gesamte Architekturarbeit, inklusive Analyse, Wissensaufbau, Entscheidung und Kommunikation in einer einzigen Spalte stattfinden. Das finde ich irgendwie unschön. Auch allgemeine Merker, die immer von allen beachtet werden müs­sen, kann ich schwer einordnen. Würden die in der Umsetzungsspalte hängen­bleiben, bis das Projekt zu Ende ist? Und was ist ...\n**Axel:** Sorry, dass ich unterbreche, aber wir haben Kanban im letzten Projekt eingesetzt und aus diesen und anderen Gründen auf eine Architekturspalte ver­zichtet. Die Idee von Kanban ist durchaus, eine eigene Ausprägung des Boards zu finden, die gut funktioniert. Bei uns war das ohne eine Architekturspalte ganz gut. Architekturaufgaben sind in der Umsetzungsspalte entschieden worden und wir haben nichtfunktionale Tests und Metriken entwickelt, um eine gewisse Testbarkeit herzustellen. Daneben mussten die Ergebnisse der Architekturarbeit natürlich sichtbar gemacht werden, weshalb wir in den Testspalten auch kleine Architekturbewertungs­-Workshops abgehalten haben.\n**Michael:** Spannend!",
      "id": [
        "139804"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139805]\nSie haben Szenarien oder andere konkrete Beispiele für qualitative Anforderungen erhoben. Ihr Vorgehen sieht die stetige Abarbeitung priorisierter Anforderungen vor und ist primär funktional ausgerichtet (z. B. Kanban). Softwarearchitektur soll in dieses Vorgehen integriert werden, ohne den Fluss zu behindern oder zu verzögern.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie haben Szenarien oder andere konkrete Beispiele für qualitative Anforderungen erhoben. Ihr Vorgehen sieht die stetige Abarbeitung priorisierter Anforderungen vor und ist primär funktional ausgerichtet (z. B. Kanban). Softwarearchitektur soll in dieses Vorgehen integriert werden, ohne den Fluss zu behindern oder zu verzögern.",
      "id": [
        "139805"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139806]\n::info::\n**Problemstellung:**\n\nWie kann die Architekturarbeit von der Idee bis zur Auslieferung optimiert werden, so dass ein mit Umsetzungsaufgaben verwobener, stetiger und sichtbarer Fluss von Aufgaben entsteht?\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Problemstellung:**\n\nWie kann die Architekturarbeit von der Idee bis zur Auslieferung optimiert werden, so dass ein mit Umsetzungsaufgaben verwobener, stetiger und sichtbarer Fluss von Aufgaben entsteht?\n::",
      "id": [
        "139806"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139807]\nKanban (kan – visuelles Signal, ban – Karte oder Tafel) ist eine von Taiichi Ohno bei Toyota entwickelte Methode zur Produktionssteuerung. Sie setzt zentrale Ideen von Lean um. Auf Softwareentwicklung übertragen, ermöglicht Kanban die Visualisierung des Entwick­lungsprozesses und von eventuellen Engpässen (z. B. im Systemtest). Entscheidend ist der sogenannte „Pull“­Ansatz: Aufgaben werden nicht verteilt oder weitergeschoben, sobald sie fertig sind, sondern von nachfolgenden Schritten gezogen, sobald sie bereit sind. Bevor dieser „Pull“ erfolgt, liegt die Aufgabe noch beim vorherigen Arbeitsschritt. Limitiert man nun die maximale Anzahl an Aufgaben, die ein Arbeitsschritt gleichzeitig „bearbeiten“ darf, gibt es einen interessanten Effekt: Stockt die Verarbeitung in einem Arbeitsschritt weiter hinten, wird über kurz oder lang jeder Schritt davor voll laufen und ebenfalls stocken. Die Lean-Praktik des „Stop and Fix“ (halte an und repariere) wird so effektiv umsetzbar. Gibt es etwa beim Testen Probleme, werden diese gemeinsam beseitigt, bevor man weiter testbare Software­inkremente baut. Eine gut Idee, da sonst das Feedback von Tests fehlen würde und man viele Teile der Software baut, bevor man Rückmeldung bekommt, was letztendlich funktioniert. Fehler haben sich zum Zeitpunkt der Rückmeldung eventuell schon weit verbreitet und man zahlt die Kosten für späten Erkenntnisgewinn – „cost of delay“, ein weiteres Lean-­Konzept.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Kanban (kan – visuelles Signal, ban – Karte oder Tafel) ist eine von Taiichi Ohno bei Toyota entwickelte Methode zur Produktionssteuerung. Sie setzt zentrale Ideen von Lean um. Auf Softwareentwicklung übertragen, ermöglicht Kanban die Visualisierung des Entwick­lungsprozesses und von eventuellen Engpässen (z. B. im Systemtest). Entscheidend ist der sogenannte „Pull“­Ansatz: Aufgaben werden nicht verteilt oder weitergeschoben, sobald sie fertig sind, sondern von nachfolgenden Schritten gezogen, sobald sie bereit sind. Bevor dieser „Pull“ erfolgt, liegt die Aufgabe noch beim vorherigen Arbeitsschritt. Limitiert man nun die maximale Anzahl an Aufgaben, die ein Arbeitsschritt gleichzeitig „bearbeiten“ darf, gibt es einen interessanten Effekt: Stockt die Verarbeitung in einem Arbeitsschritt weiter hinten, wird über kurz oder lang jeder Schritt davor voll laufen und ebenfalls stocken. Die Lean-Praktik des „Stop and Fix“ (halte an und repariere) wird so effektiv umsetzbar. Gibt es etwa beim Testen Probleme, werden diese gemeinsam beseitigt, bevor man weiter testbare Software­inkremente baut. Eine gut Idee, da sonst das Feedback von Tests fehlen würde und man viele Teile der Software baut, bevor man Rückmeldung bekommt, was letztendlich funktioniert. Fehler haben sich zum Zeitpunkt der Rückmeldung eventuell schon weit verbreitet und man zahlt die Kosten für späten Erkenntnisgewinn – „cost of delay“, ein weiteres Lean-­Konzept.",
      "id": [
        "139807"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139808]\nNeben Pull­Prinzip und Stop and Fix ist mindestens eine weitere Idee spannend für einen stetigen Fluss mit schneller Rückmeldung: Littles Law. Dieses Gesetz von John D. C. Little [Lit61] beschreibt einen Sachverhalt der Warteschlangentheorie, wonach die durchschnitt­ liche Menge an Elementen in einem Warteschlangensystem (L) gleich der durchschnittlichen Verweildauer im System (W) mal der durchschnittlichen Ankunftsrate (λ) ist.\n\n__L = λ W__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Neben Pull­Prinzip und Stop and Fix ist mindestens eine weitere Idee spannend für einen stetigen Fluss mit schneller Rückmeldung: Littles Law. Dieses Gesetz von John D. C. Little [Lit61] beschreibt einen Sachverhalt der Warteschlangentheorie, wonach die durchschnitt­ liche Menge an Elementen in einem Warteschlangensystem (L) gleich der durchschnittlichen Verweildauer im System (W) mal der durchschnittlichen Ankunftsrate (λ) ist.\n\n__L = λ W__",
      "id": [
        "139808"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139809]\nDas klingt erst mal logisch. Wenn Sie sich jeden Monat fünf neue Musikalben kaufen und durchschnittlich drei Monate hören, bis Sie genug davon haben, sind auf Ihrem iPod durch­schnittlich 15 Alben mit guter, neuer Musik. Diese Regel gilt unabhängig von der Art und Weise, wie Sie Musik hören oder in welcher Reihenfolge Sie Alben „tothören“. Spannend wird es nun, wenn man an den Parametern dreht. Steigt beispielsweise die Anzahl an Musikalben, die Sie bekommen (weil Ihre neue Freundin sich illegalerweise im Netz bedient – natürlich ohne Ihr Wissen), brauchen Sie einen größeren iPod. Haben Sie das Geld dafür nicht, müssen Sie die drei Monate, die ein Album für Sie spannend ist, verkürzen. Hören Sie nicht öfter Musik, gelingt das nur auf einem Weg: indem die Musikalben kleiner werden. Löschen Sie deshalb einige Lieder von den Alben, die Sie von Ihrer Freundin bekommen ...",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Das klingt erst mal logisch. Wenn Sie sich jeden Monat fünf neue Musikalben kaufen und durchschnittlich drei Monate hören, bis Sie genug davon haben, sind auf Ihrem iPod durch­schnittlich 15 Alben mit guter, neuer Musik. Diese Regel gilt unabhängig von der Art und Weise, wie Sie Musik hören oder in welcher Reihenfolge Sie Alben „tothören“. Spannend wird es nun, wenn man an den Parametern dreht. Steigt beispielsweise die Anzahl an Musikalben, die Sie bekommen (weil Ihre neue Freundin sich illegalerweise im Netz bedient – natürlich ohne Ihr Wissen), brauchen Sie einen größeren iPod. Haben Sie das Geld dafür nicht, müssen Sie die drei Monate, die ein Album für Sie spannend ist, verkürzen. Hören Sie nicht öfter Musik, gelingt das nur auf einem Weg: indem die Musikalben kleiner werden. Löschen Sie deshalb einige Lieder von den Alben, die Sie von Ihrer Freundin bekommen ...",
      "id": [
        "139809"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139810]\nAuf die Softwareentwicklung übertragen, ergeben sich daraus wichtige Erkenntnisse:\n\n• Teilen Sie Aufgaben in kleinere Häppchen, sinkt die Bearbeitungszeit und damit die Ver­weildauer (__W__). Als Folge können Sie in der gleichen Zeit, mit den gleichen Kapazitäten mehr dieser Häppchen umsetzen (höhere Ankunftsrate __λ__). Es entsteht ein schnellerer Fluss von umgesetzten Anforderungen mit häufigerer Rückmeldung aus der Entwicklung. Definieren Sie folglich kleine Aufgabenpakete.\n• Halten Sie die Arbeit, die gleichzeitig in Bearbeitung sein darf (__L__), konstant, können Sie auf Basis Ihrer durchschnittlichen Bearbeitungszeit (__W__) genau bestimmen, wie viele Anforde­rungen Sie durchschnittlich annehmen können (__λ__). Das gibt Planungssicherheit und macht verbindliche Aussagen zu Umsetzungszeitpunkten einfacher. Limitieren und planen Sie folglich die gleichzeitig in Bearbeitung befindliche Arbeit (engl. work in progress – WIP).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Auf die Softwareentwicklung übertragen, ergeben sich daraus wichtige Erkenntnisse:\n\n• Teilen Sie Aufgaben in kleinere Häppchen, sinkt die Bearbeitungszeit und damit die Ver­weildauer (__W__). Als Folge können Sie in der gleichen Zeit, mit den gleichen Kapazitäten mehr dieser Häppchen umsetzen (höhere Ankunftsrate __λ__). Es entsteht ein schnellerer Fluss von umgesetzten Anforderungen mit häufigerer Rückmeldung aus der Entwicklung. Definieren Sie folglich kleine Aufgabenpakete.\n• Halten Sie die Arbeit, die gleichzeitig in Bearbeitung sein darf (__L__), konstant, können Sie auf Basis Ihrer durchschnittlichen Bearbeitungszeit (__W__) genau bestimmen, wie viele Anforde­rungen Sie durchschnittlich annehmen können (__λ__). Das gibt Planungssicherheit und macht verbindliche Aussagen zu Umsetzungszeitpunkten einfacher. Limitieren und planen Sie folglich die gleichzeitig in Bearbeitung befindliche Arbeit (engl. work in progress – WIP).",
      "id": [
        "139810"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139811]\nKanban beinhaltet mit Pull­Prinzip, Stop&Fix, WIP­Limits und kleinteiligen kanban all diese Aspekte und ist auf jeden Fall einen Blick wert, wenn Sie stetige Arbeit an einem Produkt oder einer Plattform leisten. Mehr Informationen zu Kanban finden Sie in [Leo12] und [And10].",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Kanban beinhaltet mit Pull­Prinzip, Stop&Fix, WIP­Limits und kleinteiligen kanban all diese Aspekte und ist auf jeden Fall einen Blick wert, wenn Sie stetige Arbeit an einem Produkt oder einer Plattform leisten. Mehr Informationen zu Kanban finden Sie in [Leo12] und [And10].",
      "id": [
        "139811"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139812]\nBild 3.12 zeigt, wie Sie Kanban auf die Bearbeitung von Architekturfragen in Softwareent­wicklungsvorhaben anwenden können.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bild 3.12 zeigt, wie Sie Kanban auf die Bearbeitung von Architekturfragen in Softwareent­wicklungsvorhaben anwenden können.",
      "id": [
        "139812"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139813]\nDie Kanban-­Tafel11 aus Bild 3.12 beinhaltet keine Architekturspalte. Stattdessen wird Archi­tekturarbeit über entsprechende kanban abgebildet. Wenn Sie Ideen analysieren, können Sie über die Kartenfarbe oder -­form kenntlich machen, um welche Art von Anforderung es sich handelt. So lassen sich auch die Szenariokategorien aus Abschnitt 3.4 abbilden. Während Akzeptanzkriterien gemeinsam mit funktionalen kanban in die normalen System­- und Akzeptanztests wandern, werden architekturrelevante Qualitätsgeschichten und allgemeine Merker etwas anders gehandhabt. Die in der __Entwicklung__ getroffenen Architekturent­scheidungen werden in der Spalte __Architekturkommunikation__ möglichst breit besprochen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Kanban-­Tafel11 aus Bild 3.12 beinhaltet keine Architekturspalte. Stattdessen wird Archi­tekturarbeit über entsprechende kanban abgebildet. Wenn Sie Ideen analysieren, können Sie über die Kartenfarbe oder -­form kenntlich machen, um welche Art von Anforderung es sich handelt. So lassen sich auch die Szenariokategorien aus Abschnitt 3.4 abbilden. Während Akzeptanzkriterien gemeinsam mit funktionalen kanban in die normalen System­- und Akzeptanztests wandern, werden architekturrelevante Qualitätsgeschichten und allgemeine Merker etwas anders gehandhabt. Die in der __Entwicklung__ getroffenen Architekturent­scheidungen werden in der Spalte __Architekturkommunikation__ möglichst breit besprochen.",
      "id": [
        "139813"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:139814]\n[&image:https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_21.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "139814"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/vorgehensmuster_fuer_softwarearchitektur/web-resources/images/k3/axa_vorgehensmuster_software_architektur_k3_21.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139815]\nDafür eignen sich Techniken wie die wiederkehrende Reflexion (→ Abschnitt 5.5). Akzep­tanztests für diese Entscheidungen können danach durch nichtfunktionale Tests erfolgen (→ Abschnitt 6.3) oder über Metriken definiert werden (→ Abschnitt 6.4).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Dafür eignen sich Techniken wie die wiederkehrende Reflexion (→ Abschnitt 5.5). Akzep­tanztests für diese Entscheidungen können danach durch nichtfunktionale Tests erfolgen (→ Abschnitt 6.3) oder über Metriken definiert werden (→ Abschnitt 6.4).",
      "id": [
        "139815"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139816]\nKanban hat keinen fixen Takt wie ein iteratives Vorgehen. Stattdessen werden stetig kanban abgearbeitet. Sie bilden auch die Granularität für Feedback. Wird eine Karte von der Spalte __Akzeptanztest__ gezogen, werden entsprechende (nichtfunktionale) Tests und Metriken aufge­setzt, ausgeführt und idealerweise in den Build integriert. Feedback ist verfügbar, sobald die Karte über die Tafel gewandert ist und nicht erst, wenn eine Iteration zu Ende ist.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Kanban hat keinen fixen Takt wie ein iteratives Vorgehen. Stattdessen werden stetig kanban abgearbeitet. Sie bilden auch die Granularität für Feedback. Wird eine Karte von der Spalte __Akzeptanztest__ gezogen, werden entsprechende (nichtfunktionale) Tests und Metriken aufge­setzt, ausgeführt und idealerweise in den Build integriert. Feedback ist verfügbar, sobald die Karte über die Tafel gewandert ist und nicht erst, wenn eine Iteration zu Ende ist.",
      "id": [
        "139816"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139817]\nDie vorgestellte __integrierte Architekturarbeit__ ohne separate Architekturspalte (angelehnt an [Kni12]), hat meiner Meinung nach einige Vorteile:\n\n• **Flexibilität:**\nNicht jede Anforderung braucht Architekturarbeit und Limits auf Architekturarbeit be­hindern in der Praxis öfter, als sie helfen. Trotz der fehlenden Spalte ist Architekturarbeit über die Kartenfarbe oder ­form sichtbar.\n• **Lebenszyklus:**\nArchitekturarbeit ist nicht an einer Stelle und in einer Spalte zu erledigen, sondern be­inhaltet ähnliche Aspekte wie andere Entwicklungstätigkeiten. Architekturarbeit sollte nicht nur entschieden, sondern auch analysiert, später kommuniziert und verifiziert (getestet) werden. All diese Tätigkeiten in einer Spalte abzubilden, ist wenig transparent.\n• **Kleinteiligkeit:**\nKanban beschreibt den dynamisch Fluss von kleinteiligen Aufgaben mit schneller Rück­meldung. Eine eigene Architekturspalte würde diesen Fluss behindern (siehe voriger Punkt zu Lebenszyklus) und suggeriert leider zu oft klassische Verhältnisse. Teams und Projekte, die noch nicht vollkommen an dynamische und agile Arbeit gewöhnt sind, bekommen mit der Architekturspalte einen „Ankerpunkt“ für wasserfallähnliche Konzeptphasen. Kanban­-Tafeln werden statischer und einzelne kanban verweilen lange in der Spalte, bevor sie wei­tergeschoben werden. Durch das Entfallen der Spalte setzt man meiner Erfahrung nach ein deutlicheres Zeichen und fördert Umdenken hin zu einer integrierten Architekturdisziplin.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die vorgestellte __integrierte Architekturarbeit__ ohne separate Architekturspalte (angelehnt an [Kni12]), hat meiner Meinung nach einige Vorteile:\n\n• **Flexibilität:**\nNicht jede Anforderung braucht Architekturarbeit und Limits auf Architekturarbeit be­hindern in der Praxis öfter, als sie helfen. Trotz der fehlenden Spalte ist Architekturarbeit über die Kartenfarbe oder ­form sichtbar.\n• **Lebenszyklus:**\nArchitekturarbeit ist nicht an einer Stelle und in einer Spalte zu erledigen, sondern be­inhaltet ähnliche Aspekte wie andere Entwicklungstätigkeiten. Architekturarbeit sollte nicht nur entschieden, sondern auch analysiert, später kommuniziert und verifiziert (getestet) werden. All diese Tätigkeiten in einer Spalte abzubilden, ist wenig transparent.\n• **Kleinteiligkeit:**\nKanban beschreibt den dynamisch Fluss von kleinteiligen Aufgaben mit schneller Rück­meldung. Eine eigene Architekturspalte würde diesen Fluss behindern (siehe voriger Punkt zu Lebenszyklus) und suggeriert leider zu oft klassische Verhältnisse. Teams und Projekte, die noch nicht vollkommen an dynamische und agile Arbeit gewöhnt sind, bekommen mit der Architekturspalte einen „Ankerpunkt“ für wasserfallähnliche Konzeptphasen. Kanban­-Tafeln werden statischer und einzelne kanban verweilen lange in der Spalte, bevor sie wei­tergeschoben werden. Durch das Entfallen der Spalte setzt man meiner Erfahrung nach ein deutlicheres Zeichen und fördert Umdenken hin zu einer integrierten Architekturdisziplin.",
      "id": [
        "139817"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139818]\nEin häufiger Punkt für Diskussionen ist die Spalte „Ideen“. Mary Poppendieck ist ein harter Verfechter der leeren Input­Warteschlange. Auf der Kanban-­Tafel sollten nur die in Arbeit befindlichen Aufgaben zu sehen sein, es gibt keine Liste mit zukünftiger Arbeit. Einerseits würde das die Zusammenarbeit stören, andererseits vollständige Spezifikationen fördern. Erlaubt ist nur ein kleiner Puffer mit fixer Länge. Überschüssige Arbeit wird abgelehnt und erst zu einem Zeitpunkt abgeholt, an dem sie auch bearbeitbar ist12. Diese Limitierung von Input hat Charme und ist vor allem im Umfeld der Produkt-­, Plattform­- oder Framework-Entwicklung sowie der Systemwartung ein guter Ansatz. Seien Sie jedoch vorsichtig bei Individualsoftwareentwicklung oder architektonisch herausfordernden Systemen: Die Ideen­Spalte stellt hier eine wertvolle Quelle für Risikobetrachtungen und architektonische Überlegungen dar. Ähnlich wie bei einem richtig verwendeten Backlog, ermöglicht diese grobe Anforderungsliste die Betrachtung von Abhängigkeiten, Architekturanforderungen und technischen Schulden. Keinesfalls sollte die Ideenspalte jedoch als fixe Liste oder gar Spezifikation verstanden werden!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Ein häufiger Punkt für Diskussionen ist die Spalte „Ideen“. Mary Poppendieck ist ein harter Verfechter der leeren Input­Warteschlange. Auf der Kanban-­Tafel sollten nur die in Arbeit befindlichen Aufgaben zu sehen sein, es gibt keine Liste mit zukünftiger Arbeit. Einerseits würde das die Zusammenarbeit stören, andererseits vollständige Spezifikationen fördern. Erlaubt ist nur ein kleiner Puffer mit fixer Länge. Überschüssige Arbeit wird abgelehnt und erst zu einem Zeitpunkt abgeholt, an dem sie auch bearbeitbar ist12. Diese Limitierung von Input hat Charme und ist vor allem im Umfeld der Produkt-­, Plattform­- oder Framework-Entwicklung sowie der Systemwartung ein guter Ansatz. Seien Sie jedoch vorsichtig bei Individualsoftwareentwicklung oder architektonisch herausfordernden Systemen: Die Ideen­Spalte stellt hier eine wertvolle Quelle für Risikobetrachtungen und architektonische Überlegungen dar. Ähnlich wie bei einem richtig verwendeten Backlog, ermöglicht diese grobe Anforderungsliste die Betrachtung von Abhängigkeiten, Architekturanforderungen und technischen Schulden. Keinesfalls sollte die Ideenspalte jedoch als fixe Liste oder gar Spezifikation verstanden werden!",
      "id": [
        "139818"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139819]\n::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Führen Sie am Kanban­-Board weitere Spalten für Architektur und Design ein, die von jedem Feature durchlaufen werden müssen. Idealerweise arbeiten an dieser Spalte nicht die Entwickler selbst.\n• Schleusen Sie architekturrelevante Anforderungen bevorzugt über die Kanban­-Tafel. Am besten arbeiten Sie alle entsprechenden Karten ab, bevor Sie funktio­nale kanban anfassen.\n• Warten Sie nicht darauf, bis kanban genommen werden. Wenn Sie fertig sind, schieben Sie das kanban einfach weiter und überreden Sie zur Not die Verant­wortlichen, die WIP­-Limits hochzusetzen.\n• Bearbeiten Sie architekturrelevante kanban möglichst alleine und nehmen Sie die Kommunikationsspalte nicht so ernst. Das kanban hängt an der Tafel, kann doch jeder sehen und zur Not fragen.\n• Sind keine architekturrelevanten kanban mehr auf der Tafel zu finden, freuen Sie sich im Stillen. Vermeiden Sie die neuerliche Szenariensuche oder prüfende Blicke auf die Reife Ihrer Architektur.\n::",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "::info::\n**Tipps zum Scheitern**\n\nMöchten Sie mit diesem Muster scheitern und Ihrem Projekt schaden, folgen Sie diesen Empfehlungen:\n\n• Führen Sie am Kanban­-Board weitere Spalten für Architektur und Design ein, die von jedem Feature durchlaufen werden müssen. Idealerweise arbeiten an dieser Spalte nicht die Entwickler selbst.\n• Schleusen Sie architekturrelevante Anforderungen bevorzugt über die Kanban­-Tafel. Am besten arbeiten Sie alle entsprechenden Karten ab, bevor Sie funktio­nale kanban anfassen.\n• Warten Sie nicht darauf, bis kanban genommen werden. Wenn Sie fertig sind, schieben Sie das kanban einfach weiter und überreden Sie zur Not die Verant­wortlichen, die WIP­-Limits hochzusetzen.\n• Bearbeiten Sie architekturrelevante kanban möglichst alleine und nehmen Sie die Kommunikationsspalte nicht so ernst. Das kanban hängt an der Tafel, kann doch jeder sehen und zur Not fragen.\n• Sind keine architekturrelevanten kanban mehr auf der Tafel zu finden, freuen Sie sich im Stillen. Vermeiden Sie die neuerliche Szenariensuche oder prüfende Blicke auf die Reife Ihrer Architektur.\n::",
      "id": [
        "139819"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139820]\nKanban verarbeitet Szenarien als Architekturanforderungen (→ Abschnitt 3.3), die über Szenarien kategorisieren (→ Abschnitt 3.4) vorbereitet wurden. Die Ideen­Spalte kann über INITIALE ANFORDERUNGSWORKSHOPS (→ Abschnitt 3.1) befüllt werden. Ideen wandern von __neu__ nach __analysiert__, wenn Anforderungspflege­Workshops (→ Abschnitt 3.2) stattfinden. Die wichtigsten Anforderungen werden dann Stück für Stück als Features übernommen. Dabei sollte der letzte vernünftige Moment (→ Abschnitt 4.2) beachtet werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Kanban verarbeitet Szenarien als Architekturanforderungen (→ Abschnitt 3.3), die über Szenarien kategorisieren (→ Abschnitt 3.4) vorbereitet wurden. Die Ideen­Spalte kann über INITIALE ANFORDERUNGSWORKSHOPS (→ Abschnitt 3.1) befüllt werden. Ideen wandern von __neu__ nach __analysiert__, wenn Anforderungspflege­Workshops (→ Abschnitt 3.2) stattfinden. Die wichtigsten Anforderungen werden dann Stück für Stück als Features übernommen. Dabei sollte der letzte vernünftige Moment (→ Abschnitt 4.2) beachtet werden.",
      "id": [
        "139820"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139821]\nIn der Spalte Architekturkommunikation kommt wiederkehrende Reflexion (→ Ab­ schnitt 5.5) zum Einsatz, um Entscheidungen zu bewerten und gemeinsam zu treffen. In der Spalte __Akzeptanztests__ sollten Sie qualitative Eigenschaften testen (→ Abschnitt 6.3), Qualitätsindikatoren nutzen (→ Abschnitt 6.4) und Code mit Architektur verbinden (→ Abschnitt 6.5).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In der Spalte Architekturkommunikation kommt wiederkehrende Reflexion (→ Ab­ schnitt 5.5) zum Einsatz, um Entscheidungen zu bewerten und gemeinsam zu treffen. In der Spalte __Akzeptanztests__ sollten Sie qualitative Eigenschaften testen (→ Abschnitt 6.3), Qualitätsindikatoren nutzen (→ Abschnitt 6.4) und Code mit Architektur verbinden (→ Abschnitt 6.5).",
      "id": [
        "139821"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:139822]\nDie Verwebung von qualitativen und funktionalen Anforderungen auf der Kanban­Tafel macht Architekturentscheidungen treffen (→ Abschnitt 4.4) und gemeinsam entscheiden (→ Abschnitt 5.2) besser umsetzbar, als das mit einer eigenen Architekturspalte möglich wäre.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Verwebung von qualitativen und funktionalen Anforderungen auf der Kanban­Tafel macht Architekturentscheidungen treffen (→ Abschnitt 4.4) und gemeinsam entscheiden (→ Abschnitt 5.2) besser umsetzbar, als das mit einer eigenen Architekturspalte möglich wäre.",
      "id": [
        "139822"
      ]
    }
  }
]