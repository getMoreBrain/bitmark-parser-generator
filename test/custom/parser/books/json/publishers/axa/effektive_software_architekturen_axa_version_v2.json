[
  {
    "bitmark": "[.book]\n[@id:297631]\n[@externalId:e-effektive-software-architektur_hq3dnobol71x]\n[#Effektive Software Architekturen - AXA Version]\n[@coverImage:https://docs.bitmark.cloud/bit-books/axa/effektive_software_architekturen_axa_version/web-resources/images/axa_3b_buch_effektive_axaversion_cover.png]\n[@language:de]",
    "bit": {
      "type": "book",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297631"
      ],
      "externalId": [
        "e-effektive-software-architektur_hq3dnobol71x"
      ],
      "title": "Effektive Software Architekturen - AXA Version",
      "coverImage": [
        "https://docs.bitmark.cloud/bit-books/axa/effektive_software_architekturen_axa_version/web-resources/images/axa_3b_buch_effektive_axaversion_cover.png"
      ],
      "language": [
        "de"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297632]\n[▼ch-1]\n[%1]\n[#Einleitung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 1,
      "progress": true,
      "toc": true,
      "id": [
        "297632"
      ],
      "anchor": "ch-1",
      "title": "Einleitung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297633]\n\n__Wir bauen Software wie Kathedralen: zuerst bauen wir – dann beten wir.\nGerhard Chroust__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Wir bauen Software wie Kathedralen: zuerst bauen wir – dann beten wir.\nGerhard Chroust__",
      "id": [
        "297633"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297634]\n\nBitte erlauben Sie mir, Sie mit einer etwas bösartigen kleinen Geschichte zur weiteren Lektüre dieses Buches zu motivieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bitte erlauben Sie mir, Sie mit einer etwas bösartigen kleinen Geschichte zur weiteren Lektüre dieses Buches zu motivieren.",
      "id": [
        "297634"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297635]\n\nEine erfolgreiche Unternehmerin möchte sich ein Domizil errichten lassen. Enge Freunde raten ihr, ein Architekturbüro mit dem Entwurf zu betrauen und die Erstellung begleiten zu lassen. Nur so ließen sich die legendären Probleme beim Hausbau (ungeeignete Entwürfe, mangelnde Koordination, schlechte Ausführung, Pfusch bei Details, Kostenexplosion und Terminüberschreitung) vermeiden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Eine erfolgreiche Unternehmerin möchte sich ein Domizil errichten lassen. Enge Freunde raten ihr, ein Architekturbüro mit dem Entwurf zu betrauen und die Erstellung begleiten zu lassen. Nur so ließen sich die legendären Probleme beim Hausbau (ungeeignete Entwürfe, mangelnde Koordination, schlechte Ausführung, Pfusch bei Details, Kostenexplosion und Terminüberschreitung) vermeiden.",
      "id": [
        "297635"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297636]\n\nUm die für ihr Vorhaben geeigneten Architekten zu finden, beschließt sie, einigen namhaften Büros kleinere Testaufträge für Einfamilienhäuser zu erteilen. Natürlich verrät sie keinem der Kandidaten, dass diese Aufträge eigentlich Tests für das endgültige Unterfangen sind.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Um die für ihr Vorhaben geeigneten Architekten zu finden, beschließt sie, einigen namhaften Büros kleinere Testaufträge für Einfamilienhäuser zu erteilen. Natürlich verrät sie keinem der Kandidaten, dass diese Aufträge eigentlich Tests für das endgültige Unterfangen sind.",
      "id": [
        "297636"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297637]\n\nNach einer entsprechenden Ausschreibung in einigen überregionalen Tageszeitungen trifft unsere Bauherrin folgende Vorauswahl:\n\n• Wasserfall-Architektur KG, Spezialisten für Gebäude und Unterfangen aller Art.\n• V&V Architektur GmbH & Co. KG, Spezialisten für Regierungs-, Prunk- und Profanbauten.\n• Extremarchitekten AG",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Nach einer entsprechenden Ausschreibung in einigen überregionalen Tageszeitungen trifft unsere Bauherrin folgende Vorauswahl:\n\n• Wasserfall-Architektur KG, Spezialisten für Gebäude und Unterfangen aller Art.\n• V&V Architektur GmbH & Co. KG, Spezialisten für Regierungs-, Prunk- und Profanbauten.\n• Extremarchitekten AG",
      "id": [
        "297637"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297638]\n\nAlle Büros erhalten identische Vorgaben: Ihre Aufgabe besteht in Entwurf und Erstellung eines Einfamilienhauses (EFH). Weil unsere Unternehmerin jedoch sehr häufig, manchmal fast sprunghaft, ihre Wünsche und Anforderungen ändert, beschließt sie, die Flexibilität der Kandidaten auch in dieser Hinsicht zu testen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Alle Büros erhalten identische Vorgaben: Ihre Aufgabe besteht in Entwurf und Erstellung eines Einfamilienhauses (EFH). Weil unsere Unternehmerin jedoch sehr häufig, manchmal fast sprunghaft, ihre Wünsche und Anforderungen ändert, beschließt sie, die Flexibilität der Kandidaten auch in dieser Hinsicht zu testen.",
      "id": [
        "297638"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297639]\n\n**Wasserfall-Architektur KG**\n\nDie Firma residiert im 35. Stock eines noblen Bürogebäudes. Dicke Teppiche und holzvertäfelte Wände zeugen vom veritablen Wohlstand der Firmeneigner.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Wasserfall-Architektur KG**\n\nDie Firma residiert im 35. Stock eines noblen Bürogebäudes. Dicke Teppiche und holzvertäfelte Wände zeugen vom veritablen Wohlstand der Firmeneigner.",
      "id": [
        "297639"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297640]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_1.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297640"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_1.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297641]\n\n„Wir entwerfen auch komplexe technische Systeme“, erklärt ein graumelierter Mittfünfziger der Bauherrin bei ihrem ersten Treffen. Sein Titel „Bürovorsteher“ prädestiniert ihn wohl für den Erstkontakt zu dem vermeintlich kleinen Fisch. Von ihm und einer deutlich jüngeren Assistentin wurde sie ausgiebig nach ihren Wünschen hinsichtlich des geplanten Hauses befragt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "„Wir entwerfen auch komplexe technische Systeme“, erklärt ein graumelierter Mittfünfziger der Bauherrin bei ihrem ersten Treffen. Sein Titel „Bürovorsteher“ prädestiniert ihn wohl für den Erstkontakt zu dem vermeintlich kleinen Fisch. Von ihm und einer deutlich jüngeren Assistentin wurde sie ausgiebig nach ihren Wünschen hinsichtlich des geplanten Hauses befragt.",
      "id": [
        "297641"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297642]\n\nAls sie die Frage nach den Türgriffen des Badezimmerschrankes im Obergeschoss nicht spontan beantworten kann, händigt man ihr ein Formblatt aus, das ausführlich ein Change-Management-Verfahren beschreibt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Als sie die Frage nach den Türgriffen des Badezimmerschrankes im Obergeschoss nicht spontan beantworten kann, händigt man ihr ein Formblatt aus, das ausführlich ein Change-Management-Verfahren beschreibt.",
      "id": [
        "297642"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297643]\n\nDas Team der Wasserfall-Architektur KG legte nach wenigen Wochen einen überaus detaillierten Projektplan vor. Gantt-Charts, Work-Breakdown-Struktur, Meilensteine, alles dabei. Die nächsten Monate verbrachte das Team mit der Dokumentation der Anforderungsanalyse sowie dem Entwurf.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Das Team der Wasserfall-Architektur KG legte nach wenigen Wochen einen überaus detaillierten Projektplan vor. Gantt-Charts, Work-Breakdown-Struktur, Meilensteine, alles dabei. Die nächsten Monate verbrachte das Team mit der Dokumentation der Anforderungsanalyse sowie dem Entwurf.",
      "id": [
        "297643"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297644]\n\nPünktlich zum Ende dieser Phase erhielt die Unternehmerin einen Ordner (zweifach) mit fast 400 Seiten Beschreibungeines Hauses. Nicht ganz das von ihr Gewünschte, weil das Entwicklungsteam aus Effizienzgründen und um Zeit zu sparen einige (der Bauherrin nur wenig zusagende) Annahmen über die Größe mancher Räume und die Farbe einiger Tapeten getroffen hatte. Man habe zwar überall groben Sand als Bodenbelag geplant, könne das aber später erweitern. Mit etwas Zement und Wasser vermischt stünden den Hausbewohnern später alle Möglichkeiten offen. Im Rahmen der hierbei erwarteten Änderungen habe das Team vorsorglich die Treppen als Rampe ohne Stufen geplant, um Arbeitern mit Schubkarren den Weg in die oberen Etagen zu erleichtern. Das Begehren unserer Unternehmerin, doch eine normale Treppe einzubauen, wurde dem Change-Management übergeben.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Pünktlich zum Ende dieser Phase erhielt die Unternehmerin einen Ordner (zweifach) mit fast 400 Seiten Beschreibungeines Hauses. Nicht ganz das von ihr Gewünschte, weil das Entwicklungsteam aus Effizienzgründen und um Zeit zu sparen einige (der Bauherrin nur wenig zusagende) Annahmen über die Größe mancher Räume und die Farbe einiger Tapeten getroffen hatte. Man habe zwar überall groben Sand als Bodenbelag geplant, könne das aber später erweitern. Mit etwas Zement und Wasser vermischt stünden den Hausbewohnern später alle Möglichkeiten offen. Im Rahmen der hierbei erwarteten Änderungen habe das Team vorsorglich die Treppen als Rampe ohne Stufen geplant, um Arbeitern mit Schubkarren den Weg in die oberen Etagen zu erleichtern. Das Begehren unserer Unternehmerin, doch eine normale Treppe einzubauen, wurde dem Change-Management übergeben.",
      "id": [
        "297644"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297645]\n\nDie nun folgende Erstellungsphase (die Firma verwendete hierfür den Begriff „Implementierungsphase“) beendete das Team in 13 statt der geplanten 8 Monate. Die fünf Monate Zeitverzug seien durch widrige Umstände hervorgerufen, wie ein Firmensprecher auf Nachfrage erklärte. In Wirklichkeit hatte ein Junior-Planning-Consultant es versäumt, einen Zufahrtsweg für Baufahrzeuge zu planen – das bereits fertiggestellte Gartenhaus musste wieder abgerissen werden, um eine passende Baustraße anlegen zu können.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die nun folgende Erstellungsphase (die Firma verwendete hierfür den Begriff „Implementierungsphase“) beendete das Team in 13 statt der geplanten 8 Monate. Die fünf Monate Zeitverzug seien durch widrige Umstände hervorgerufen, wie ein Firmensprecher auf Nachfrage erklärte. In Wirklichkeit hatte ein Junior-Planning-Consultant es versäumt, einen Zufahrtsweg für Baufahrzeuge zu planen – das bereits fertiggestellte Gartenhaus musste wieder abgerissen werden, um eine passende Baustraße anlegen zu können.",
      "id": [
        "297645"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297646]\n\nAnsonsten hatte das Implementierungsteam einige kleine Schwächen des Entwurfs optimiert. So hatte das Haus statt Treppe nun einen Lastenaufzug, weil sich die ursprünglich geplante Rampe für Schubkarren als zu steil erwies. Das Change-Management verkündete stolz, man habe bereits erste Schritte zur Anpassung des Sandbodens unternommen: Im ganzen Haus seien auf den Sand Teppiche gelegt worden. Leider hatte ein Mitglied des Wartungsteams über den Teppich dann, in sklavischer Befolgung der Planungsvorgaben, Zement und Wasser aufgebracht und mit Hilfe ausgeklügelt brachialer Methoden zu einer rot-grauen zähen Paste vermischt. Man werde sich in der Wartungsphase darum kümmern, hieß es seitens der Firma.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Ansonsten hatte das Implementierungsteam einige kleine Schwächen des Entwurfs optimiert. So hatte das Haus statt Treppe nun einen Lastenaufzug, weil sich die ursprünglich geplante Rampe für Schubkarren als zu steil erwies. Das Change-Management verkündete stolz, man habe bereits erste Schritte zur Anpassung des Sandbodens unternommen: Im ganzen Haus seien auf den Sand Teppiche gelegt worden. Leider hatte ein Mitglied des Wartungsteams über den Teppich dann, in sklavischer Befolgung der Planungsvorgaben, Zement und Wasser aufgebracht und mit Hilfe ausgeklügelt brachialer Methoden zu einer rot-grauen zähen Paste vermischt. Man werde sich in der Wartungsphase darum kümmern, hieß es seitens der Firma.",
      "id": [
        "297646"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297647]\n\nDie zu diesem Zeitpunkt von den Wasserfall-Architekten ausgestellte Vorabrechnung belief sich auf das Doppelte der ursprünglich angebotenen Bausumme. Diese Kostensteigerung habe die Bauherrin durch ihre verspätet artikulierten Zusatzwünsche ausschließlich selbst zu verantworten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die zu diesem Zeitpunkt von den Wasserfall-Architekten ausgestellte Vorabrechnung belief sich auf das Doppelte der ursprünglich angebotenen Bausumme. Diese Kostensteigerung habe die Bauherrin durch ihre verspätet artikulierten Zusatzwünsche ausschließlich selbst zu verantworten.",
      "id": [
        "297647"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297648]\n\n**V&V Architektur GmbH & Co. KG**\n\nDie V&V Architektur GmbH & Co. KG (nachfolgend kurz V&V) hatte sich in den vergangenen Jahren auf Regierungs-, Prunk- und Profanbauten spezialisiert. Mit dem unternehmenseigenen Verfahren, so wird versichert, könne man garantiert jedes Projekt abwickeln. Der von V&V ernannte Projektleiter überraschte unsere Unternehmerin in den ersten Projektwochen mit langen Fragebögen – ohne jeglichen Bezug zum geplanten Haus. Man müsse unbedingt zuerst das Tailoring des Vorgehensmodells durchführen, das Modell exakt dem geplanten Projekt anpassen. Am Ende dieser Phase erhielt sie, in zweifacher Ausfertigung, mehrere Hundert Seiten Dokumentation des geplanten Vorgehens.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**V&V Architektur GmbH & Co. KG**\n\nDie V&V Architektur GmbH & Co. KG (nachfolgend kurz V&V) hatte sich in den vergangenen Jahren auf Regierungs-, Prunk- und Profanbauten spezialisiert. Mit dem unternehmenseigenen Verfahren, so wird versichert, könne man garantiert jedes Projekt abwickeln. Der von V&V ernannte Projektleiter überraschte unsere Unternehmerin in den ersten Projektwochen mit langen Fragebögen – ohne jeglichen Bezug zum geplanten Haus. Man müsse unbedingt zuerst das Tailoring des Vorgehensmodells durchführen, das Modell exakt dem geplanten Projekt anpassen. Am Ende dieser Phase erhielt sie, in zweifacher Ausfertigung, mehrere Hundert Seiten Dokumentation des geplanten Vorgehens.",
      "id": [
        "297648"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297649]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_2.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297649"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_2.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297650]\n\nDass ihr Einfamilienhaus darin nicht erwähnt wurde, sei völlig normal, unterrichtete sie der Projektleiter. Erst jetzt, in der zweiten Phase, würde das konkrete Objekt geplant, spezifiziert, realisiert, qualitätsgesichert und konfigurationsverwaltet.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Dass ihr Einfamilienhaus darin nicht erwähnt wurde, sei völlig normal, unterrichtete sie der Projektleiter. Erst jetzt, in der zweiten Phase, würde das konkrete Objekt geplant, spezifiziert, realisiert, qualitätsgesichert und konfigurationsverwaltet.",
      "id": [
        "297650"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297651]\n\nDer Auftraggeberin wurde zu diesem Zeitpunkt auch das „Direktorat EDV“ der Firma V&V vorgestellt. Nein, diese Abteilung befasste sich nicht mit Datenverarbeitung – die Abkürzung stand für __„Einhaltung Des Vorgehensmodells“__.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Der Auftraggeberin wurde zu diesem Zeitpunkt auch das „Direktorat EDV“ der Firma V&V vorgestellt. Nein, diese Abteilung befasste sich nicht mit Datenverarbeitung – die Abkürzung stand für __„Einhaltung Des Vorgehensmodells“__.",
      "id": [
        "297651"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297652]\n\nNach einigen Monaten Projektlaufzeit stellte unsere Bauherrin im bereits teilweise fertiggestellten Haus störende signalrote Inschriften auf sämtlichen verbauten Teilen fest. Das sei urkundenechte Spezialtinte, die sich garantiert nicht durch Farbe oder Tapete verdecken ließe, erklärte V&V stolz. Für die Qualitätssicherung und das Konfigurationsmanagement seien diese Kennzeichen unbedingt notwendig. Ästhetische Einwände, solche auffälligen Markierungen nicht in Augenhöhe auf Fenster, Türen und Wänden anzubringen, verwarf die Projektleitung mit Hinweis auf Seite 354, Aktivität PL 3.42, Paragraph 9 Absatz 2 des Vorgehensmodells, in dem Größe, Format, Schrifttyp und Layout dieser Kennzeichen verbindlich definiert seien. Die Bauherrin hätte bereits beim Tailoring widersprechen müssen, nun sei es wirklich zu spät.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nach einigen Monaten Projektlaufzeit stellte unsere Bauherrin im bereits teilweise fertiggestellten Haus störende signalrote Inschriften auf sämtlichen verbauten Teilen fest. Das sei urkundenechte Spezialtinte, die sich garantiert nicht durch Farbe oder Tapete verdecken ließe, erklärte V&V stolz. Für die Qualitätssicherung und das Konfigurationsmanagement seien diese Kennzeichen unbedingt notwendig. Ästhetische Einwände, solche auffälligen Markierungen nicht in Augenhöhe auf Fenster, Türen und Wänden anzubringen, verwarf die Projektleitung mit Hinweis auf Seite 354, Aktivität PL 3.42, Paragraph 9 Absatz 2 des Vorgehensmodells, in dem Größe, Format, Schrifttyp und Layout dieser Kennzeichen verbindlich definiert seien. Die Bauherrin hätte bereits beim Tailoring widersprechen müssen, nun sei es wirklich zu spät.",
      "id": [
        "297652"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297653]\n\n**Extrem-Architekten AG**\n\nDie Extrem-Architekten laden unsere Unternehmerin zu Projektbeginn zu einem Planungsspiel ein. Jeden Raum ihres geplanten EFHs soll sie dabei der Wichtigkeit nach mit Gummibärchen bewerten. Die immer nur paarweise auftretenden Architekten versprechen ihr, eine erste funktionsfähige Version des Hauses nach nur 6 Wochen. Auf Planungsunterlagen würde man im Zuge der schnellen Entwicklung verzichten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Extrem-Architekten AG**\n\nDie Extrem-Architekten laden unsere Unternehmerin zu Projektbeginn zu einem Planungsspiel ein. Jeden Raum ihres geplanten EFHs soll sie dabei der Wichtigkeit nach mit Gummibärchen bewerten. Die immer nur paarweise auftretenden Architekten versprechen ihr, eine erste funktionsfähige Version des Hauses nach nur 6 Wochen. Auf Planungsunterlagen würde man im Zuge der schnellen Entwicklung verzichten.",
      "id": [
        "297653"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297654]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_8.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297654"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_8.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297655]\n\nZu Beginn der Arbeiten wurde das Team in einer Art Ritual auf die gemeinsame Vision des Hauses eingeschworen. Wie ein Mantra murmelten alle Teammitglieder ständig mit seltsam gutturaler Betonung die Silben „Einfa-Milien-Haus“, was sich nach einiger Zeit zu „Ei-Mi-Ha“ abschliff. Mehrere Außenstehende wollen gehört haben, das Team baue einen bewohnbaren Eimer. Sie stellten eine überdimensionale Tafel am Rande des Baugeländes auf. Jeder durfte darauf Verbesserungsvorschläge oder Änderungen eintragen. Dies gehöre zu einem Grundprinzip der Firma: „Kollektives geistiges Eigentum: Plannung und Entwurf gehören allen“.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Zu Beginn der Arbeiten wurde das Team in einer Art Ritual auf die gemeinsame Vision des Hauses eingeschworen. Wie ein Mantra murmelten alle Teammitglieder ständig mit seltsam gutturaler Betonung die Silben „Einfa-Milien-Haus“, was sich nach einiger Zeit zu „Ei-Mi-Ha“ abschliff. Mehrere Außenstehende wollen gehört haben, das Team baue einen bewohnbaren Eimer. Sie stellten eine überdimensionale Tafel am Rande des Baugeländes auf. Jeder durfte darauf Verbesserungsvorschläge oder Änderungen eintragen. Dies gehöre zu einem Grundprinzip der Firma: „Kollektives geistiges Eigentum: Plannung und Entwurf gehören allen“.",
      "id": [
        "297655"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297656]\n\nNach exakt 6 Wochen laden die Extrem-Architekten die Unternehmerin zur Besichtigung der ersten funktionsfähigen Version ein. Wieder treten ihr zwei Architekten entgegen, jedoch erkennt sie nur einen davon aus dem Planungsspiel wieder. Der andere arbeitet jetzt bei den Gärtnern. Der ursprüngliche andere Gärtner hilft dem Elektriker, ein Heizungsbauer entwickelt dafür die Statik mit. Auf diese Wiese verbreite sich das Projektwissen im Team, erläutern beide Architekten eifrig.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nach exakt 6 Wochen laden die Extrem-Architekten die Unternehmerin zur Besichtigung der ersten funktionsfähigen Version ein. Wieder treten ihr zwei Architekten entgegen, jedoch erkennt sie nur einen davon aus dem Planungsspiel wieder. Der andere arbeitet jetzt bei den Gärtnern. Der ursprüngliche andere Gärtner hilft dem Elektriker, ein Heizungsbauer entwickelt dafür die Statik mit. Auf diese Wiese verbreite sich das Projektwissen im Team, erläutern beide Architekten eifrig.",
      "id": [
        "297656"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297657]\n\nMan präsentiert ihr einen Wohnwagen. Ihren Hinweis auf fehlende Küche, Keller und Dachgeschoss nehmen die Extrem-Architekten mit großem Interesse auf (ohne ihn jedoch schriftlich zu fixieren).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Man präsentiert ihr einen Wohnwagen. Ihren Hinweis auf fehlende Küche, Keller und Dachgeschoss nehmen die Extrem-Architekten mit großem Interesse auf (ohne ihn jedoch schriftlich zu fixieren).",
      "id": [
        "297657"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297658]\n\nWeitere 6 Wochen später hat das Team eine riesige Grube als Keller ausgehoben und den Wohnwagen auf Holzbohlen provisorisch darüber befestigt. Das Kellerfundament haben ein Zimmermann und ein Statiker gegossen. Leider blieb der Beton zu flüssig. Geeignete Tests seien aber bereits entwickelt, dieser Fehler käme garantiert nie wieder vor.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Weitere 6 Wochen später hat das Team eine riesige Grube als Keller ausgehoben und den Wohnwagen auf Holzbohlen provisorisch darüber befestigt. Das Kellerfundament haben ein Zimmermann und ein Statiker gegossen. Leider blieb der Beton zu flüssig. Geeignete Tests seien aber bereits entwickelt, dieser Fehler käme garantiert nie wieder vor.",
      "id": [
        "297658"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297659]\n\nMehrere weitere 6-Wochen-Zyklen gehen ins Land. Bevor unsere Unternehmerin das Projekt (vorzeitig) für beendet erklärt, findet sie zwar die von ihr gewünschte Küche, leider jedoch im Keller. Ein Refactoring dieses Problems sei nicht effektiv, erklärte man ihr. Dafür habe man im Dach einen Teil der Wohnwagenküche verbaut, sodass insgesamt die Zahl der Küchen-Gummibären erreicht worden sei.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Mehrere weitere 6-Wochen-Zyklen gehen ins Land. Bevor unsere Unternehmerin das Projekt (vorzeitig) für beendet erklärt, findet sie zwar die von ihr gewünschte Küche, leider jedoch im Keller. Ein Refactoring dieses Problems sei nicht effektiv, erklärte man ihr. Dafür habe man im Dach einen Teil der Wohnwagenküche verbaut, sodass insgesamt die Zahl der Küchen-Gummibären erreicht worden sei.",
      "id": [
        "297659"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297660]\n\nDas immer noch flüssige Kellerfundament hat eines der Teams bewogen, auf die Seitenwände des Hauses auf Dauer zu verzichten, um die Lüftung des Kellers sicherzustellen. Im Übrigen besitzt das Haus nur ein Geschoss, das aktuelle Statik-Team (bestehend aus Zimmermann und Gärtner) hat dafür die Garage in 3 Kinderzimmer unterteilt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Das immer noch flüssige Kellerfundament hat eines der Teams bewogen, auf die Seitenwände des Hauses auf Dauer zu verzichten, um die Lüftung des Kellers sicherzustellen. Im Übrigen besitzt das Haus nur ein Geschoss, das aktuelle Statik-Team (bestehend aus Zimmermann und Gärtner) hat dafür die Garage in 3 Kinderzimmer unterteilt.",
      "id": [
        "297660"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297661]\n\nDa das Team nach eigenen Aussagen auf die lästige und schwergewichtige Dokumentation verzichtet hatte, waren auch keine Aufzeichnungen der ursprünglichen Planung mehr erhalten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Da das Team nach eigenen Aussagen auf die lästige und schwergewichtige Dokumentation verzichtet hatte, waren auch keine Aufzeichnungen der ursprünglichen Planung mehr erhalten.",
      "id": [
        "297661"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297662]\n\nIm Nachhinein beriefen sich alle Projektteams auf ihren Erfolg. Niemand hatte bemerkt, dass die Bauherrin keines der „implementierten“ Häuser wirklich akzeptierte.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Im Nachhinein beriefen sich alle Projektteams auf ihren Erfolg. Niemand hatte bemerkt, dass die Bauherrin keines der „implementierten“ Häuser wirklich akzeptierte.",
      "id": [
        "297662"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297663]\n\n**Chaos nur am Bau?**\n\nÄhnlichkeiten mit bekannten Vorgehensweisen der Software-Entwicklung sind durchaus gewollt, denn nicht nur beim Hausbau herrscht Chaos. Auch andere Ingenieurdisziplinen werden ab und zu von Elchen auf die Probe gestellt, obwohl der Maschinenbau über mehr als 200 Jahre Erfahrung verfügt. In der Software-Branche geht es nur unwesentlich besser zu.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Chaos nur am Bau?**\n\nÄhnlichkeiten mit bekannten Vorgehensweisen der Software-Entwicklung sind durchaus gewollt, denn nicht nur beim Hausbau herrscht Chaos. Auch andere Ingenieurdisziplinen werden ab und zu von Elchen auf die Probe gestellt, obwohl der Maschinenbau über mehr als 200 Jahre Erfahrung verfügt. In der Software-Branche geht es nur unwesentlich besser zu.",
      "id": [
        "297663"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297664]\n\nDer regelmäßige Chaos-Report der Standish-Group zeigt eine seit Jahren gleichbleibende Tendenz: Über 30% aller Software-Projekte werden (erfolglos) vorzeitig beendet, in über 50% aller Software-Projekte kommt es zu drastischen Kosten- oder Terminüberschreitungen.1",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Der regelmäßige Chaos-Report der Standish-Group zeigt eine seit Jahren gleichbleibende Tendenz: Über 30% aller Software-Projekte werden (erfolglos) vorzeitig beendet, in über 50% aller Software-Projekte kommt es zu drastischen Kosten- oder Terminüberschreitungen.1",
      "id": [
        "297664"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297665]\n[▼ch-2]\n[%1.1]\n[##Software-Architekten]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297665"
      ],
      "anchor": "ch-2",
      "title": "Software-Architekten"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297666]\n\nSoftware-Architekten allein können diese Probleme nicht lösen. Auftraggeber mit klaren Zielvorstellungen und ein effektives und flexibles Projektmanagement sind wichtige Voraussetzungen für den Projekterfolg, ebenso ein motiviertes und sachkundiges Entwicklungsteam.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Software-Architekten allein können diese Probleme nicht lösen. Auftraggeber mit klaren Zielvorstellungen und ein effektives und flexibles Projektmanagement sind wichtige Voraussetzungen für den Projekterfolg, ebenso ein motiviertes und sachkundiges Entwicklungsteam.",
      "id": [
        "297666"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297667]\n\nArchitekten kommt in Software-Projekten eine besondere Rolle zu:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Architekten kommt in Software-Projekten eine besondere Rolle zu:",
      "id": [
        "297667"
      ]
    }
  },
  {
    "bitmark": "[.note:bitmark--]\n[@id:297668]\nSoftware-Architekten bilden die Schnittstelle zwischen Analyse, Entwurf, Implementierung, Management und Betrieb von Software.",
    "bit": {
      "type": "note",
      "format": "bitmark--",
      "body": "Software-Architekten bilden die Schnittstelle zwischen Analyse, Entwurf, Implementierung, Management und Betrieb von Software.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297668"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297669]\n\n[%Architekten als Anwälte der Kunden]\nDiese verantwortungsvolle Schlüsselrolle bleibt in vielen Projekten oft unbesetzt oder wird nicht angemessen ausgefüllt. Architekten müssen als „Anwälte der Kunden“ arbeiten. Sie müssen garantieren, dass die Anforderungen der Kunden einerseits umsetzbar sind und andererseits auch umgesetzt werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Diese verantwortungsvolle Schlüsselrolle bleibt in vielen Projekten oft unbesetzt oder wird nicht angemessen ausgefüllt. Architekten müssen als „Anwälte der Kunden“ arbeiten. Sie müssen garantieren, dass die Anforderungen der Kunden einerseits umsetzbar sind und andererseits auch umgesetzt werden.",
      "id": [
        "297669"
      ],
      "item": "Architekten als Anwälte der Kunden"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297670]\n\nDas Buch gibt aktiven und angehenden Software-Architekten praktische Ratschläge und Hilfsmittel, diese komplexe Aufgabe effektiver zu erfüllen. Es unterbreitet konkrete Vorschläge, wie Sie als Software-Architekt in der Praxis vorgehen sollten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Das Buch gibt aktiven und angehenden Software-Architekten praktische Ratschläge und Hilfsmittel, diese komplexe Aufgabe effektiver zu erfüllen. Es unterbreitet konkrete Vorschläge, wie Sie als Software-Architekt in der Praxis vorgehen sollten.",
      "id": [
        "297670"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297671]\n\nAuch wenn Sie in anderen Funktionen in Software-Projekten arbeiten, kann dieses Buch Ihnen helfen. Sie werden verstehen, welche Bedeutung Architekturen besitzen und wo die Probleme beim Entwurf von Architekturen liegen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Auch wenn Sie in anderen Funktionen in Software-Projekten arbeiten, kann dieses Buch Ihnen helfen. Sie werden verstehen, welche Bedeutung Architekturen besitzen und wo die Probleme beim Entwurf von Architekturen liegen.",
      "id": [
        "297671"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297672]\n[▼ch-3]\n[%1.2]\n[##Effektiv, agil und pragmatisch]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297672"
      ],
      "anchor": "ch-3",
      "title": "Effektiv, agil und pragmatisch"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297673]\n\nEffektivität, Agilität und Pragmatismus prägen die Grundhaltung erfolgreicher Software-Architekten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Effektivität, Agilität und Pragmatismus prägen die Grundhaltung erfolgreicher Software-Architekten.",
      "id": [
        "297673"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297674]\n\n**Agilität ist notwendig**\n\nSoftware wird in vielen Projekten immer noch als starres, unveränderliches Produkt betrachtet, obwohl Anwender und Auftraggeber laut nach hochgradig flexiblen Lösungen rufen. In der Praxis ähnelt die Software-Entwicklung leider oftmals eher dem Brückenbau: Eine Rheinbrücke bleibt auch in den kommenden Jahren eine Rheinbrücke. Weder verändert sich der Flusslauf, noch wird aus einer Eisenbahnbrücke eine Startbahn für Passagierflugzeuge. Für Software stellt sich die Lage ganz anders dar: Hier kann aus einem abteilungsinternen Informationssystem schnell eine Internet-E-Business-Lösung oder eine lokale Anwendung entstehen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Agilität ist notwendig**\n\nSoftware wird in vielen Projekten immer noch als starres, unveränderliches Produkt betrachtet, obwohl Anwender und Auftraggeber laut nach hochgradig flexiblen Lösungen rufen. In der Praxis ähnelt die Software-Entwicklung leider oftmals eher dem Brückenbau: Eine Rheinbrücke bleibt auch in den kommenden Jahren eine Rheinbrücke. Weder verändert sich der Flusslauf, noch wird aus einer Eisenbahnbrücke eine Startbahn für Passagierflugzeuge. Für Software stellt sich die Lage ganz anders dar: Hier kann aus einem abteilungsinternen Informationssystem schnell eine Internet-E-Business-Lösung oder eine lokale Anwendung entstehen.",
      "id": [
        "297674"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297675]\n\nLangjährige Untersuchungen ergeben, dass sich 10 bis 25% der Anforderungen an Software pro Jahr ändern (Quelle: Peter Hruschka, in [Rupp2001]). Management und Architekten von Software-Projekten müssen sich durch flexible und bedarfsgerechte Vorgehensweisen darauf einstellen. Das Schlüsselwort lautet „Agilität“.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Langjährige Untersuchungen ergeben, dass sich 10 bis 25% der Anforderungen an Software pro Jahr ändern (Quelle: Peter Hruschka, in [Rupp2001]). Management und Architekten von Software-Projekten müssen sich durch flexible und bedarfsgerechte Vorgehensweisen darauf einstellen. Das Schlüsselwort lautet „Agilität“.",
      "id": [
        "297675"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297676]\n\n[%Agilität anstelle starrer Verfahren]\nAgilität und flexibles Vorgehen wird in Software-Projekten an vielen Stellen\ndringend benötigt:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Agilität und flexibles Vorgehen wird in Software-Projekten an vielen Stellen\ndringend benötigt:",
      "id": [
        "297676"
      ],
      "item": "Agilität anstelle starrer Verfahren"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297677]\n\n• Requirements Manager müssen in Projekten flexibel mit Änderungen von Anforderungen umgehen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Requirements Manager müssen in Projekten flexibel mit Änderungen von Anforderungen umgehen.",
      "id": [
        "297677"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297678]\n\n[%Stabile Grundgerüste]\n• Software-Architekturen müssen stabile Grundgerüste bereitstellen, die die Umsetzung neuer und geänderter Anforderungen ermöglichen. In der heutigen Marktsituation müssen solche Änderungen schnell und effektiv erfolgen – oder sie sind wirkungslos.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Software-Architekturen müssen stabile Grundgerüste bereitstellen, die die Umsetzung neuer und geänderter Anforderungen ermöglichen. In der heutigen Marktsituation müssen solche Änderungen schnell und effektiv erfolgen – oder sie sind wirkungslos.",
      "id": [
        "297678"
      ],
      "item": "Stabile Grundgerüste"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297679]\n\n• Projektmanager müssen in der Lage sein, während des Projektverlaufs flexibel auf neue Anforderungen, neue Technologien oder aktualisierte Produkte zu reagieren. Hier bietet risikobasiertes Projektmanagement viele Vorteile gegenüber den strikt am Vorgehensmodell orientierten konventionellen Methoden.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Projektmanager müssen in der Lage sein, während des Projektverlaufs flexibel auf neue Anforderungen, neue Technologien oder aktualisierte Produkte zu reagieren. Hier bietet risikobasiertes Projektmanagement viele Vorteile gegenüber den strikt am Vorgehensmodell orientierten konventionellen Methoden.",
      "id": [
        "297679"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297680]\n\n[%Inhalt wichtiger als Form]\n• Dokumentation muss sich an spezifischen Projektbedürfnissen orientieren, statt an fix vorgegebenen Ergebnistypen. Inhalt ist in flexiblen Projekten wichtiger als Form.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Dokumentation muss sich an spezifischen Projektbedürfnissen orientieren, statt an fix vorgegebenen Ergebnistypen. Inhalt ist in flexiblen Projekten wichtiger als Form.",
      "id": [
        "297680"
      ],
      "item": "Inhalt wichtiger als Form"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297681]\n\n[%Agilität braucht Verantwortung]\n• Agilität erfordert allerdings auch hohe Qualifikation und Professionalität der Beteiligten. Wer in einem agilen Projekt als Architekt arbeitet, kann nicht seinem Chef das Denken überlassen, sondern muss Verantwortung übernehmen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Agilität erfordert allerdings auch hohe Qualifikation und Professionalität der Beteiligten. Wer in einem agilen Projekt als Architekt arbeitet, kann nicht seinem Chef das Denken überlassen, sondern muss Verantwortung übernehmen.",
      "id": [
        "297681"
      ],
      "item": "Agilität braucht Verantwortung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297682]\n\nInsgesamt zählt in einem Projekt nur das Ergebnis. Selten kümmern sich Anwender oder Auftraggeber im Nachhinein um die Einhaltung starrer Vorgehensmodelle.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Insgesamt zählt in einem Projekt nur das Ergebnis. Selten kümmern sich Anwender oder Auftraggeber im Nachhinein um die Einhaltung starrer Vorgehensmodelle.",
      "id": [
        "297682"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297683]\n\nSoftware-Architekten müssen in ihrer Funktion als Schnittstelle zwischen den Projektbeteiligten diesen Ansatz der Agilität aufnehmen und in der Praxis umsetzen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Software-Architekten müssen in ihrer Funktion als Schnittstelle zwischen den Projektbeteiligten diesen Ansatz der Agilität aufnehmen und in der Praxis umsetzen.",
      "id": [
        "297683"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297684]\n\n**Seien Sie agil**\n__Von Peter Hruschka__\n\n|image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_5.png|\n\nAgil heißt beweglich und flexibel sein. Mitdenken statt „Dienst nach Vorschrift“ und Dogma.\n\nKeines der heute verfügbaren Vorgehensmodelle passt für alle Projekte. Eine agile Vorgehensweise beurteilt das jeweilige Risiko der unterschiedlichen Aufgaben bei der Software-Entwicklung und wählt dann die geeigneten Maßnahmen. Folgende Schwerpunkte werden dabei gesetzt:\n• Offen für Änderungen statt Festhalten an alten Plänen\n• Eher Ergebnis-orientiert als Prozess-orientiert\n• „Miteinander darüber reden“ statt „gegeneinander schreiben“\n• Eher Vertrauen als Kontrolle\n• Bottom-up „Best Practices“ austauschen und etablieren statt top-down Vorgaben diktieren\n\nTrotzdem heißt „Agilität“ nicht, Anarchie zuzulassen:\n• Agile Vorgehensmodelle haben Ergebnisse, nur unterscheiden sich diese für unterschiedliche Projekte in Anzahl, Tiefgang und Formalismus.\n• Agile Entwicklung kennt Prozesse, nur lassen diese mehr Spielraum für Alternativen und Kreativität.\n• Agile Methoden setzen auf Verantwortung; es werden jedoch nur notwendige Rollen besetzt.\n\nDas Risiko entscheidet: Jeder Projektleiter, Systemanalytiker, Architekt, Tester und Designer überprüft ständig Risiken und entscheidet in seinem Umfeld über notwendige Maßnahmen, damit aus Risiken keine Probleme werden.\n\n__Dr. Peter Hruschka (hruschka@b-agile.de) ist unabhängiger Trainer und Methodenberater. Er ist Prinzipal der Atlantic Systems Guild, eines internationalen Think Tanks von Methodengurus, deren Bücher den State-of-the-Art wesentlich mitgestaltet haben (www.systemsguild.com).__",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "**Seien Sie agil**\n__Von Peter Hruschka__\n\n|image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_5.png|\n\nAgil heißt beweglich und flexibel sein. Mitdenken statt „Dienst nach Vorschrift“ und Dogma.\n\nKeines der heute verfügbaren Vorgehensmodelle passt für alle Projekte. Eine agile Vorgehensweise beurteilt das jeweilige Risiko der unterschiedlichen Aufgaben bei der Software-Entwicklung und wählt dann die geeigneten Maßnahmen. Folgende Schwerpunkte werden dabei gesetzt:\n• Offen für Änderungen statt Festhalten an alten Plänen\n• Eher Ergebnis-orientiert als Prozess-orientiert\n• „Miteinander darüber reden“ statt „gegeneinander schreiben“\n• Eher Vertrauen als Kontrolle\n• Bottom-up „Best Practices“ austauschen und etablieren statt top-down Vorgaben diktieren\n\nTrotzdem heißt „Agilität“ nicht, Anarchie zuzulassen:\n• Agile Vorgehensmodelle haben Ergebnisse, nur unterscheiden sich diese für unterschiedliche Projekte in Anzahl, Tiefgang und Formalismus.\n• Agile Entwicklung kennt Prozesse, nur lassen diese mehr Spielraum für Alternativen und Kreativität.\n• Agile Methoden setzen auf Verantwortung; es werden jedoch nur notwendige Rollen besetzt.\n\nDas Risiko entscheidet: Jeder Projektleiter, Systemanalytiker, Architekt, Tester und Designer überprüft ständig Risiken und entscheidet in seinem Umfeld über notwendige Maßnahmen, damit aus Risiken keine Probleme werden.\n\n__Dr. Peter Hruschka (hruschka@b-agile.de) ist unabhängiger Trainer und Methodenberater. Er ist Prinzipal der Atlantic Systems Guild, eines internationalen Think Tanks von Methodengurus, deren Bücher den State-of-the-Art wesentlich mitgestaltet haben (www.systemsguild.com).__",
      "id": [
        "297684"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297685]\n\n**Effektiv = Ziele erreichen**\n\nDa das Begriffspaar „effektiv und effizient“ immer wieder für Missverständnisse sorgt, möchte ich die Bedeutung beider Wörter hier kurz gegenüberstellen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Effektiv = Ziele erreichen**\n\nDa das Begriffspaar „effektiv und effizient“ immer wieder für Missverständnisse sorgt, möchte ich die Bedeutung beider Wörter hier kurz gegenüberstellen.",
      "id": [
        "297685"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297686]\n\n[%Effizient = hoher Wirkungsgrad]\nEine Lexikon-Definition des Begriffes „Effizienz“ lautet „Wirkungsgrad“, also das Verhältnis von Aufwand zu Ertrag. Wenn Sie Aufgaben effizient erledigen, dann arbeiten Sie also mit hohem Wirkungsgrad. Sie investieren für den gewünschten Ertrag einen minimalen Aufwand. Spitzensportler etwa vermeiden in ihren Disziplinen überflüssige Bewegungen oder Aktionen, was in hochgradig effizientem Ausführen der jeweiligen Sportart resultiert.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Eine Lexikon-Definition des Begriffes „Effizienz“ lautet „Wirkungsgrad“, also das Verhältnis von Aufwand zu Ertrag. Wenn Sie Aufgaben effizient erledigen, dann arbeiten Sie also mit hohem Wirkungsgrad. Sie investieren für den gewünschten Ertrag einen minimalen Aufwand. Spitzensportler etwa vermeiden in ihren Disziplinen überflüssige Bewegungen oder Aktionen, was in hochgradig effizientem Ausführen der jeweiligen Sportart resultiert.",
      "id": [
        "297686"
      ],
      "item": "Effizient = hoher Wirkungsgrad"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297687]\n\nPrägnant ausgedrückt bedeutet das:\n\n__Effizient = Dinge richtig machen__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Prägnant ausgedrückt bedeutet das:\n\n__Effizient = Dinge richtig machen__",
      "id": [
        "297687"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297688]\n\n[%Effektiv = zielorientiert]\n„Effektiv“ bedeutet zielorientiert. Sie arbeiten effektiv, wenn Sie Dinge erledigen, die zur Erreichung Ihrer konkreten Ziele notwendig sind. Auch für diesen Begriff wieder eine prägnante Definition:\n\n__Effektiv = Die richtigen Dinge machen__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "„Effektiv“ bedeutet zielorientiert. Sie arbeiten effektiv, wenn Sie Dinge erledigen, die zur Erreichung Ihrer konkreten Ziele notwendig sind. Auch für diesen Begriff wieder eine prägnante Definition:\n\n__Effektiv = Die richtigen Dinge machen__",
      "id": [
        "297688"
      ],
      "item": "Effektiv = zielorientiert"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297689]\n\nEs ist viel wichtiger, die richtigen Dinge zu erledigen, als irgendwelche Dinge besonders effizient zu tun.\n\nSoftwarearchitekten müssen in hohem Maße effektiv arbeiten. Kunden und Auftraggeber bestimmen Ziele, Architekten müssen sicherstellen, dass diese Ziele auch erreicht werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Es ist viel wichtiger, die richtigen Dinge zu erledigen, als irgendwelche Dinge besonders effizient zu tun.\n\nSoftwarearchitekten müssen in hohem Maße effektiv arbeiten. Kunden und Auftraggeber bestimmen Ziele, Architekten müssen sicherstellen, dass diese Ziele auch erreicht werden.",
      "id": [
        "297689"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297690]\n\n**Effektiv = Agil und angemessen**\n\nEffektiv bedeutet auch, angemessen und bedarfsgerecht zu agieren. Auf die Entwicklung von Software angewandt heißt das, sich permanent an den Bedürfnissen der Kunden und Auftraggeber zu orientieren (und nicht starr an den Buchstaben eines formalen Vorgehensmodells). Ich plädiere in diesem Buch für Agilität in diesem Sinne.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Effektiv = Agil und angemessen**\n\nEffektiv bedeutet auch, angemessen und bedarfsgerecht zu agieren. Auf die Entwicklung von Software angewandt heißt das, sich permanent an den Bedürfnissen der Kunden und Auftraggeber zu orientieren (und nicht starr an den Buchstaben eines formalen Vorgehensmodells). Ich plädiere in diesem Buch für Agilität in diesem Sinne.",
      "id": [
        "297690"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297691]\n\n**Effektiv = Pragmatisch**\n\nProjekterfolg wird grundsätzlich vom Auftraggeber beurteilt, nicht vom Architekten. Auftraggeber wollen in erster Linie ein produktives System erhalten und nicht die Einhaltung eines starren Vorgehensmodells erzwingen. Architekten müssen daher den Zweck des Systems im Auge behalten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Effektiv = Pragmatisch**\n\nProjekterfolg wird grundsätzlich vom Auftraggeber beurteilt, nicht vom Architekten. Auftraggeber wollen in erster Linie ein produktives System erhalten und nicht die Einhaltung eines starren Vorgehensmodells erzwingen. Architekten müssen daher den Zweck des Systems im Auge behalten.",
      "id": [
        "297691"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297692]\n\nPragmatisches Vorgehen bedeutet:\n• Auf Dogmen und starre Vorschriften zu verzichten, wo sie nicht angemessen sind.\n• Zielorientiert (= effektiv) Lösungen im Sinne der Kunden zu entwickeln.\n• Auf Perfektionismus zu verzichten. 80% des Ertrags erreicht man mit 20% des Aufwands.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Pragmatisches Vorgehen bedeutet:\n• Auf Dogmen und starre Vorschriften zu verzichten, wo sie nicht angemessen sind.\n• Zielorientiert (= effektiv) Lösungen im Sinne der Kunden zu entwickeln.\n• Auf Perfektionismus zu verzichten. 80% des Ertrags erreicht man mit 20% des Aufwands.",
      "id": [
        "297692"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297693]\n[▼ch-4]\n[%1.3]\n[###Wer sollte dieses Buch lesen?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "297693"
      ],
      "anchor": "ch-4",
      "title": "Wer sollte dieses Buch lesen?"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297694]\n\nGrundsätzlich können alle Stakeholder2 von diesem Buch profitieren und erhalten Antworten auf zentrale Fragen.\n- **Kunden und Auftraggeber**\n\n- **Projektmanager:** \n• Warum sollen Sie für Architektur Geld ausgeben? Warum ist Software-Architektur wichtig?\n\n- **Projektleiter:**\n• Was genau bewirkt Architektur im Projekt?\n• Welche Aufgaben erfüllen Software-Architekten?\n• Welche Tätigkeiten unterstützen und vereinfachen sie?\n• Welche Bedeutung hat die Dokumentation von Architekturen („Was bedeuten all diese Symbole?“)?\n• Welche grundlegenden Lösungsansätze gibt es für Architekturen?\n\n- **Software-Architekten**\n• Was sind die Methoden und Werkzeuge unserer Zunft?\n• Wie geht man beim Entwurf von Architekturen sinnvoll vor?\n• Welche praktisch erprobten Heuristiken und Ratschläge gibt es?\n• Wie meistert man die externen Einflussfaktoren, die den Entwurf von Architekturen erschweren?\n• Welche Sichten auf Architekturen benötigt man in der Praxis? Wie entwirft man diese Sichten?\n\n- **Software-Entwickler**\n• Was bedeutet die Architektur für die Implementierung?\n• Welche allgemeinen Prinzipien von Software-Architektur und -Entwurf sollten bei der Implementierung unbedingt befolgt werden?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Grundsätzlich können alle Stakeholder2 von diesem Buch profitieren und erhalten Antworten auf zentrale Fragen.\n- **Kunden und Auftraggeber**\n\n- **Projektmanager:** \n• Warum sollen Sie für Architektur Geld ausgeben? Warum ist Software-Architektur wichtig?\n\n- **Projektleiter:**\n• Was genau bewirkt Architektur im Projekt?\n• Welche Aufgaben erfüllen Software-Architekten?\n• Welche Tätigkeiten unterstützen und vereinfachen sie?\n• Welche Bedeutung hat die Dokumentation von Architekturen („Was bedeuten all diese Symbole?“)?\n• Welche grundlegenden Lösungsansätze gibt es für Architekturen?\n\n- **Software-Architekten**\n• Was sind die Methoden und Werkzeuge unserer Zunft?\n• Wie geht man beim Entwurf von Architekturen sinnvoll vor?\n• Welche praktisch erprobten Heuristiken und Ratschläge gibt es?\n• Wie meistert man die externen Einflussfaktoren, die den Entwurf von Architekturen erschweren?\n• Welche Sichten auf Architekturen benötigt man in der Praxis? Wie entwirft man diese Sichten?\n\n- **Software-Entwickler**\n• Was bedeutet die Architektur für die Implementierung?\n• Welche allgemeinen Prinzipien von Software-Architektur und -Entwurf sollten bei der Implementierung unbedingt befolgt werden?",
      "id": [
        "297694"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297695]\n[▼ch-5]\n[%1.4]\n[##Wegweiser durch das Buch]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.4",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297695"
      ],
      "anchor": "ch-5",
      "title": "Wegweiser durch das Buch"
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297696]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_9.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297696"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_9.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297697]\n\n\n__Kapitel 2__ erläutert die Begriffe „Architektur und Architekt“. Es beantwortet die Fragen nach dem Was, Warum und Wer von Software-Architekturen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Kapitel 2__ erläutert die Begriffe „Architektur und Architekt“. Es beantwortet die Fragen nach dem Was, Warum und Wer von Software-Architekturen.",
      "id": [
        "297697"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297698]\n\n__Kapitel 3__ legt den Grundstock für eine flexible und systematische Vorgehensweise zum Entwurf von Software-Architekturen. Es beschreibt die wesentlichen Aktivitäten bei der Architekturentwicklung, das Vorgehen „im Großen“. Insbesondere erfahren Sie, wie Sie aus den Faktoren, die eine Architektur beeinflussen, angemessene Lösungsstrategien ableiten kann.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Kapitel 3__ legt den Grundstock für eine flexible und systematische Vorgehensweise zum Entwurf von Software-Architekturen. Es beschreibt die wesentlichen Aktivitäten bei der Architekturentwicklung, das Vorgehen „im Großen“. Insbesondere erfahren Sie, wie Sie aus den Faktoren, die eine Architektur beeinflussen, angemessene Lösungsstrategien ableiten kann.",
      "id": [
        "297698"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297699]\n\n[%arc42 Template]\n__Kapitel 4__ beschreibt, wie Sie mit praxisorientierten Sichten Ihre Software-Architekturen kommunizieren und dokumentieren. Jede Sicht beschreibt das System aus einer anderen Perspektive. Außerdem finden Sie hier einige Hinweise für gute Architekturdokumentation (nach arc42) sowie Strukturvorlagen für wichtige Dokumente.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Kapitel 4__ beschreibt, wie Sie mit praxisorientierten Sichten Ihre Software-Architekturen kommunizieren und dokumentieren. Jede Sicht beschreibt das System aus einer anderen Perspektive. Außerdem finden Sie hier einige Hinweise für gute Architekturdokumentation (nach arc42) sowie Strukturvorlagen für wichtige Dokumente.",
      "id": [
        "297699"
      ],
      "item": "arc42 Template"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297700]\n\nPassend dazu fasst __Kapitel 5__ die Modellierungssprache UML 2.0 für Sie zusammen, abgestimmt auf die Bedürfnisse von Software-Architekten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Passend dazu fasst __Kapitel 5__ die Modellierungssprache UML 2.0 für Sie zusammen, abgestimmt auf die Bedürfnisse von Software-Architekten.",
      "id": [
        "297700"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297701]\n\n__Kapitel 6__ widmet sich der Strukturierung von Systemen. Sie finden her Architektur- und Entwurfsmuster sowie Entwurfsprinzipien, die Sie in unterschiedlichen Bereichen der Software-Entwicklung anwenden können. Es gibt Ihnen Werkzeuge an die Hand, um unerwünschte Abhängigkeiten in Ihren Entwürfen zu erkennen und aufzulösen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Kapitel 6__ widmet sich der Strukturierung von Systemen. Sie finden her Architektur- und Entwurfsmuster sowie Entwurfsprinzipien, die Sie in unterschiedlichen Bereichen der Software-Entwicklung anwenden können. Es gibt Ihnen Werkzeuge an die Hand, um unerwünschte Abhängigkeiten in Ihren Entwürfen zu erkennen und aufzulösen.",
      "id": [
        "297701"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297702]\n\n__Kapitel 7__ enthält einen Katalog häufig benötigter Architekturbausteine. Hierzuzählen Persistenz (Datenspeicherung), Integration, Verteilung, Kommunikation, Sicherheit, grafische Benutzeroberflächen, übergreifende Ablaufsteuerung (Workflow Management), Ausnahme- und Fehlerbehandlung sowie Management von Geschäftsregeln.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Kapitel 7__ enthält einen Katalog häufig benötigter Architekturbausteine. Hierzuzählen Persistenz (Datenspeicherung), Integration, Verteilung, Kommunikation, Sicherheit, grafische Benutzeroberflächen, übergreifende Ablaufsteuerung (Workflow Management), Ausnahme- und Fehlerbehandlung sowie Management von Geschäftsregeln.",
      "id": [
        "297702"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297703]\n\n__Kapitel 8__ führt Sie in die Model Driven Architecture (MDA) ein und erklärt, wieso das trotz des Namens nichts mit Software-Architektur zu tun hat. Sie lernen modellbasierte Entwicklung (MDSD) als praxisorientierte Variante von MDA kennen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Kapitel 8__ führt Sie in die Model Driven Architecture (MDA) ein und erklärt, wieso das trotz des Namens nichts mit Software-Architektur zu tun hat. Sie lernen modellbasierte Entwicklung (MDSD) als praxisorientierte Variante von MDA kennen.",
      "id": [
        "297703"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297704]\n\n__Kapitel 9__ erklärt Ihnen die qualitative und szenariobasierte Bewertung von Software-Architekturen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Kapitel 9__ erklärt Ihnen die qualitative und szenariobasierte Bewertung von Software-Architekturen.",
      "id": [
        "297704"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297705]\n\nIn __Kapitel 10__ stelle ich Ihnen die Grundlagen serviceorientierter Architekturen (SOA) vor – sowohl aus geschäftlicher wie aus technischer Sicht.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In __Kapitel 10__ stelle ich Ihnen die Grundlagen serviceorientierter Architekturen (SOA) vor – sowohl aus geschäftlicher wie aus technischer Sicht.",
      "id": [
        "297705"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297706]\n\nSchließlich hebt __Kapitel 11__ Ihren Blick über den Tellerrand reiner Software-und Systemarchitekturen hinaus und führt Sie in die Unternehmens-IT-Architektur ein – neudeutsch Enterprise-IT-Architektur.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Schließlich hebt __Kapitel 11__ Ihren Blick über den Tellerrand reiner Software-und Systemarchitekturen hinaus und führt Sie in die Unternehmens-IT-Architektur ein – neudeutsch Enterprise-IT-Architektur.",
      "id": [
        "297706"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297707]\n\n__Kapitel 12__ enthält Beispiele von Software-Architekturen, beschrieben nach der Strukturvorlage aus Kapitel 4.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Kapitel 12__ enthält Beispiele von Software-Architekturen, beschrieben nach der Strukturvorlage aus Kapitel 4.",
      "id": [
        "297707"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297708]\n\n__Kapitel 13__ erläutert Ihnen, wie der standardisierte Lehrplan des __International Software Architecture Qualification Board__ (ISAQB) inhaltlich mit diesem Buch zusammenhängt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Kapitel 13__ erläutert Ihnen, wie der standardisierte Lehrplan des __International Software Architecture Qualification Board__ (ISAQB) inhaltlich mit diesem Buch zusammenhängt.",
      "id": [
        "297708"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297709]\n\nIn __Kapitel 14__ finden Sie eine etwas __andere__ Zusammenfassung in Form eines Reiseberichtes durch die IT-Welt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In __Kapitel 14__ finden Sie eine etwas __andere__ Zusammenfassung in Form eines Reiseberichtes durch die IT-Welt.",
      "id": [
        "297709"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297710]\n\nJedes Kapitel bietet kommentierte Literaturverweise, die Ihnen Hinweise und Empfehlungen für die Vertiefung des jeweiligen Themas geben.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Jedes Kapitel bietet kommentierte Literaturverweise, die Ihnen Hinweise und Empfehlungen für die Vertiefung des jeweiligen Themas geben.",
      "id": [
        "297710"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297711]\n\n**Tipps, Ratschläge, Heuristiken und Regeln**\n\nDieses Buch enthält viele praktische Tipps, Ratschläge, Heuristiken und Regeln. Damit Sie diese Regeln leichter auffinden können, habe ich sie typografisch durch graue Schattierung hervorgehoben.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "**Tipps, Ratschläge, Heuristiken und Regeln**\n\nDieses Buch enthält viele praktische Tipps, Ratschläge, Heuristiken und Regeln. Damit Sie diese Regeln leichter auffinden können, habe ich sie typografisch durch graue Schattierung hervorgehoben.",
      "id": [
        "297711"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297712]\n[▼ch-6]\n[%1.5]\n[##Webseite zum Buch]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.5",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297712"
      ],
      "anchor": "ch-6",
      "title": "Webseite zum Buch"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297713]\n\n[%Websites: www.esabuch.de]\nAuf der Website www.esabuch.de finden Sie Informationen, die aus Platzgründen ins Internet weichen mussten. Dazu gehören aktuelle Literaturhinweise und Links sowie Hilfsmittel (Templates, Vorlagen) für Software-Architekten zum Download.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Auf der Website www.esabuch.de finden Sie Informationen, die aus Platzgründen ins Internet weichen mussten. Dazu gehören aktuelle Literaturhinweise und Links sowie Hilfsmittel (Templates, Vorlagen) für Software-Architekten zum Download.",
      "id": [
        "297713"
      ],
      "item": "Websites: www.esabuch.de"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297714]\n\n[%www.arc42.de]\nSie sollten unbedingt auf www.arc42.de den aktuellen Stand des praxisnahen und umfassend erprobten Architekturtemplates herunterladen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie sollten unbedingt auf www.arc42.de den aktuellen Stand des praxisnahen und umfassend erprobten Architekturtemplates herunterladen.",
      "id": [
        "297714"
      ],
      "item": "www.arc42.de"
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297715]\n[▼ch-7]\n[%1.6]\n[##Weiterführende Literatur]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.6",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297715"
      ],
      "anchor": "ch-7",
      "title": "Weiterführende Literatur"
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297716]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_7.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297716"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k1/axa_effektive_software_architekturen_k1_7.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297717]\n\n[Beck99] zeigt bewährte Praktiken der Softwareentwicklung, die zum Erfolg von Projekten beitragen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Beck99] zeigt bewährte Praktiken der Softwareentwicklung, die zum Erfolg von Projekten beitragen.",
      "id": [
        "297717"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297718]\n\nJeder, der mit Software-Entwicklung zu tun hat, sollte das überaus pragmatische und praxisnahe Buch [Hunt+03] kennen.\n[DeMarco+07] beschreiben (äußerst humorvoll und gnadenlos wahr) mehr als 80 hilfreiche \"Verhaltensmuster\" aus IT-Projekten – die sollten meiner Meinung nach alle ITler kennen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Jeder, der mit Software-Entwicklung zu tun hat, sollte das überaus pragmatische und praxisnahe Buch [Hunt+03] kennen.\n[DeMarco+07] beschreiben (äußerst humorvoll und gnadenlos wahr) mehr als 80 hilfreiche \"Verhaltensmuster\" aus IT-Projekten – die sollten meiner Meinung nach alle ITler kennen.",
      "id": [
        "297718"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297719]\n\nFür eilige Software-Architekten: In [Starke+09] haben Peter Hruschka und ich in Kurzform die wesentlichen Grundlagen von Software-Architektur und deren Dokumentation und Kommunikation zusammengefasst.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Für eilige Software-Architekten: In [Starke+09] haben Peter Hruschka und ich in Kurzform die wesentlichen Grundlagen von Software-Architektur und deren Dokumentation und Kommunikation zusammengefasst.",
      "id": [
        "297719"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297720]\n\n[VMH97] ist ein Einstieg in das V-Modell, das offizielle Vorgehensmodell zur Entwicklung von IT-Systemen bei deutschen Behörden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[VMH97] ist ein Einstieg in das V-Modell, das offizielle Vorgehensmodell zur Entwicklung von IT-Systemen bei deutschen Behörden.",
      "id": [
        "297720"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297721]\n\nDa die Ursache der meisten Krankheiten in Software-Projekten in menschlichen statt technischen Problemen liegt, lege ich Ihnen die eingehende Lektüre von „Soft-Skills für Informatiker“ nahe ([Vigenschow+07]). Eine wirkliche Bereicherung für (ansonsten technisch ausgerichtete) Softwerker.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Da die Ursache der meisten Krankheiten in Software-Projekten in menschlichen statt technischen Problemen liegt, lege ich Ihnen die eingehende Lektüre von „Soft-Skills für Informatiker“ nahe ([Vigenschow+07]). Eine wirkliche Bereicherung für (ansonsten technisch ausgerichtete) Softwerker.",
      "id": [
        "297721"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297722]\n[▼ch-8]\n[%1.7]\n[##Danksagung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "1.7",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297722"
      ],
      "anchor": "ch-8",
      "title": "Danksagung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297723]\n\nMeinem fachlichen Mentor (und Initiator von b-agile), Peter Hruschka, danke ich für seine konstruktive Kritik, seine motivierenden Kommentare, Humor, Wiener Tee und leckere Pasta al dente.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Meinem fachlichen Mentor (und Initiator von b-agile), Peter Hruschka, danke ich für seine konstruktive Kritik, seine motivierenden Kommentare, Humor, Wiener Tee und leckere Pasta al dente.",
      "id": [
        "297723"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297724]\n\nDanke an meine Traumfrau, Cheffe Uli, für Engelsgeduld, Motivation, und gemeinsamen Latte Macchiato. Du sorgst für mein glückliches Leben!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Danke an meine Traumfrau, Cheffe Uli, für Engelsgeduld, Motivation, und gemeinsamen Latte Macchiato. Du sorgst für mein glückliches Leben!",
      "id": [
        "297724"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297725]\n\nDanke an meine fleißigen, produktiven und geduldigen Mitautoren Kerstin Dittert, Wolfgang Korn, Dr. Martin Bartonitz und André Karalus.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Danke an meine fleißigen, produktiven und geduldigen Mitautoren Kerstin Dittert, Wolfgang Korn, Dr. Martin Bartonitz und André Karalus.",
      "id": [
        "297725"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297726]\n\nDanke an meine Diskussionspartner, Reviewer und Unterstützer, durch deren Hilfe, Kommentare und Ergänzungen das Buch Form (und Inhalt) annehmen konnte: Gerald Baumann, Jens Coldewey, Dirk Däberitz, Mahbouba Gharbi, Holger Günther, Ralf Harder, Wolfgang Keller (alias Mr. Review-Torture), Craig Larman, Margarete Metzger, Klaus Pohl, Uta Pollmann, Mark Ritzmann, Rolf Rosenbaum, Chris Rupp, Martina Schesny, Michael Stal, Klaus Terjung, Stefan Tilkov, Georg Verweyen, Fritz Weichbrodt, Irene Weilhart und Stephan Wendler.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Danke an meine Diskussionspartner, Reviewer und Unterstützer, durch deren Hilfe, Kommentare und Ergänzungen das Buch Form (und Inhalt) annehmen konnte: Gerald Baumann, Jens Coldewey, Dirk Däberitz, Mahbouba Gharbi, Holger Günther, Ralf Harder, Wolfgang Keller (alias Mr. Review-Torture), Craig Larman, Margarete Metzger, Klaus Pohl, Uta Pollmann, Mark Ritzmann, Rolf Rosenbaum, Chris Rupp, Martina Schesny, Michael Stal, Klaus Terjung, Stefan Tilkov, Georg Verweyen, Fritz Weichbrodt, Irene Weilhart und Stephan Wendler.",
      "id": [
        "297726"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297727]\n\nLynn und Per, für die wirklichen Prioritäten. Zeit mit euch ist immer zu kurz.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Lynn und Per, für die wirklichen Prioritäten. Zeit mit euch ist immer zu kurz.",
      "id": [
        "297727"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297728]\n\nZu guter Letzt vielen Dank an meine Kunden, dass ich in Ihren/Euren Projekten so viel über Software-Architekturen erfahren durfte.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Zu guter Letzt vielen Dank an meine Kunden, dass ich in Ihren/Euren Projekten so viel über Software-Architekturen erfahren durfte.",
      "id": [
        "297728"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297729]\n[▼ch-9]\n[%2]\n[#Architektur und Architekten]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 1,
      "progress": true,
      "toc": true,
      "id": [
        "297729"
      ],
      "anchor": "ch-9",
      "title": "Architektur und Architekten"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297730]\n\n__Architecture is about People.__ \n__Norman Foster__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Architecture is about People.__ \n__Norman Foster__",
      "id": [
        "297730"
      ]
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:297731]\n\nFragen, die dieses Kapitel beantwortet: \n\n• Was ist Software-Architektur? \n• Welche Aufgaben erfüllen Software-Architekten? \n• Warum ist Architektur für Software-Systeme wichtig? \n• In welchem Kontext steht Architektur? \n• Wie entstehen Architekturen?",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "Fragen, die dieses Kapitel beantwortet: \n\n• Was ist Software-Architektur? \n• Welche Aufgaben erfüllen Software-Architekten? \n• Warum ist Architektur für Software-Systeme wichtig? \n• In welchem Kontext steht Architektur? \n• Wie entstehen Architekturen?",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297731"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297732]\n\nDieses Kapitel beantwortet die Frage „Was ist Software-Architektur?“. Es beschreibt Architekturen im Kontext der gesamten Softwareentwicklung. Eine zentrale Stellung kommt der vielseitigen Rolle des Software-Architekten zu.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Dieses Kapitel beantwortet die Frage „Was ist Software-Architektur?“. Es beschreibt Architekturen im Kontext der gesamten Softwareentwicklung. Eine zentrale Stellung kommt der vielseitigen Rolle des Software-Architekten zu.",
      "id": [
        "297732"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297733]\n\nSoftwaresysteme werden zunehmend komplexer und umfangreicher. Damit nimmt die Bedeutung von Entwurf und Beschreibung grundlegender Systemstrukturen zu, während die Bedeutung der Auswahl von Programmiersprachen, Algorithmen und Datenstrukturen zurückgeht.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Softwaresysteme werden zunehmend komplexer und umfangreicher. Damit nimmt die Bedeutung von Entwurf und Beschreibung grundlegender Systemstrukturen zu, während die Bedeutung der Auswahl von Programmiersprachen, Algorithmen und Datenstrukturen zurückgeht.",
      "id": [
        "297733"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297734]\n[▼ch-10]\n[%2.1]\n[##Was ist Architektur?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297734"
      ],
      "anchor": "ch-10",
      "title": "Was ist Architektur?"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297735]\n\n__Software-Architektur beschäftigt sich mit Abstraktion, mit Zerlegung und Zusammenbau, mit Stil und Ästhetik. \n[Kruchten95]__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Software-Architektur beschäftigt sich mit Abstraktion, mit Zerlegung und Zusammenbau, mit Stil und Ästhetik. \n[Kruchten95]__",
      "id": [
        "297735"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297736]\n\nDas renommierte Software Engineering Institute (SEI) der US-amerikanischen Carnegie-Mellon-Universität hat vor einiger Zeit den Versuch gestartet, den Begriff „Software-Architektur“ exakt zu definieren. Die entsprechende wartet mit mehr als 50 unterschiedlichen Lesarten des Begriffs auf. Die einschlägige Fachliteratur hält hier mit – mehrere Dutzend unterschiedlicher Definitionen werben um die Gunst des Fachpublikums.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Das renommierte Software Engineering Institute (SEI) der US-amerikanischen Carnegie-Mellon-Universität hat vor einiger Zeit den Versuch gestartet, den Begriff „Software-Architektur“ exakt zu definieren. Die entsprechende wartet mit mehr als 50 unterschiedlichen Lesarten des Begriffs auf. Die einschlägige Fachliteratur hält hier mit – mehrere Dutzend unterschiedlicher Definitionen werben um die Gunst des Fachpublikums.",
      "id": [
        "297736"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297737]\n\nStatt zu dieser verwirrenden Vielfalt beizutragen, möchte ich Ihnen den Begriff „Software-Architektur“ in einigen Absätzen erläutern.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Statt zu dieser verwirrenden Vielfalt beizutragen, möchte ich Ihnen den Begriff „Software-Architektur“ in einigen Absätzen erläutern.",
      "id": [
        "297737"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297738]\n[▼ch-11]\n[####Architektur besteht aus Strukturen]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297738"
      ],
      "anchor": "ch-11",
      "title": "Architektur besteht aus Strukturen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297739]\n\n[%Strukturen, Zerlegung, Schnittstellen, Beziehungen]\nDie Architektur eines Softwaresystems besteht nach [Bass03] aus seinen Strukturen2, der Zerlegung in Komponenten, deren Schnittstellen und Beziehungen untereinander.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Architektur eines Softwaresystems besteht nach [Bass03] aus seinen Strukturen2, der Zerlegung in Komponenten, deren Schnittstellen und Beziehungen untereinander.",
      "id": [
        "297739"
      ],
      "item": "Strukturen, Zerlegung, Schnittstellen, Beziehungen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297740]\n\nArchitektur muss demnach die Komponenten (auch Bausteine genannt, siehe Abschnitt 4.4) eines Systems definieren, deren wesentliche (extern sichtbare) Merkmale beschreiben sowie die Beziehungen zwischen diesen Komponenten charakterisieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Architektur muss demnach die Komponenten (auch Bausteine genannt, siehe Abschnitt 4.4) eines Systems definieren, deren wesentliche (extern sichtbare) Merkmale beschreiben sowie die Beziehungen zwischen diesen Komponenten charakterisieren.",
      "id": [
        "297740"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297741]\n\nDamit beschreibt Architektur sowohl statische als auch dynamische Aspekte. Sie erfüllt sowohl die Aufgabe eines __Bauplans__ als auch die eines __Ablaufplans__ für Software.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Damit beschreibt Architektur sowohl statische als auch dynamische Aspekte. Sie erfüllt sowohl die Aufgabe eines __Bauplans__ als auch die eines __Ablaufplans__ für Software.",
      "id": [
        "297741"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297742]\n[▼ch-12]\n[####Architektur beschreibt eine Lösung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297742"
      ],
      "anchor": "ch-12",
      "title": "Architektur beschreibt eine Lösung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297743]\n\nDie Architektur eines Systems beschreibt ein System im Sinne einer Konstruktionszeichnung oder eines Bauplans. So besteht die Architektur eines Gebäudes aus einer Sammlung von Plänen – nicht aber aus Stein und Zement.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Architektur eines Systems beschreibt ein System im Sinne einer Konstruktionszeichnung oder eines Bauplans. So besteht die Architektur eines Gebäudes aus einer Sammlung von Plänen – nicht aber aus Stein und Zement.",
      "id": [
        "297743"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297744]\n\nFür Softwaresysteme gilt das ebenfalls: Ihre Architektur besteht aus (abstrakten) Komponenten und Schnittstellen, die durch eine konkrete Implementierung zu einem realen System wird.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Für Softwaresysteme gilt das ebenfalls: Ihre Architektur besteht aus (abstrakten) Komponenten und Schnittstellen, die durch eine konkrete Implementierung zu einem realen System wird.",
      "id": [
        "297744"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297745]\n[▼ch-13]\n[####Architektur basiert auf Entwurfsentscheidungen]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297745"
      ],
      "anchor": "ch-13",
      "title": "Architektur basiert auf Entwurfsentscheidungen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297746]\n\n[%Entwurfsentscheidungen]\nDie Architektur eines Softwaresystems resultiert aus einer Vielzahl von Entscheidungen. Einige davon bilden die Grundlage für den Entwurf der Komponenten, andere bestimmen über die Auswahl der eingesetzten Technologie.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Architektur eines Softwaresystems resultiert aus einer Vielzahl von Entscheidungen. Einige davon bilden die Grundlage für den Entwurf der Komponenten, andere bestimmen über die Auswahl der eingesetzten Technologie.",
      "id": [
        "297746"
      ],
      "item": "Entwurfsentscheidungen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297747]\n\nSeien Sie sich als Software-Architekt der Tatsache bewusst, dass Sie die Konsequenz vieler Ihrer Entscheidungen erst viel später bewerten können. So können Sie beispielsweise erst nach einigen Änderungen und Anpassungen eines Systems beurteilen, ob es die gewünschte Änderbarkeit oder Flexibilität auch wirklich erreicht hat.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Seien Sie sich als Software-Architekt der Tatsache bewusst, dass Sie die Konsequenz vieler Ihrer Entscheidungen erst viel später bewerten können. So können Sie beispielsweise erst nach einigen Änderungen und Anpassungen eines Systems beurteilen, ob es die gewünschte Änderbarkeit oder Flexibilität auch wirklich erreicht hat.",
      "id": [
        "297747"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297748]\n\nEntscheidungen von besonderer Tragweite sollten Sie systematisch vorbereiten, treffen und dokumentieren – dazu gibt Ihnen Kapitel 3 weitere Hinweise.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Entscheidungen von besonderer Tragweite sollten Sie systematisch vorbereiten, treffen und dokumentieren – dazu gibt Ihnen Kapitel 3 weitere Hinweise.",
      "id": [
        "297748"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297749]\n[▼ch-14]\n[####Architektur bildet den Übergang von der Analyse zur Realisierung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297749"
      ],
      "anchor": "ch-14",
      "title": "Architektur bildet den Übergang von der Analyse zur Realisierung"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297750]\n\nSoftware-Architektur bildet den schwierigen Übergang von der Analysephase zur konkreten technischen Realisierung. Sie schlägt die Brücke zwischen der Fachdomäne und deren Umsetzung in Software, indem sie die geforderte Funktionalität auf eine Struktur von Softwarekomponenten und deren Beziehungen untereinander abbildet. Welchen Freiheitsgrad Sie als Architekt dabei haben, hängt von der Situation ab, in der Sie die Architektur entwickeln:\n\n• Wenn Sie „auf der grünen Wiese“ entwickeln, sind Sie relativ frei in der Wahl von Komponenten und der Abbildung der Fachdomäne auf Komponenten. \n• Wenn Sie ein Teilsystem innerhalb einer existierenden Systemlandschaft entwickeln, unterliegen Sie starken Restriktionen (die Sie ermitteln müssen). \n• Wenn Sie nach einer vorgegebenen domänen-spezifischen Software-Architektur eines von vielen ähnlichen Systemen entwickeln, reduziert sich die Architektur darauf, Fachlichkeit in eine bestehende Architektur zu gießen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Software-Architektur bildet den schwierigen Übergang von der Analysephase zur konkreten technischen Realisierung. Sie schlägt die Brücke zwischen der Fachdomäne und deren Umsetzung in Software, indem sie die geforderte Funktionalität auf eine Struktur von Softwarekomponenten und deren Beziehungen untereinander abbildet. Welchen Freiheitsgrad Sie als Architekt dabei haben, hängt von der Situation ab, in der Sie die Architektur entwickeln:\n\n• Wenn Sie „auf der grünen Wiese“ entwickeln, sind Sie relativ frei in der Wahl von Komponenten und der Abbildung der Fachdomäne auf Komponenten. \n• Wenn Sie ein Teilsystem innerhalb einer existierenden Systemlandschaft entwickeln, unterliegen Sie starken Restriktionen (die Sie ermitteln müssen). \n• Wenn Sie nach einer vorgegebenen domänen-spezifischen Software-Architektur eines von vielen ähnlichen Systemen entwickeln, reduziert sich die Architektur darauf, Fachlichkeit in eine bestehende Architektur zu gießen.",
      "id": [
        "297750"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297751]\n[▼ch-15]\n[####Architektur besteht aus verschiedenen Sichten]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297751"
      ],
      "anchor": "ch-15",
      "title": "Architektur besteht aus verschiedenen Sichten"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297752]\n\nGebäudearchitekten erstellen eine Vielzahl unterschiedlicher Pläne und Sichten für Gebäude. Einige Beispiele dafür sind Grundriss, Statik, Elektro- und Heizungsplan, 3D-Sicht. Jede dieser einzelnen Sichten dokumentiert einzelne Aspekte des Gesamtsystems. Den verschiedenen Projektbeteiligten wird damit eine spezifische und ihren jeweiligen Belangen angemessene Sicht vermittelt. Jede Sicht ist für bestimmte Stakeholder nützlich.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Gebäudearchitekten erstellen eine Vielzahl unterschiedlicher Pläne und Sichten für Gebäude. Einige Beispiele dafür sind Grundriss, Statik, Elektro- und Heizungsplan, 3D-Sicht. Jede dieser einzelnen Sichten dokumentiert einzelne Aspekte des Gesamtsystems. Den verschiedenen Projektbeteiligten wird damit eine spezifische und ihren jeweiligen Belangen angemessene Sicht vermittelt. Jede Sicht ist für bestimmte Stakeholder nützlich.",
      "id": [
        "297752"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297753]\n\n[%Unterschiedliche Sichten]\nFür Software-Architekturen gilt das völlig analog: Sie sollten Architekturen in unterschiedlichen Sichten beschreiben. Die wichtigsten Sichten für SoftwareArchitekturen sind die Bausteinsicht, die Laufzeitsicht sowie die Verteilungssicht, die eine Abbildung von Laufzeitbausteinen auf technische Infrastruktur (Hardware) beschreibt. Kapitel 4 beschäftigt sich ausführlich mit den Sichten, ihrer Notation und Entwicklung. In Abbildung 2.1 sehen Sie die Sichten im Überblick.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Für Software-Architekturen gilt das völlig analog: Sie sollten Architekturen in unterschiedlichen Sichten beschreiben. Die wichtigsten Sichten für SoftwareArchitekturen sind die Bausteinsicht, die Laufzeitsicht sowie die Verteilungssicht, die eine Abbildung von Laufzeitbausteinen auf technische Infrastruktur (Hardware) beschreibt. Kapitel 4 beschäftigt sich ausführlich mit den Sichten, ihrer Notation und Entwicklung. In Abbildung 2.1 sehen Sie die Sichten im Überblick.",
      "id": [
        "297753"
      ],
      "item": "Unterschiedliche Sichten"
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297754]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_2.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297754"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_2.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297755]\n[▼ch-16]\n[####Architektur schafft Verständlichkeit]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297755"
      ],
      "anchor": "ch-16",
      "title": "Architektur schafft Verständlichkeit"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297756]\n\n[%Architektur schafft Ordnung]\nSoftware-Architekturen machen Komplexität von Systemen beherrschbar und verständlich, indem sie (komplexe) Anforderungen in (geordnete) Strukturen übersetzen und diese Strukturen übersichtlich dokumentieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Software-Architekturen machen Komplexität von Systemen beherrschbar und verständlich, indem sie (komplexe) Anforderungen in (geordnete) Strukturen übersetzen und diese Strukturen übersichtlich dokumentieren.",
      "id": [
        "297756"
      ],
      "item": "Architektur schafft Ordnung"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297757]\n\n[%Architektur ermöglicht Überblick]\nFür alle Projektbeteiligten dokumentieren sie angemessen und problembezogen die Struktur und das Zusammenwirken der einzelnen Komponenten. Architekturen stellen, damit das Verständnis von Systemen für alle Projektbeteiligten sicher:\n \n• Für das Management bilden sie die erste Möglichkeit der Verifikation, ob die Anforderungen erfüllbar sind und erfüllt werden. \n• Für neue Projektmitarbeiter sind Architekturen der erste Schritt, sich mit der Struktur des Systems, seinem Entwurf und seinen Bestandteilen vertraut zu machen. \n• Architekturen ermöglichen Wartungsteams, die betroffenen Bestandteile leichter zu finden und die Folgen von Änderungen abzuschätzen (__impact analysis__). \n• Für Betreiber von Software-Systemen dokumentieren Software-Architekturen, welche Software-Komponenten auf welchen physischen Systemteilen ablaufen. Sie stellen damit die Basis integrierter System-Architekturen dar, die neben Software auch Hardware und Organisationsstrukturen umfassen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Für alle Projektbeteiligten dokumentieren sie angemessen und problembezogen die Struktur und das Zusammenwirken der einzelnen Komponenten. Architekturen stellen, damit das Verständnis von Systemen für alle Projektbeteiligten sicher:\n \n• Für das Management bilden sie die erste Möglichkeit der Verifikation, ob die Anforderungen erfüllbar sind und erfüllt werden. \n• Für neue Projektmitarbeiter sind Architekturen der erste Schritt, sich mit der Struktur des Systems, seinem Entwurf und seinen Bestandteilen vertraut zu machen. \n• Architekturen ermöglichen Wartungsteams, die betroffenen Bestandteile leichter zu finden und die Folgen von Änderungen abzuschätzen (__impact analysis__). \n• Für Betreiber von Software-Systemen dokumentieren Software-Architekturen, welche Software-Komponenten auf welchen physischen Systemteilen ablaufen. Sie stellen damit die Basis integrierter System-Architekturen dar, die neben Software auch Hardware und Organisationsstrukturen umfassen.",
      "id": [
        "297757"
      ],
      "item": "Architektur ermöglicht Überblick"
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297758]\n[▼ch-17]\n[####Architektur ist der Rahmen für flexible Systeme]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297758"
      ],
      "anchor": "ch-17",
      "title": "Architektur ist der Rahmen für flexible Systeme"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297759]\n\n[%Architektur stellt Erweiterbarkeit sicher]\nSoftware-Architektur ist nach Tom DeMarco ein „__framework for change__“. Sie bildet also den Rahmen, der Flexibilität und Erweiterbarkeit von Software sicherstellt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Software-Architektur ist nach Tom DeMarco ein „__framework for change__“. Sie bildet also den Rahmen, der Flexibilität und Erweiterbarkeit von Software sicherstellt.",
      "id": [
        "297759"
      ],
      "item": "Architektur stellt Erweiterbarkeit sicher"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297760]\n\nSoftware-Architekturen berücksichtigen dabei die Auswirkungen externer Einflussfaktoren organisatorischer und technischer Art auf das System. Diese Faktoren sind häufig Auslöser neuer Anforderungen an das System. Sie bestimmen, in welcher Hinsicht das System Flexibilität besitzen muss.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Software-Architekturen berücksichtigen dabei die Auswirkungen externer Einflussfaktoren organisatorischer und technischer Art auf das System. Diese Faktoren sind häufig Auslöser neuer Anforderungen an das System. Sie bestimmen, in welcher Hinsicht das System Flexibilität besitzen muss.",
      "id": [
        "297760"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297761]\n[▼ch-18]\n[####Architektur ist Abstraktion]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297761"
      ],
      "anchor": "ch-18",
      "title": "Architektur ist Abstraktion"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297762]\n\n[%Architektur lässt nicht benötigte Informationen gezielt weg]\nIm ersten Moment mag es Ihnen unglaublich vorkommen: Eine essenzielle Aufgabe von Architekten besteht darin, die für eine bestimmte Aufgabe nicht benötigten Informationen gezielt wegzulassen, zu abstrahieren. Diese Abstraktion besitzt eine Analogie in der Gebäudearchitektur: Eine Grundrisszeichnung enthält beispielsweise keine Informationen über Elektro- und Wasserleitungen. Hier wird bewusst Information gefiltert, um eine spezifische Darstellung der Architektur lesbar und verständlich zu halten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Im ersten Moment mag es Ihnen unglaublich vorkommen: Eine essenzielle Aufgabe von Architekten besteht darin, die für eine bestimmte Aufgabe nicht benötigten Informationen gezielt wegzulassen, zu abstrahieren. Diese Abstraktion besitzt eine Analogie in der Gebäudearchitektur: Eine Grundrisszeichnung enthält beispielsweise keine Informationen über Elektro- und Wasserleitungen. Hier wird bewusst Information gefiltert, um eine spezifische Darstellung der Architektur lesbar und verständlich zu halten.",
      "id": [
        "297762"
      ],
      "item": "Architektur lässt nicht benötigte Informationen gezielt weg"
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297763]\n[▼ch-19]\n[####Architektur schafft Qualität]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297763"
      ],
      "anchor": "ch-19",
      "title": "Architektur schafft Qualität"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297764]\n\nDie Qualität eines Systems bezeichnet die Summe seiner nicht funktionalen Eigenschaften. Hierzu zählen Aspekte wie Performance, Verständlichkeit, Flexibilität und eine Reihe weiterer wichtiger Eigenschaften, die samt und sonders unabhängig von der eigentlichen Funktionalität eines Systems sind.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Qualität eines Systems bezeichnet die Summe seiner nicht funktionalen Eigenschaften. Hierzu zählen Aspekte wie Performance, Verständlichkeit, Flexibilität und eine Reihe weiterer wichtiger Eigenschaften, die samt und sonders unabhängig von der eigentlichen Funktionalität eines Systems sind.",
      "id": [
        "297764"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297765]\n\nAnforderungen an Qualitätseigenschaften, so genannte nichtfunktionale Anforderungen (NF-Anforderungen), stellen häufig die wirklich schwierigen Aufgaben für Software-Architekten dar. Einen bestimmten Algorithmus ohne jegliche NF-Anforderungen zu programmieren, ist erheblich leichter, als dieses Programm gleichzeitig auch noch verständlich, erweiterbar und performant für viele parallele Benutzer zu entwickeln.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Anforderungen an Qualitätseigenschaften, so genannte nichtfunktionale Anforderungen (NF-Anforderungen), stellen häufig die wirklich schwierigen Aufgaben für Software-Architekten dar. Einen bestimmten Algorithmus ohne jegliche NF-Anforderungen zu programmieren, ist erheblich leichter, als dieses Programm gleichzeitig auch noch verständlich, erweiterbar und performant für viele parallele Benutzer zu entwickeln.",
      "id": [
        "297765"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297766]\n\nDie Architektur eines Systems bildet die Basis für dessen Qualität. Sie ist auch die Grundlage, um spezifische Qualitätseigenschaften bewerten zu können (Kapitel 9 erklärt Ihnen die Bewertung von Software-Architekturen).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Architektur eines Systems bildet die Basis für dessen Qualität. Sie ist auch die Grundlage, um spezifische Qualitätseigenschaften bewerten zu können (Kapitel 9 erklärt Ihnen die Bewertung von Software-Architekturen).",
      "id": [
        "297766"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297767]\n\nIn Abschnitt 3.7 (Lösungsstrategien entwickeln) finden Sie Tipps zur Erfüllung typischer Qualitätsanforderungen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In Abschnitt 3.7 (Lösungsstrategien entwickeln) finden Sie Tipps zur Erfüllung typischer Qualitätsanforderungen.",
      "id": [
        "297767"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297768]\n[▼ch-20]\n[####Architektur und Design]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297768"
      ],
      "anchor": "ch-20",
      "title": "Architektur und Design"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297769]\n\n„Architektur“ und „Design“ beschäftigen sich mit dem Entwurf von Systemen. Ich vertrete die Auffassung, dass die Grenze zwischen Software-Architektur und Software-Design fließend ist.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "„Architektur“ und „Design“ beschäftigen sich mit dem Entwurf von Systemen. Ich vertrete die Auffassung, dass die Grenze zwischen Software-Architektur und Software-Design fließend ist.",
      "id": [
        "297769"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297770]\n\nDamit rücken die Begriffe Design und Architektur sehr eng zusammen. Design oder Entwurf bezeichnet den Prozess der Erstellung der Architektur. Die Entwurfsphase konstruiert oder erschafft in diesem Sinne die Architektur.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Damit rücken die Begriffe Design und Architektur sehr eng zusammen. Design oder Entwurf bezeichnet den Prozess der Erstellung der Architektur. Die Entwurfsphase konstruiert oder erschafft in diesem Sinne die Architektur.",
      "id": [
        "297770"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297771]\n\nManchmal gehört der Entwurf einer konkreten Klassenstruktur zur Aufgabe von Architekten, in anderen Fällen werden zusätzliche Designer diese Aufgabe lösen. Gehen Sie mit diesen Begriffen pragmatisch um, und suchen Sie nicht nach einer „formalen“ Definition.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Manchmal gehört der Entwurf einer konkreten Klassenstruktur zur Aufgabe von Architekten, in anderen Fällen werden zusätzliche Designer diese Aufgabe lösen. Gehen Sie mit diesen Begriffen pragmatisch um, und suchen Sie nicht nach einer „formalen“ Definition.",
      "id": [
        "297771"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297772]\n[▼ch-21]\n[####Was NICHT Architektur ist ...]\nBetrachten Sie Abbildung 2.2. Diagramme dieser Art tauchen sehr häufig unter dem Titel „Architekturdiagramm“ auf (nach [Bass98]).",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "Betrachten Sie Abbildung 2.2. Diagramme dieser Art tauchen sehr häufig unter dem Titel „Architekturdiagramm“ auf (nach [Bass98]).",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297772"
      ],
      "anchor": "ch-21",
      "title": "Was NICHT Architektur ist ..."
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297773]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_3.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297773"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_3.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297774]\n\nWelche Informationen können Sie dieser Darstellung entnehmen? \n\n• Das System enthält vier Teile. \n• Drei davon könnten Gemeinsamkeiten aufweisen, weil sie auf einer Ebene angeordnet sind. \n• Die Teile stehen aufgrund der Verbindungslinien in Beziehung zueinander.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Welche Informationen können Sie dieser Darstellung entnehmen? \n\n• Das System enthält vier Teile. \n• Drei davon könnten Gemeinsamkeiten aufweisen, weil sie auf einer Ebene angeordnet sind. \n• Die Teile stehen aufgrund der Verbindungslinien in Beziehung zueinander.",
      "id": [
        "297774"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297775]\n\nEine ganze Reihe wichtiger Informationen fehlen jedoch: \n\n• Um welche Art Komponenten handelt es sich? Müssen sie neu entwickelt werden, oder handelt es sich um vorhandene Systeme? Warum sind sie in der Darstellung getrennt? Bezieht sich diese Trennung eher auf die Laufzeit der Komponenten oder auf ihre Entwicklung in getrennten Teams? Repräsentieren diese Komponenten, Klassen, Objekte, Funktionen, Prozeduren, verteilte oder lokale Subsysteme oder etwas ganz anderes? \n• Welche Bedeutung besitzen die Verbindungen? Kommunizieren jeweils verbundene Komponenten miteinander, kontrollieren sie sich gegenseitig, übermitteln sie sich gegenseitig Daten, rufen sie sich gegenseitig auf, synchronisieren sie sich? Mit welchen Mechanismen wickeln die Komponenten diese Kommunikation oder Zusammenarbeit ab?\n• Besitzen die Komponenten oder das System Schnittstellen zur Außenwelt? \n\nHandelt es sich dabei um eine Benutzer- oder Programmierschnittstelle? \nWelches Ein-/Ausgabeverhalten zeigt das System? \n• Besitzt die grafische Anordnung der Elemente eine Bedeutung? Ruft die Komponente CC die übrigen auf? Bedeutet diese Anordnung eine Hierarchie im Sinne von Verantwortlichkeit? \n• Wie arbeitet dieses System zur Laufzeit? Wie gelangen Daten und Aufrufe von einer Komponente zur anderen? Gibt es von jeder Komponente eine Instanz oder mehrere? \n• Wie lässt sich prüfen, ob das fertig implementierte System der Architektur genügt?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Eine ganze Reihe wichtiger Informationen fehlen jedoch: \n\n• Um welche Art Komponenten handelt es sich? Müssen sie neu entwickelt werden, oder handelt es sich um vorhandene Systeme? Warum sind sie in der Darstellung getrennt? Bezieht sich diese Trennung eher auf die Laufzeit der Komponenten oder auf ihre Entwicklung in getrennten Teams? Repräsentieren diese Komponenten, Klassen, Objekte, Funktionen, Prozeduren, verteilte oder lokale Subsysteme oder etwas ganz anderes? \n• Welche Bedeutung besitzen die Verbindungen? Kommunizieren jeweils verbundene Komponenten miteinander, kontrollieren sie sich gegenseitig, übermitteln sie sich gegenseitig Daten, rufen sie sich gegenseitig auf, synchronisieren sie sich? Mit welchen Mechanismen wickeln die Komponenten diese Kommunikation oder Zusammenarbeit ab?\n• Besitzen die Komponenten oder das System Schnittstellen zur Außenwelt? \n\nHandelt es sich dabei um eine Benutzer- oder Programmierschnittstelle? \nWelches Ein-/Ausgabeverhalten zeigt das System? \n• Besitzt die grafische Anordnung der Elemente eine Bedeutung? Ruft die Komponente CC die übrigen auf? Bedeutet diese Anordnung eine Hierarchie im Sinne von Verantwortlichkeit? \n• Wie arbeitet dieses System zur Laufzeit? Wie gelangen Daten und Aufrufe von einer Komponente zur anderen? Gibt es von jeder Komponente eine Instanz oder mehrere? \n• Wie lässt sich prüfen, ob das fertig implementierte System der Architektur genügt?",
      "id": [
        "297775"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297776]\n\nAnhand dieser Fragen merken Sie, dass dieses Diagramm keine Architektur zeigt, zumindest nicht auf nützliche Art und Weise. Darstellungen dieser Art können Architekturen allenfalls ergänzen, sie bedürfen aber in erheblichem Maße der Präzisierung und Erläuterung.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Anhand dieser Fragen merken Sie, dass dieses Diagramm keine Architektur zeigt, zumindest nicht auf nützliche Art und Weise. Darstellungen dieser Art können Architekturen allenfalls ergänzen, sie bedürfen aber in erheblichem Maße der Präzisierung und Erläuterung.",
      "id": [
        "297776"
      ]
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:297777]\n\nWenn Ihnen jemand die Darstellung einer Architektur vorlegt, stellen Sie folgende Fragen (die in einer guten Architekturdokumentation immer beantwortet sind): \n\n• Welche Verantwortlichkeiten (__responsibilities__) hat jedes der Kästchen und Verbindungslinien im Diagramm? \n• Für jede Verbindungslinie: Warum existiert sie, und welche Semantik oder Bedeutung hat sie? \n• Was wird zu welchem Zeitpunkt auf welche Weise über diese Verbindungen transportiert? \n\nSchon mit diesen einfachen Fragen können Sie praktizierende Architekten in Projekten anregen, ihre Dokumente grundlegend zu verbessern.",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "Wenn Ihnen jemand die Darstellung einer Architektur vorlegt, stellen Sie folgende Fragen (die in einer guten Architekturdokumentation immer beantwortet sind): \n\n• Welche Verantwortlichkeiten (__responsibilities__) hat jedes der Kästchen und Verbindungslinien im Diagramm? \n• Für jede Verbindungslinie: Warum existiert sie, und welche Semantik oder Bedeutung hat sie? \n• Was wird zu welchem Zeitpunkt auf welche Weise über diese Verbindungen transportiert? \n\nSchon mit diesen einfachen Fragen können Sie praktizierende Architekten in Projekten anregen, ihre Dokumente grundlegend zu verbessern.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297777"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297778]\n[▼ch-22]\n[%2.2]\n[##Die Aufgaben von Software-Architekten]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297778"
      ],
      "anchor": "ch-22",
      "title": "Die Aufgaben von Software-Architekten"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297779]\n\n__Das Leben von Software-Architekten besteht aus einer langen und schnellen Abfolge suboptimaler Entwurfsentscheidungen, die meist im Dunkel getroffen werden.__ \n[__Kruchten2001__]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Das Leben von Software-Architekten besteht aus einer langen und schnellen Abfolge suboptimaler Entwurfsentscheidungen, die meist im Dunkel getroffen werden.__ \n{0}",
      "id": [
        "297779"
      ],
      "placeholders": {
        "{0}": {
          "type": "gap",
          "item": "",
          "solutions": [
            "_Kruchten2001__"
          ],
          "hint": "",
          "instruction": "",
          "isCaseSensitive": true,
          "isExample": false,
          "example": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297780]\n\nSoftware-Architekten müssen deutlich mehr leisten, als „nur“ Software-Architekturen zu entwerfen: sie sind die „Anwälte der Kunden“ und die Berater von Projektleitung und Realisierungsteam.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Software-Architekten müssen deutlich mehr leisten, als „nur“ Software-Architekturen zu entwerfen: sie sind die „Anwälte der Kunden“ und die Berater von Projektleitung und Realisierungsteam.",
      "id": [
        "297780"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297781]\n[▼ch-23]\n[####Architekten konstruieren und entwerfen]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297781"
      ],
      "anchor": "ch-23",
      "title": "Architekten konstruieren und entwerfen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297782]\n\nSoftware-Architekten entwerfen und konstruieren alle Bestandteile, die für Entwicklung, Betrieb und Wartung eines Software-Systems notwendig sind:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Software-Architekten entwerfen und konstruieren alle Bestandteile, die für Entwicklung, Betrieb und Wartung eines Software-Systems notwendig sind:",
      "id": [
        "297782"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297783]\n\n[%Verantwortlichkeiten definieren]\n• Komponenten: Architekten konstruieren Systeme aus Komponenten, die ihrerseits wieder komplexe Subsysteme sein können. Architekten definieren die __Verantwortlichkeiten__ von Komponenten.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Komponenten: Architekten konstruieren Systeme aus Komponenten, die ihrerseits wieder komplexe Subsysteme sein können. Architekten definieren die __Verantwortlichkeiten__ von Komponenten.",
      "id": [
        "297783"
      ],
      "item": "Verantwortlichkeiten definieren"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297784]\n\n[%Schnittstellen beschreiben]\n• Schnittstellen: Über Schnittstellen kommuniziert ein System mit der Außenwelt. Schnittstellen beschreiben die „Verträge“, auf deren Basis Komponenten miteinander arbeiten (__design by contract__). Die Zusammenarbeit von Komponenten über Schnittstellen ermöglicht es dem System, mehr zu leisten, als die Summe seiner Einzelteile leistet. Diese Kooperation befähigt ein System, die gewünschte Funktion zu erfüllen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Schnittstellen: Über Schnittstellen kommuniziert ein System mit der Außenwelt. Schnittstellen beschreiben die „Verträge“, auf deren Basis Komponenten miteinander arbeiten (__design by contract__). Die Zusammenarbeit von Komponenten über Schnittstellen ermöglicht es dem System, mehr zu leisten, als die Summe seiner Einzelteile leistet. Diese Kooperation befähigt ein System, die gewünschte Funktion zu erfüllen.",
      "id": [
        "297784"
      ],
      "item": "Schnittstellen beschreiben"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297785]\n\n[%Strukturen entwerfen]\n• Strukturen: Durch Komponenten und ihr Zusammenspiel entwerfen Architekten sowohl statische als auch dynamische Strukturen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Strukturen: Durch Komponenten und ihr Zusammenspiel entwerfen Architekten sowohl statische als auch dynamische Strukturen.",
      "id": [
        "297785"
      ],
      "item": "Strukturen entwerfen"
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297786]\n[▼ch-24]\n[####Architekten entscheiden]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297786"
      ],
      "anchor": "ch-24",
      "title": "Architekten entscheiden"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297787]\n\nDem bekannten Software- und Systemarchitekt Phillipe Kruchten verdanken wir das Zitat zu Beginn dieses Abschnittes 2.2: Er bringt darin einige wesentliche Aspekte von Software-Architekten zum Ausdruck, die ich aus meiner persönlichen Erfahrung vollauf bestätigen kann: \n\n• „... __schnelle Folge suboptimaler Entwurfsentscheidungen__ “: Architekten müssen viele Entscheidungen treffen: Welche Bausteine, welche Schnittstellen, welche Abläufe? Welche technischen Frameworks? Selbst implementieren, kaufen oder einen Mittelweg davon? Welches Teilteam entwickelt welche Komponenten? Wie sollen die Bausteine der Architektur heißen?\n• „... __die meist im Dunkeln getroffen werden__ “: Architekten wissen oftmals nur wenig über die Konsequenzen ihrer Entscheidungen. Teilweise zeigt sich erst Monate (oder Jahre!) später, ob eine Architekturentscheidung vernünftig, angemessen oder sinnvoll war. Darüber hinaus haben Software-Architekten oftmals mit innovativen technischen Frameworks, Betriebssystemen oder sonstigen Dingen zu tun, deren genaues Verhalten Sie gar nicht kennen können. Dabei hilft iteratives Vorgehen erheblich weiter (siehe Abschnitt 2.3).",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Dem bekannten Software- und Systemarchitekt Phillipe Kruchten verdanken wir das Zitat zu Beginn dieses Abschnittes 2.2: Er bringt darin einige wesentliche Aspekte von Software-Architekten zum Ausdruck, die ich aus meiner persönlichen Erfahrung vollauf bestätigen kann: \n\n• „... __schnelle Folge suboptimaler Entwurfsentscheidungen__ “: Architekten müssen viele Entscheidungen treffen: Welche Bausteine, welche Schnittstellen, welche Abläufe? Welche technischen Frameworks? Selbst implementieren, kaufen oder einen Mittelweg davon? Welches Teilteam entwickelt welche Komponenten? Wie sollen die Bausteine der Architektur heißen?\n• „... __die meist im Dunkeln getroffen werden__ “: Architekten wissen oftmals nur wenig über die Konsequenzen ihrer Entscheidungen. Teilweise zeigt sich erst Monate (oder Jahre!) später, ob eine Architekturentscheidung vernünftig, angemessen oder sinnvoll war. Darüber hinaus haben Software-Architekten oftmals mit innovativen technischen Frameworks, Betriebssystemen oder sonstigen Dingen zu tun, deren genaues Verhalten Sie gar nicht kennen können. Dabei hilft iteratives Vorgehen erheblich weiter (siehe Abschnitt 2.3).",
      "id": [
        "297787"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297788]\n\nEntscheidungen großer Tragweite sollten Sie angemessen dokumentieren. Am Anfang von Kapitel 3 finden Sie dazu einen Vorschlag.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Entscheidungen großer Tragweite sollten Sie angemessen dokumentieren. Am Anfang von Kapitel 3 finden Sie dazu einen Vorschlag.",
      "id": [
        "297788"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297789]\n[▼ch-25]\n[####Architekten garantieren die Erfüllung von Anforderungen]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297789"
      ],
      "anchor": "ch-25",
      "title": "Architekten garantieren die Erfüllung von Anforderungen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297790]\n\n[%Architekten belegen Machbarkeit]\nSoftware-Architekten stellen die __Machbarkeit__ und __Erfüllung__ von Anforderungen sicher. Sie gewährleisten, dass Anforderungen einerseits erfüllbar sind und andererseits auch erfüllt werden. Dies bezieht sich sowohl auf die funktionalen Anforderungen (__required capabilities__) als auch auf die nicht funktionalen Anforderungen und Randbedingungen (__required constraints__).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Software-Architekten stellen die __Machbarkeit__ und __Erfüllung__ von Anforderungen sicher. Sie gewährleisten, dass Anforderungen einerseits erfüllbar sind und andererseits auch erfüllt werden. Dies bezieht sich sowohl auf die funktionalen Anforderungen (__required capabilities__) als auch auf die nicht funktionalen Anforderungen und Randbedingungen (__required constraints__).",
      "id": [
        "297790"
      ],
      "item": "Architekten belegen Machbarkeit"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297791]\n\nArchitekten belegen die Machbarkeit des Systems durch Prototypen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Architekten belegen die Machbarkeit des Systems durch Prototypen.",
      "id": [
        "297791"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297792]\n\nNicht zuletzt sorgen Architekten auch dafür, dass Systeme mit angemessenen Kosten realisiert werden können!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nicht zuletzt sorgen Architekten auch dafür, dass Systeme mit angemessenen Kosten realisiert werden können!",
      "id": [
        "297792"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297793]\n[▼ch-26]\n[####Architekten beraten]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297793"
      ],
      "anchor": "ch-26",
      "title": "Architekten beraten"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297794]\n\nSoftware-Architekten beraten andere Projektbeteiligte in architekturrelevanten Fragestellungen. Sie beraten: \n\n• Management und Auftraggeber bei der Projektplanung und -organisation. \n• Auftraggeber und Analyseteams hinsichtlich der Machbarkeit von Anforderungen. Dazu unterstützen sie bei der Bewertung von Kosten und Nutzen von Anforderungen. Sie klären die Auswirkungen von Anforderungen auf die Struktur, die Realisierung und den Betrieb von Systemen. \n• Projektleiter bei der Organisation und Steuerung des Realisierungsteams. \n• die Projektleitung beim Management (technischer) Risiken. Architekten müssen aber auch organisatorische Risiken kennen und berücksichtigen. \n• die Implementierungsteam bei der Umsetzung der Architektur in Software. \n\nDazu müssen Architekten das Team von der Architektur überzeugen und entsprechend ausbilden. \n• die Hardware-Architekten und Betreiber des Systems hinsichtlich der Anforderungen, die das System an die zugrunde liegende Hardware stellt. \n• die Qualitätssicherung hinsichtlich der Kritikalität und Testbarkeit von Systembestandteilen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Software-Architekten beraten andere Projektbeteiligte in architekturrelevanten Fragestellungen. Sie beraten: \n\n• Management und Auftraggeber bei der Projektplanung und -organisation. \n• Auftraggeber und Analyseteams hinsichtlich der Machbarkeit von Anforderungen. Dazu unterstützen sie bei der Bewertung von Kosten und Nutzen von Anforderungen. Sie klären die Auswirkungen von Anforderungen auf die Struktur, die Realisierung und den Betrieb von Systemen. \n• Projektleiter bei der Organisation und Steuerung des Realisierungsteams. \n• die Projektleitung beim Management (technischer) Risiken. Architekten müssen aber auch organisatorische Risiken kennen und berücksichtigen. \n• die Implementierungsteam bei der Umsetzung der Architektur in Software. \n\nDazu müssen Architekten das Team von der Architektur überzeugen und entsprechend ausbilden. \n• die Hardware-Architekten und Betreiber des Systems hinsichtlich der Anforderungen, die das System an die zugrunde liegende Hardware stellt. \n• die Qualitätssicherung hinsichtlich der Kritikalität und Testbarkeit von Systembestandteilen.",
      "id": [
        "297794"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297795]\n[▼ch-27]\n[####Architekten dokumentieren]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297795"
      ],
      "anchor": "ch-27",
      "title": "Architekten dokumentieren"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297796]\n\nDamit Projekte agil, flexibel und kurzfristig wandlungsfähig bleiben, müssen Architekten in hohem Maße angemessen und bedarfsgerecht arbeiten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Damit Projekte agil, flexibel und kurzfristig wandlungsfähig bleiben, müssen Architekten in hohem Maße angemessen und bedarfsgerecht arbeiten.",
      "id": [
        "297796"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297797]\n\n[%Angemessen dokumentieren]\nIm Wesentlichen kommt es darauf an, dass die Dokumentation angemessen ist. Sowohl Art als auch Umfang und Detaillierung müssen sich an den Bedürfnissen der jeweiligen Adressaten orientieren. Manchmal genügt eine kurze Skizze („auf der Rückseite eines gebrauchten Briefumschlags“), manchmal ein detailliertes UML-Diagramm, und in anderen Fällen treffen nur ausführliche und umfangreiche Dokumente die Bedürfnisse der Adressaten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Im Wesentlichen kommt es darauf an, dass die Dokumentation angemessen ist. Sowohl Art als auch Umfang und Detaillierung müssen sich an den Bedürfnissen der jeweiligen Adressaten orientieren. Manchmal genügt eine kurze Skizze („auf der Rückseite eines gebrauchten Briefumschlags“), manchmal ein detailliertes UML-Diagramm, und in anderen Fällen treffen nur ausführliche und umfangreiche Dokumente die Bedürfnisse der Adressaten.",
      "id": [
        "297797"
      ],
      "item": "Angemessen dokumentieren"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297798]\n\nKapitel 4 zeigt Ihnen, wie Sie eine bedarfsgerechte Dokumentation von Architekturen erstellen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Kapitel 4 zeigt Ihnen, wie Sie eine bedarfsgerechte Dokumentation von Architekturen erstellen.",
      "id": [
        "297798"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297799]\n[▼ch-28]\n[####Architekten sind Diplomaten und Akrobaten]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297799"
      ],
      "anchor": "ch-28",
      "title": "Architekten sind Diplomaten und Akrobaten"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297800]\n\nAls Diplomaten schließen Architekten Kompromisse zwischen widersprüchlichen oder konkurrierenden Forderungen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Als Diplomaten schließen Architekten Kompromisse zwischen widersprüchlichen oder konkurrierenden Forderungen.",
      "id": [
        "297800"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297801]\n\n[%Architektur enthält Kompromisse]\nAls Akrobaten balancieren Architekten mit einer Vielzahl von Faktoren, die sich gegenseitig beeinflussen. Tabelle 2.1 zeigt einige solcher Faktoren (nach [Rechtin2000]), die in Wettbewerb miteinander stehen (und für Architekten die Arbeit interessant machen). Abbildung 2.3 zeigt eine Lösung in Abhängigkeit von der Stärke solcher Forderungen und Einflüsse.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Als Akrobaten balancieren Architekten mit einer Vielzahl von Faktoren, die sich gegenseitig beeinflussen. Tabelle 2.1 zeigt einige solcher Faktoren (nach [Rechtin2000]), die in Wettbewerb miteinander stehen (und für Architekten die Arbeit interessant machen). Abbildung 2.3 zeigt eine Lösung in Abhängigkeit von der Stärke solcher Forderungen und Einflüsse.",
      "id": [
        "297801"
      ],
      "item": "Architektur enthält Kompromisse"
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297802]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_4.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297802"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_4.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297803]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_6.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297803"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_6.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297804]\n[▼ch-29]\n[####Architekten vereinfachen]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297804"
      ],
      "anchor": "ch-29",
      "title": "Architekten vereinfachen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297805]\n\n[%Entwurfsprinzipien: Kapitel 6]\nEine wichtige Regel für Architekten lautet:5 Vereinfache! Vereinfache! Vereinfache! Eine andere Lesart lautet: Weniger ist (manchmal) mehr!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Eine wichtige Regel für Architekten lautet:5 Vereinfache! Vereinfache! Vereinfache! Eine andere Lesart lautet: Weniger ist (manchmal) mehr!",
      "id": [
        "297805"
      ],
      "item": "Entwurfsprinzipien: Kapitel 6"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297806]\n\nEinfache Strukturen sind leichter und günstiger realisierbar, einfacher verständlich, weniger fehleranfällig. Die zuverlässigste, preiswerteste und robusteste Komponente eines Systems ist diejenige, die erst gar nicht realisiert werden muss!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Einfache Strukturen sind leichter und günstiger realisierbar, einfacher verständlich, weniger fehleranfällig. Die zuverlässigste, preiswerteste und robusteste Komponente eines Systems ist diejenige, die erst gar nicht realisiert werden muss!",
      "id": [
        "297806"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297807]\n[▼ch-30]\n[####Architekten kommunizieren]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297807"
      ],
      "anchor": "ch-30",
      "title": "Architekten kommunizieren"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297808]\n\n[%Zielerreichung bewerten]\nArchitekten müssen den anderen Stakeholdern die Architektur vermitteln und sie von den Architekturentscheidungen überzeugen. Dazu gehört sowohl der Wille als auch die Fähigkeit, technische Sachverhalte für unterschiedliche Stakeholder angemessen aufzubereiten (siehe Kapitel 4), zu präsentieren und zu diskutieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Architekten müssen den anderen Stakeholdern die Architektur vermitteln und sie von den Architekturentscheidungen überzeugen. Dazu gehört sowohl der Wille als auch die Fähigkeit, technische Sachverhalte für unterschiedliche Stakeholder angemessen aufzubereiten (siehe Kapitel 4), zu präsentieren und zu diskutieren.",
      "id": [
        "297808"
      ],
      "item": "Zielerreichung bewerten"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297809]\n\nGute Software-Architekten zeichnen sich dadurch aus, dass sie ihre Ideen, Entwürfe und Entscheidungen aktiv an die übrigen Projektbeteiligten kommunizieren können. \n\n• Architekten erläutern und argumentieren ihre Entscheidungen, wenn nötig, verteidigen sie diese auch gegen Angriffe. Hierfür benötigen sie diplomatisches Geschick – davon wird im folgenden Abschnitt die Rede sein. \n• Architekten überzeugen das Projektteam von Strukturen und Schnittstellen, indem sie Vor- und Nachteile transparent darstellen und unter den Rahmenbedingungen und Einflüssen des konkreten Projektes gegeneinander abwägen. \n• Architekten präsentieren und vermarkten die Architektur, sodass möglichst alle Projektbeteiligten sie als DIE Architektur akzeptieren und in technischer Hinsicht an einem Strang ziehen. \n• Sie unterrichten und coachen: treten als Berater, Trainer oder Lehrer auf, um das benötigte Know-how im Team zu verbreiten.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Gute Software-Architekten zeichnen sich dadurch aus, dass sie ihre Ideen, Entwürfe und Entscheidungen aktiv an die übrigen Projektbeteiligten kommunizieren können. \n\n• Architekten erläutern und argumentieren ihre Entscheidungen, wenn nötig, verteidigen sie diese auch gegen Angriffe. Hierfür benötigen sie diplomatisches Geschick – davon wird im folgenden Abschnitt die Rede sein. \n• Architekten überzeugen das Projektteam von Strukturen und Schnittstellen, indem sie Vor- und Nachteile transparent darstellen und unter den Rahmenbedingungen und Einflüssen des konkreten Projektes gegeneinander abwägen. \n• Architekten präsentieren und vermarkten die Architektur, sodass möglichst alle Projektbeteiligten sie als DIE Architektur akzeptieren und in technischer Hinsicht an einem Strang ziehen. \n• Sie unterrichten und coachen: treten als Berater, Trainer oder Lehrer auf, um das benötigte Know-how im Team zu verbreiten.",
      "id": [
        "297809"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297810]\n\nFür diese Aufgaben benötigen Software-Architekten starke kommunikative Fähigkeiten, sollten motivieren, präsentieren und argumentieren können. Fundierte technische Kenntnisse stellen lediglich eine __notwendige__ Voraussetzung für diesen Teil der Architekturarbeit dar.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Für diese Aufgaben benötigen Software-Architekten starke kommunikative Fähigkeiten, sollten motivieren, präsentieren und argumentieren können. Fundierte technische Kenntnisse stellen lediglich eine __notwendige__ Voraussetzung für diesen Teil der Architekturarbeit dar.",
      "id": [
        "297810"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297811]\n[▼ch-31]\n[####Architekten bewerten]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297811"
      ],
      "anchor": "ch-31",
      "title": "Architekten bewerten"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297812]\n\nArchitekten müssen die Güte der Architekturen bewerten, um jederzeit den Grad der Zielerreichung zu kennen. Sie müssen wissen, ob und an welchen Stellen der Systeme nichtfunktionale Anforderungen (wie etwa Performance) riskant oder kritisch sind. Aus dieser objektiven Bewertung heraus können Architekten Maßnahmen zur Optimierung oder Risikominderung ableiten – in der Regel gemeinsam mit anderen Projektverantwortlichen. \nMehr zur Bewertung von Architekturen finden Sie in Kapitel 10.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Architekten müssen die Güte der Architekturen bewerten, um jederzeit den Grad der Zielerreichung zu kennen. Sie müssen wissen, ob und an welchen Stellen der Systeme nichtfunktionale Anforderungen (wie etwa Performance) riskant oder kritisch sind. Aus dieser objektiven Bewertung heraus können Architekten Maßnahmen zur Optimierung oder Risikominderung ableiten – in der Regel gemeinsam mit anderen Projektverantwortlichen. \nMehr zur Bewertung von Architekturen finden Sie in Kapitel 10.",
      "id": [
        "297812"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297813]\n[▼ch-32]\n[####Architekten brauchen Mut]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297813"
      ],
      "anchor": "ch-32",
      "title": "Architekten brauchen Mut"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297814]\n\n[%Unter Unsicherheit entscheiden]\nAm Ende eines erfolgreichen Projektes ist es sehr einfach, Entwurfsentscheidungen zu kritisieren. Zu diesem Zeitpunkt weiß man viel über Techniken, Produkte und auch Anforderungen, was Architekten mitten im Projektstress teilweise nur vermuten können. Architekten verfügen aus reinen Zeitgründen oftmals nicht über genügend Informationen, um optimale Entscheidungen zu treffen. Damit das Projekt weiterlaufen kann, müssen Architekten in solchen Fällen Mut zu (möglicherweise) suboptimalen Entscheidungen unter Unsicherheit aufbringen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Am Ende eines erfolgreichen Projektes ist es sehr einfach, Entwurfsentscheidungen zu kritisieren. Zu diesem Zeitpunkt weiß man viel über Techniken, Produkte und auch Anforderungen, was Architekten mitten im Projektstress teilweise nur vermuten können. Architekten verfügen aus reinen Zeitgründen oftmals nicht über genügend Informationen, um optimale Entscheidungen zu treffen. Damit das Projekt weiterlaufen kann, müssen Architekten in solchen Fällen Mut zu (möglicherweise) suboptimalen Entscheidungen unter Unsicherheit aufbringen.",
      "id": [
        "297814"
      ],
      "item": "Unter Unsicherheit entscheiden"
    }
  },
  {
    "bitmark": "[.note:bitmark--]\n[@id:297815]\n\nBeachten Sie den Unterschied zwischen Mut und Waghalsigkeit: \nMutig bedeutet, manche Risiken bewusst einzugehen, auch gegen den Willen anderer. Architekten benötigen Mut zu unbequemen Entscheidungen, zu potenziellen Konflikten mit anderen Projektbeteiligten, zu frühzeitigem Eingeständnis von früheren Fehlentscheidungen. \nWaghalsigkeit hingegen nenne ich schnelle Entscheidungen ohne bewusste Risikoabwägung, ohne Beachtung von Konsequenzen oder ohne Prüfung möglicher Alternativen.",
    "bit": {
      "type": "note",
      "format": "bitmark--",
      "body": "Beachten Sie den Unterschied zwischen Mut und Waghalsigkeit: \nMutig bedeutet, manche Risiken bewusst einzugehen, auch gegen den Willen anderer. Architekten benötigen Mut zu unbequemen Entscheidungen, zu potenziellen Konflikten mit anderen Projektbeteiligten, zu frühzeitigem Eingeständnis von früheren Fehlentscheidungen. \nWaghalsigkeit hingegen nenne ich schnelle Entscheidungen ohne bewusste Risikoabwägung, ohne Beachtung von Konsequenzen oder ohne Prüfung möglicher Alternativen.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297815"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297816]\n\nArchitekten können die Schuld nicht auf diejenigen schieben, die die Anforderungen gestellt haben. Allerdings sollten Architekten die übrigen Projektbeteiligten möglichst frühzeitig auf mögliche Konsequenzen bestimmter (kritischer) Anforderungen hinweisen (und damit das Risikomanagement ihrer Projektleiter unterstützen!).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Architekten können die Schuld nicht auf diejenigen schieben, die die Anforderungen gestellt haben. Allerdings sollten Architekten die übrigen Projektbeteiligten möglichst frühzeitig auf mögliche Konsequenzen bestimmter (kritischer) Anforderungen hinweisen (und damit das Risikomanagement ihrer Projektleiter unterstützen!).",
      "id": [
        "297816"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297817]\n\n[%Modell]\nDie Werkzeuge von Architekten \n\n• Modelle, also vereinfachte Abbildungen und Abstraktionen der Wirklichkeit.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Die Werkzeuge von Architekten \n\n• Modelle, also vereinfachte Abbildungen und Abstraktionen der Wirklichkeit.",
      "id": [
        "297817"
      ],
      "item": "Modell"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297818]\n\n• System-Dokumentationen dienen Architekten als Grundlage effektiver Kommunikation mit anderen Projektbeteiligten. Eine Dokumentation enthält neben Modellen noch weitere Informationen. Siehe dazu Kapitel 4.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• System-Dokumentationen dienen Architekten als Grundlage effektiver Kommunikation mit anderen Projektbeteiligten. Eine Dokumentation enthält neben Modellen noch weitere Informationen. Siehe dazu Kapitel 4.",
      "id": [
        "297818"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297819]\n\n• Heuristiken (griechisch: __heuriskein__, einen Weg finden, führen): Erfahrungen, Regeln, Tipps. Dieses Buch enthält viele solcher Heuristiken und Tipps. Siehe dazu insbesondere Kapitel 6.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Heuristiken (griechisch: __heuriskein__, einen Weg finden, führen): Erfahrungen, Regeln, Tipps. Dieses Buch enthält viele solcher Heuristiken und Tipps. Siehe dazu insbesondere Kapitel 6.",
      "id": [
        "297819"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297820]\n\n• Muster (__patterns__): Einfach anwendbare Vorlagen oder Schablonen für elegante Lösungen zu spezifischen Entwurfsproblemen.6 Durch Muster können Architekten Wiederverwendung auf hohem Niveau betreiben. Beispiele für Entwurfs- und Architekturmuster finden Sie in Kapitel 6.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Muster (__patterns__): Einfach anwendbare Vorlagen oder Schablonen für elegante Lösungen zu spezifischen Entwurfsproblemen.6 Durch Muster können Architekten Wiederverwendung auf hohem Niveau betreiben. Beispiele für Entwurfs- und Architekturmuster finden Sie in Kapitel 6.",
      "id": [
        "297820"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297821]\n\n[%Zerlegung]\n• Zerlegung (Partitionierung): Architekten beherrschen Komplexität durch Zerlegung in Teilprobleme. Sie finden mehr über Zerlegung in Kapitel 6.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Zerlegung (Partitionierung): Architekten beherrschen Komplexität durch Zerlegung in Teilprobleme. Sie finden mehr über Zerlegung in Kapitel 6.",
      "id": [
        "297821"
      ],
      "item": "Zerlegung"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297822]\n\n[%Aggregation]\n• Zusammensetzung (Aggregation): Das Gegenstück zur Zerlegung. Architekten setzen Einzelteile zu Software-Systemen zusammen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Zusammensetzung (Aggregation): Das Gegenstück zur Zerlegung. Architekten setzen Einzelteile zu Software-Systemen zusammen.",
      "id": [
        "297822"
      ],
      "item": "Aggregation"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297823]\n\n[%Iterationen]\n• Iteration: Software-Projekte brauchen iterative Prozesse und kurzfristiges Feedback. Daher sollten auch Architekten in Iterationen und Zyklen vorgehen. Anders ausgedrückt: Bei der Vielzahl von Einflussfaktoren und Anforderungen an Software ist es häufig schwierig, schon im „ersten Wurf“ das Ziel exakt zu treffen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Iteration: Software-Projekte brauchen iterative Prozesse und kurzfristiges Feedback. Daher sollten auch Architekten in Iterationen und Zyklen vorgehen. Anders ausgedrückt: Bei der Vielzahl von Einflussfaktoren und Anforderungen an Software ist es häufig schwierig, schon im „ersten Wurf“ das Ziel exakt zu treffen.",
      "id": [
        "297823"
      ],
      "item": "Iterationen"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297824]\n\n[%Compiler, Debugger, Prototypen]\n• Compiler, Debugger und Prototypen: Diese Hilfsmittel benötigen Architekten, wenn es gilt, das Team bei der Implementierung zu unterstützen, die Machbarkeit von Implementierungsentscheidungen zu verifizieren oder technische Risiken zu überprüfen (__architect also implements__, nach [Coplien95]).",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Compiler, Debugger und Prototypen: Diese Hilfsmittel benötigen Architekten, wenn es gilt, das Team bei der Implementierung zu unterstützen, die Machbarkeit von Implementierungsentscheidungen zu verifizieren oder technische Risiken zu überprüfen (__architect also implements__, nach [Coplien95]).",
      "id": [
        "297824"
      ],
      "item": "Compiler, Debugger, Prototypen"
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297825]\n[▼ch-33]\n[####Fazit: Darum kümmern sich Software-Architekten!]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297825"
      ],
      "anchor": "ch-33",
      "title": "Fazit: Darum kümmern sich Software-Architekten!"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297826]\n\nSie haben in den letzten Abschnitten das Aufgabenspektrum von Software-Architekten kennen gelernt. Abbildung 2.4 stellt Ihnen im Überblick dar, worum sich Software-Architekten in IT-Projekten kümmern sollten. Sie finden darin eine Zusammenstellung typischer technischer und organisatorischer Aspekte, deren Entscheidung in der Verantwortung des Architekten liegt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie haben in den letzten Abschnitten das Aufgabenspektrum von Software-Architekten kennen gelernt. Abbildung 2.4 stellt Ihnen im Überblick dar, worum sich Software-Architekten in IT-Projekten kümmern sollten. Sie finden darin eine Zusammenstellung typischer technischer und organisatorischer Aspekte, deren Entscheidung in der Verantwortung des Architekten liegt.",
      "id": [
        "297826"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297827]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_7]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297827"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_7",
          "showInIndex": false,
          "format": "cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_7",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297828]\n\nDer nächste Abschnitt gibt Ihnen einige Anhaltspunkte, wie Sie die Fülle dieser Aufgaben angehen können: iterativ und in kleinen Teams.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Der nächste Abschnitt gibt Ihnen einige Anhaltspunkte, wie Sie die Fülle dieser Aufgaben angehen können: iterativ und in kleinen Teams.",
      "id": [
        "297828"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297829]\n[▼ch-34]\n[%2.3]\n[##Wie entstehen Architekturen?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297829"
      ],
      "anchor": "ch-34",
      "title": "Wie entstehen Architekturen?"
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297830]\n[▼ch-35]\n[####In Zyklen und Iterationen]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297830"
      ],
      "anchor": "ch-35",
      "title": "In Zyklen und Iterationen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297831]\n\n[%Iterativ und inkrementell vorgehen]\nDie Anforderungen an Software, ihre Randbedingungen und Einflussfaktoren ändern sich. Am Ende eines Projektes sieht die tatsächliche Lösung immer etwas anders aus, als zu Projektbeginn geplant. Die Entwicklung von Software-Systemen ähnelt der Verfolgung von beweglichen Zielen (__moving targets__). Abbildung 2.5 illustriert, wie sich Zwischenlösungen und das bewegliche Ziel im Projektverlauf durch Iterationen immer besser einander annähern.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Anforderungen an Software, ihre Randbedingungen und Einflussfaktoren ändern sich. Am Ende eines Projektes sieht die tatsächliche Lösung immer etwas anders aus, als zu Projektbeginn geplant. Die Entwicklung von Software-Systemen ähnelt der Verfolgung von beweglichen Zielen (__moving targets__). Abbildung 2.5 illustriert, wie sich Zwischenlösungen und das bewegliche Ziel im Projektverlauf durch Iterationen immer besser einander annähern.",
      "id": [
        "297831"
      ],
      "item": "Iterativ und inkrementell vorgehen"
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297832]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_8]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297832"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_8",
          "showInIndex": false,
          "format": "cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_8",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297833]\n\n[%Architecture Business Cycle]\nGute Architekturen entstehen in Zyklen und Iterationen. Entwurfsentscheidungen  können Rückwirkung auf Anforderungen beinhalten und damit auch organisatorische Abläufe beeinflussen (siehe Abbildung 2.6). [Bass98] nennen diesen Zyklus den „__Architecture Business Cycle__“.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Gute Architekturen entstehen in Zyklen und Iterationen. Entwurfsentscheidungen  können Rückwirkung auf Anforderungen beinhalten und damit auch organisatorische Abläufe beeinflussen (siehe Abbildung 2.6). [Bass98] nennen diesen Zyklus den „__Architecture Business Cycle__“.",
      "id": [
        "297833"
      ],
      "item": "Architecture Business Cycle"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297834]\n\nDie Abbildung zeigt, dass sowohl die Architektur als auch das fertige System Rückwirkungen auf die Organisation beinhalten. Architekten gewinnen durch diese Rückkopplungen Erfahrung, indem sie die Auswirkungen der von ihnen gestalteten Systeme auf Organisationen erleben. Beachten Sie in diesem Zusammenhang auch die zeitlose Regel von Conway:7",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Abbildung zeigt, dass sowohl die Architektur als auch das fertige System Rückwirkungen auf die Organisation beinhalten. Architekten gewinnen durch diese Rückkopplungen Erfahrung, indem sie die Auswirkungen der von ihnen gestalteten Systeme auf Organisationen erleben. Beachten Sie in diesem Zusammenhang auch die zeitlose Regel von Conway:7",
      "id": [
        "297834"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297835]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_9]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297835"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_9",
          "showInIndex": false,
          "format": "cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_9",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297836]\n\nArchitekturen, Organisationen und Systeme beeinflussen sich gegenseitig.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Architekturen, Organisationen und Systeme beeinflussen sich gegenseitig.",
      "id": [
        "297836"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297837]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_10]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297837"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_10",
          "showInIndex": false,
          "format": "cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_10",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297838]\n[▼ch-36]\n[####In kleinen Teams]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297838"
      ],
      "anchor": "ch-36",
      "title": "In kleinen Teams"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297839]\n\nGute Architekturen sind das Ergebnis eines kleinen Teams mit dem gemeinsamen Ziel, die Anforderungen des Kunden zu erfüllen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Gute Architekturen sind das Ergebnis eines kleinen Teams mit dem gemeinsamen Ziel, die Anforderungen des Kunden zu erfüllen.",
      "id": [
        "297839"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297840]\n\n[%Gemischte Erfahrung: Software und Fachdomäne]\nZum Erfolg braucht dieses Team eine gute Mischung aus Erfahrungen in Software Engineering und in der jeweiligen Fachdomäne. Es benötigt Flexibilität hinsichtlich seiner internen Struktur und Arbeitsweise. Einzelne werden vielleicht zu Architekten von Subsystemen, andere werden zu fachlichen und organisatorischen Beratern des Kunden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Zum Erfolg braucht dieses Team eine gute Mischung aus Erfahrungen in Software Engineering und in der jeweiligen Fachdomäne. Es benötigt Flexibilität hinsichtlich seiner internen Struktur und Arbeitsweise. Einzelne werden vielleicht zu Architekten von Subsystemen, andere werden zu fachlichen und organisatorischen Beratern des Kunden.",
      "id": [
        "297840"
      ],
      "item": "Gemischte Erfahrung: Software und Fachdomäne"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297841]\n\nWichtig ist jedoch ein klar identifizierter Teamleiter7 mit folgenden Stärken: \n\n• In Konflikten vermitteln und sie lösen. \n• Mutige Entscheidungen treffen. Mutig bedeutet hierbei „zur Not unter Unsicherheit“, es sollte nicht mutig im Sinne unerprobter Technologie sein.\n• Motivieren. \n• Kommunizieren. \n• Strukturieren.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Wichtig ist jedoch ein klar identifizierter Teamleiter7 mit folgenden Stärken: \n\n• In Konflikten vermitteln und sie lösen. \n• Mutige Entscheidungen treffen. Mutig bedeutet hierbei „zur Not unter Unsicherheit“, es sollte nicht mutig im Sinne unerprobter Technologie sein.\n• Motivieren. \n• Kommunizieren. \n• Strukturieren.",
      "id": [
        "297841"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297842]\n\n[%Vorgehen: Kapitel 3 und 6]\nAls Antwort auf die Frage nach dem „Wie“ von Software-Architekturen stelle ich Ihnen in Kapitel 3 und 6 eine flexible und systematische Vorgehensweise vor, mit der Sie Architekturen entwerfen können.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Als Antwort auf die Frage nach dem „Wie“ von Software-Architekturen stelle ich Ihnen in Kapitel 3 und 6 eine flexible und systematische Vorgehensweise vor, mit der Sie Architekturen entwerfen können.",
      "id": [
        "297842"
      ],
      "item": "Vorgehen: Kapitel 3 und 6"
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297843]\n[▼ch-37]\n[####Wie Architekturen nicht entstehen sollten]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297843"
      ],
      "anchor": "ch-37",
      "title": "Wie Architekturen nicht entstehen sollten"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297844]\n\n• Im Architekturkomitee, das jeden Donnerstag um 15 Uhr im großen Besprechungsraum tagt. \n• Im Elfenbeinturm, losgelöst von Kunden, Auftraggebern, der Projektleitung und dem Realisierungsteam. \n• Nur auf bunten Marketing-Folien.9\n• Als „Wir machen jetzt <Name-der-bevorzugten-Technologie>“. Die Datenbank ist nicht die Architektur, ebenso wenig das Netzwerk, der Transaktionsmonitor, CORBA, die 4-GL-Sprache oder ein beliebiger Standard. Diese Begriffe sind Teile oder Aspekte der Architektur, aber die Architektur kann nicht nur aus einem isolierten Aspekt bestehen [Kruchten2001].",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Im Architekturkomitee, das jeden Donnerstag um 15 Uhr im großen Besprechungsraum tagt. \n• Im Elfenbeinturm, losgelöst von Kunden, Auftraggebern, der Projektleitung und dem Realisierungsteam. \n• Nur auf bunten Marketing-Folien.9\n• Als „Wir machen jetzt <Name-der-bevorzugten-Technologie>“. Die Datenbank ist nicht die Architektur, ebenso wenig das Netzwerk, der Transaktionsmonitor, CORBA, die 4-GL-Sprache oder ein beliebiger Standard. Diese Begriffe sind Teile oder Aspekte der Architektur, aber die Architektur kann nicht nur aus einem isolierten Aspekt bestehen [Kruchten2001].",
      "id": [
        "297844"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297845]\n[▼ch-38]\n[%2.4]\n[##In welchem Kontext steht Architektur?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.4",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297845"
      ],
      "anchor": "ch-38",
      "title": "In welchem Kontext steht Architektur?"
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297846]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_11]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297846"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_11",
          "showInIndex": false,
          "format": "cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_11",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297847]\n\n[%Zentrale Rolle]\nIn Softwareprojekten nimmt Architektur eine der zentralen Rollen ein. Sie fungiert als Brücke zwischen Analyse und Implementierung. Gleichzeitig dient die Architektur fast allen Projektbeteiligten als Leitbild oder Referenz.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In Softwareprojekten nimmt Architektur eine der zentralen Rollen ein. Sie fungiert als Brücke zwischen Analyse und Implementierung. Gleichzeitig dient die Architektur fast allen Projektbeteiligten als Leitbild oder Referenz.",
      "id": [
        "297847"
      ],
      "item": "Zentrale Rolle"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297848]\n\nAbbildung 2.7 zeigt, wie Softwarearchitektur mit anderen Entwicklungsaktivitäten zusammenhängt. In allen Fällen beeinflussen sich die Aktivitäten gegenseitig.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Abbildung 2.7 zeigt, wie Softwarearchitektur mit anderen Entwicklungsaktivitäten zusammenhängt. In allen Fällen beeinflussen sich die Aktivitäten gegenseitig.",
      "id": [
        "297848"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297849]\n\nDas stellt ein weiteres Argument für die iterative Entwicklung dar. Nur durch Iterationen können Architekten die gegenseitigen Einflüsse aufeinander abstimmen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Das stellt ein weiteres Argument für die iterative Entwicklung dar. Nur durch Iterationen können Architekten die gegenseitigen Einflüsse aufeinander abstimmen.",
      "id": [
        "297849"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297850]\n[▼ch-39]\n[####Architektur und Anforderungsanalyse]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297850"
      ],
      "anchor": "ch-39",
      "title": "Architektur und Anforderungsanalyse"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297851]\n\nIn der Anforderungsanalyse werden die fachlichen und technischen Anforderungen an das System formuliert. Dazu gehören: \n\n• funktionale Anforderungen (Required Capabilities); \n• nichtfunktionale (Qualitäts-)Anforderungen (Required Constraints).",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "In der Anforderungsanalyse werden die fachlichen und technischen Anforderungen an das System formuliert. Dazu gehören: \n\n• funktionale Anforderungen (Required Capabilities); \n• nichtfunktionale (Qualitäts-)Anforderungen (Required Constraints).",
      "id": [
        "297851"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297852]\n\nAuf Basis dieser Anforderungen und der externen Einflussfaktoren entsteht die Softwarearchitektur. Architekten prüfen die genannten Anforderungen hinsichtlich ihrer Umsetzbarkeit und stimmen gegebenenfalls Änderungen mit den Analyseteams ab.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Auf Basis dieser Anforderungen und der externen Einflussfaktoren entsteht die Softwarearchitektur. Architekten prüfen die genannten Anforderungen hinsichtlich ihrer Umsetzbarkeit und stimmen gegebenenfalls Änderungen mit den Analyseteams ab.",
      "id": [
        "297852"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297853]\n\n[%Architektur beeinflusst Anforderungen]\nHierbei kommt es häufig vor, dass die Architektur weitreichende Rückwirkungen auf die Anforderungen hat. Architekten entscheiden häufig über die technische Machbarkeit fachlicher Anforderungen. Sie üben damit auch maßgeblichen Einfluss auf die detaillierte Projektplanung aus. Ein Auftraggeber wird eventuell auf eine „teure“ Anforderung verzichten, um den Erfolg des Gesamtprojektes zu sichern oder ein vernünftiges Kosten/Nutzen-Verhältnis einzuhalten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Hierbei kommt es häufig vor, dass die Architektur weitreichende Rückwirkungen auf die Anforderungen hat. Architekten entscheiden häufig über die technische Machbarkeit fachlicher Anforderungen. Sie üben damit auch maßgeblichen Einfluss auf die detaillierte Projektplanung aus. Ein Auftraggeber wird eventuell auf eine „teure“ Anforderung verzichten, um den Erfolg des Gesamtprojektes zu sichern oder ein vernünftiges Kosten/Nutzen-Verhältnis einzuhalten.",
      "id": [
        "297853"
      ],
      "item": "Architektur beeinflusst Anforderungen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297854]\n\nEs gehört zur Aufgabe des Architekten, die Anforderungen zu präzisieren, sie zu vervollständigen, ihre Auswirkungen zu prüfen und ihre Machbarkeit sicherzustellen!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Es gehört zur Aufgabe des Architekten, die Anforderungen zu präzisieren, sie zu vervollständigen, ihre Auswirkungen zu prüfen und ihre Machbarkeit sicherzustellen!",
      "id": [
        "297854"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297855]\n\n__Ein Architekt, der zu Beginn seiner Arbeit vollständige und konsistente Anforderungen benötigt, mag ein brillanter Entwickler sein – aber er ist kein Architekt. \n[Rechtin2000]__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Ein Architekt, der zu Beginn seiner Arbeit vollständige und konsistente Anforderungen benötigt, mag ein brillanter Entwickler sein – aber er ist kein Architekt. \n[Rechtin2000]__",
      "id": [
        "297855"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297856]\n\n[%Analyse = das Richtige entwickeln]\nDie Analysephase eines Projektes bestimmt oftmals dessen fachlichen Umfang (__scope__). Sie stellt sicher, dass das „richtige“ System entwickelt wird. Die Entwurfsphase stellt sicher, dass man das System „richtig“ entwickelt (nach [Larmann2001]).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Analysephase eines Projektes bestimmt oftmals dessen fachlichen Umfang (__scope__). Sie stellt sicher, dass das „richtige“ System entwickelt wird. Die Entwurfsphase stellt sicher, dass man das System „richtig“ entwickelt (nach [Larmann2001]).",
      "id": [
        "297856"
      ],
      "item": "Analyse = das Richtige entwickeln"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297857]\n\n[%Entwurf = richtig entwickeln]\nDer Scope eines Projektes ist die wichtigste Entscheidung überhaupt. Ein unklar definierter und bei den Entscheidern umstrittener Projektumfang gehört zu den größten Projektrisiken!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Der Scope eines Projektes ist die wichtigste Entscheidung überhaupt. Ein unklar definierter und bei den Entscheidern umstrittener Projektumfang gehört zu den größten Projektrisiken!",
      "id": [
        "297857"
      ],
      "item": "Entwurf = richtig entwickeln"
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297858]\n[▼ch-40]\n[####Architektur und Projektplanung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297858"
      ],
      "anchor": "ch-40",
      "title": "Architektur und Projektplanung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297859]\n\n[%Aufgabenplanung]\nGroßen Einfluss besitzt die Architektur auch auf die Projektplanung. Auf Basis der zu realisierenden Komponenten und Schnittstellen kann die Projektleiterin eine detaillierte und realistische __Work Breakdown Structure__ und einen entsprechenden Projektplan erstellen.10 Die Architektur bietet der Projektleitung die Möglichkeit, eine detaillierte Aufgabenplanung vorzunehmen, insbesondere für die Aktivitäten innerhalb der Implementierungsphase sowie die Hard- und Softwarebeschaffung für Entwicklungs-, Test- und Produktionsumgebung.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Großen Einfluss besitzt die Architektur auch auf die Projektplanung. Auf Basis der zu realisierenden Komponenten und Schnittstellen kann die Projektleiterin eine detaillierte und realistische __Work Breakdown Structure__ und einen entsprechenden Projektplan erstellen.10 Die Architektur bietet der Projektleitung die Möglichkeit, eine detaillierte Aufgabenplanung vorzunehmen, insbesondere für die Aktivitäten innerhalb der Implementierungsphase sowie die Hard- und Softwarebeschaffung für Entwicklungs-, Test- und Produktionsumgebung.",
      "id": [
        "297859"
      ],
      "item": "Aufgabenplanung"
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297860]\n[▼ch-41]\n[####Architektur und Risikoanalyse]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297860"
      ],
      "anchor": "ch-41",
      "title": "Architektur und Risikoanalyse"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297861]\n\n[%Risikomanagement]\nArchitekten können (und sollten) zur Risikoanalyse und zum Risikomanagement von Projekten erheblich beitragen. Sie können technische und organisatorische Risiken erkennen und bewerten und darauf abgestimmte, angemessene Lösungsstrategien zusammen mit der Projektleitung entwickeln.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Architekten können (und sollten) zur Risikoanalyse und zum Risikomanagement von Projekten erheblich beitragen. Sie können technische und organisatorische Risiken erkennen und bewerten und darauf abgestimmte, angemessene Lösungsstrategien zusammen mit der Projektleitung entwickeln.",
      "id": [
        "297861"
      ],
      "item": "Risikomanagement"
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:297862]\n\nArbeiten Sie als Architekt beim Risikomanagement eng mit Projektleitung, Kunden und Auftraggebern zusammen. Das gibt Ihnen die Möglichkeit, Risiken und passende Maßnahmen im Sinne von Lösungsstrategien aktiv zu steuern.",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "Arbeiten Sie als Architekt beim Risikomanagement eng mit Projektleitung, Kunden und Auftraggebern zusammen. Das gibt Ihnen die Möglichkeit, Risiken und passende Maßnahmen im Sinne von Lösungsstrategien aktiv zu steuern.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297862"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297863]\n\nMehr über Risikomanagement, Einflussfaktoren und Lösungsstrategien finden Sie in Kapitel 3.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Mehr über Risikomanagement, Einflussfaktoren und Lösungsstrategien finden Sie in Kapitel 3.",
      "id": [
        "297863"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297864]\n[▼ch-42]\n[####Architektur und Organisationskontext]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297864"
      ],
      "anchor": "ch-42",
      "title": "Architektur und Organisationskontext"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297865]\n\n[%Organisatorische Faktoren: Kapitel 3]\nSoftwaresysteme entstehen in einem organisatorischen Kontext, der ihre Entwicklung und damit verbunden auch die resultierende Architektur maßgeblich beeinflusst. Zu den organisatorischen Faktoren zählen etwa: \n\n• Entwicklungsprozess \n• Motivation und Erfahrung aller Beteiligten \n• Termin- und Kostendruck",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Softwaresysteme entstehen in einem organisatorischen Kontext, der ihre Entwicklung und damit verbunden auch die resultierende Architektur maßgeblich beeinflusst. Zu den organisatorischen Faktoren zählen etwa: \n\n• Entwicklungsprozess \n• Motivation und Erfahrung aller Beteiligten \n• Termin- und Kostendruck",
      "id": [
        "297865"
      ],
      "item": "Organisatorische Faktoren: Kapitel 3"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297866]\n\nManche Organisationen benutzen Vorgehensmodelle (wie z.B. das V-Modell [VMH97] oder den Rational Unified Process [Kruchten2001]), die den gesamten Prozess der Systementwicklung mehr oder minder detailliert beschreiben. Solche Vorgehensmodelle prägen durch ihre teilweise detaillierten Vorgaben die Erstellung von Architekturen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Manche Organisationen benutzen Vorgehensmodelle (wie z.B. das V-Modell [VMH97] oder den Rational Unified Process [Kruchten2001]), die den gesamten Prozess der Systementwicklung mehr oder minder detailliert beschreiben. Solche Vorgehensmodelle prägen durch ihre teilweise detaillierten Vorgaben die Erstellung von Architekturen.",
      "id": [
        "297866"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297867]\n\nUmgekehrt kann die Architektur auch organisatorische Abläufe bestimmen. Betriebswirtschaftliche Ablauf- oder Prozessoptimierung kann sich an Vorgaben oder Gegebenheiten von Systemarchitekturen orientieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Umgekehrt kann die Architektur auch organisatorische Abläufe bestimmen. Betriebswirtschaftliche Ablauf- oder Prozessoptimierung kann sich an Vorgaben oder Gegebenheiten von Systemarchitekturen orientieren.",
      "id": [
        "297867"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297868]\n[▼ch-43]\n[####Architektur und Design/Implementierung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297868"
      ],
      "anchor": "ch-43",
      "title": "Architektur und Design/Implementierung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297869]\n\nArchitekturen bilden den abstrakten Rahmen, der durch die Implementierung zum laufenden System wird. Architekten bestimmen die zu implementierenden Komponenten, entwickeln Prototypen oder Musterlösungen als __Referenzarchitekturen__. Technische Details der Implementierung können die Architektur beeinflussen, indem sie Randbedingungen vorgeben.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Architekturen bilden den abstrakten Rahmen, der durch die Implementierung zum laufenden System wird. Architekten bestimmen die zu implementierenden Komponenten, entwickeln Prototypen oder Musterlösungen als __Referenzarchitekturen__. Technische Details der Implementierung können die Architektur beeinflussen, indem sie Randbedingungen vorgeben.",
      "id": [
        "297869"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297870]\n[▼ch-44]\n[####Architektur und Betrieb]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297870"
      ],
      "anchor": "ch-44",
      "title": "Architektur und Betrieb"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297871]\n\nDie Architektur bestimmt die Art der Laufzeitkomponenten und beeinflusst damit den Betrieb eines Systems. Die für den Betrieb verantwortlichen Stakeholder müssen eine der Architektur entsprechende Laufzeitumgebung für das System bereitstellen. Diese umfasst beispielsweise Prozessoren, Speicher, Netzwerke, Betriebssysteme, Datenbanken und sonstige Software-Services.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Architektur bestimmt die Art der Laufzeitkomponenten und beeinflusst damit den Betrieb eines Systems. Die für den Betrieb verantwortlichen Stakeholder müssen eine der Architektur entsprechende Laufzeitumgebung für das System bereitstellen. Diese umfasst beispielsweise Prozessoren, Speicher, Netzwerke, Betriebssysteme, Datenbanken und sonstige Software-Services.",
      "id": [
        "297871"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297872]\n[▼ch-45]\n[####(Software-)Architektur und Hardwarearchitektur]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297872"
      ],
      "anchor": "ch-45",
      "title": "(Software-)Architektur und Hardwarearchitektur"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297873]\n\nBei der Erstellung komplexer Systeme müssen Software- und Hardwarearchitekten Hand in Hand arbeiten, weil sich beide gegenseitig beeinflussen. Insbesondere betrifft dies Qualitätsanforderungen, wie etwa Performanz, Hochverfügbarkeit oder Sicherheit.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bei der Erstellung komplexer Systeme müssen Software- und Hardwarearchitekten Hand in Hand arbeiten, weil sich beide gegenseitig beeinflussen. Insbesondere betrifft dies Qualitätsanforderungen, wie etwa Performanz, Hochverfügbarkeit oder Sicherheit.",
      "id": [
        "297873"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297874]\n\nBesonders kritisch stellt sich die Zusammenarbeit zwischen Software- und Hardwarearchitekten bei den so genannten eingebetteten Systemen (__Embedded Systems__) dar, weil dort essenzielle Systemfunktionen sowohl von Soft- als auch von Hardware wahrgenommen werden können. Details dazu finden sich in [Hatley 2000] oder [b-agile2002a].",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Besonders kritisch stellt sich die Zusammenarbeit zwischen Software- und Hardwarearchitekten bei den so genannten eingebetteten Systemen (__Embedded Systems__) dar, weil dort essenzielle Systemfunktionen sowohl von Soft- als auch von Hardware wahrgenommen werden können. Details dazu finden sich in [Hatley 2000] oder [b-agile2002a].",
      "id": [
        "297874"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297875]\n[▼ch-46]\n[####Architektur und Qualitätssicherung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297875"
      ],
      "anchor": "ch-46",
      "title": "Architektur und Qualitätssicherung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297876]\n\nAuf Basis der Softwarearchitektur kann die Qualitätssicherung eines Projektes gemeinsam mit dem Architekturteam die gestellten Anforderungen hinsichtlich ihrer Erfüllbarkeit bewerten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Auf Basis der Softwarearchitektur kann die Qualitätssicherung eines Projektes gemeinsam mit dem Architekturteam die gestellten Anforderungen hinsichtlich ihrer Erfüllbarkeit bewerten.",
      "id": [
        "297876"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297877]\n\nDaneben sollte die Qualitätssicherung auf Basis der Architektur die Testplanung \nvornehmen. Die so genannten Black-Box-Tests können auch ohne Kenntnis der Architektur geplant werden, doch besitzen in vielen Fällen auch White-Box-Tests große Bedeutung für die Qualität von Systemen. Diese Tests beziehen sich explizit auf einzelne Systemkomponenten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Daneben sollte die Qualitätssicherung auf Basis der Architektur die Testplanung \nvornehmen. Die so genannten Black-Box-Tests können auch ohne Kenntnis der Architektur geplant werden, doch besitzen in vielen Fällen auch White-Box-Tests große Bedeutung für die Qualität von Systemen. Diese Tests beziehen sich explizit auf einzelne Systemkomponenten.",
      "id": [
        "297877"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297878]\n[▼ch-47]\n[%2.5]\n[##Weiterführende Literatur]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "2.5",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297878"
      ],
      "anchor": "ch-47",
      "title": "Weiterführende Literatur"
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297879]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_1.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297879"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k2/axa_effektive_software_architekturen_k2_1.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297880]\n\n[Bass+03] ist eine ausführliche und gründliche Einführung in das Thema Software-Architektur.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Bass+03] ist eine ausführliche und gründliche Einführung in das Thema Software-Architektur.",
      "id": [
        "297880"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297881]\n\n[Coplien95] beschreibt eine Vielzahl von „Organizational Patterns“, die für Architekten große Bedeutung besitzen. Dazu gehören unter anderem: „Architekt steuert das Produkt“, „Architekt implementiert“, „Entwurf zu zweit“, „Belohne Erfolg“ und einige andere. Diese Muster sind für Architekten wie für Projektleiter und Auftraggeber gleichermaßen wertvoll.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Coplien95] beschreibt eine Vielzahl von „Organizational Patterns“, die für Architekten große Bedeutung besitzen. Dazu gehören unter anderem: „Architekt steuert das Produkt“, „Architekt implementiert“, „Entwurf zu zweit“, „Belohne Erfolg“ und einige andere. Diese Muster sind für Architekten wie für Projektleiter und Auftraggeber gleichermaßen wertvoll.",
      "id": [
        "297881"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297882]\n\n[Hatley2000] beschreibt einen Prozess zum systematischen Entwurf von Software-Architekturen, der sich besonders gut für __Real-Time__ und __Embedded Systeme__ eignet.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Hatley2000] beschreibt einen Prozess zum systematischen Entwurf von Software-Architekturen, der sich besonders gut für __Real-Time__ und __Embedded Systeme__ eignet.",
      "id": [
        "297882"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297883]\n\n[Hofmeister2000] erläutert, wie Einflussfaktoren und Randbedingungen die Erstellung von Software-Architekturen prägen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Hofmeister2000] erläutert, wie Einflussfaktoren und Randbedingungen die Erstellung von Software-Architekturen prägen.",
      "id": [
        "297883"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297884]\n\n[Martin08] zeigt die Bedeutung guten Quellcodes auf. Architekten können daraus viel über Verständlichkeit und Dokumentation lernen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Martin08] zeigt die Bedeutung guten Quellcodes auf. Architekten können daraus viel über Verständlichkeit und Dokumentation lernen.",
      "id": [
        "297884"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297885]\n\n[Rechtin2000] ist eine ausführliche und verständliche Einführung in „SystemArchitektur“. Die Autoren zeigen viele Gemeinsamkeiten zwischen Architekturen in unterschiedlichen Fachgebieten (etwa: Flugzeugbau, Gebäudearchitektur, Software-Architektur). Sie motivieren die Aufgabe der Architekten als „Anwälte der Kunden“. Eine Kernthese lautet: Architekten müssen auf Heuristiken (als kodifiziertes Erfahrungswissen) zurückgreifen. Das Buch enthält mehr als hundert solcher „Ratschläge“, die Sie auf jede Art von Architektur anwenden können.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Rechtin2000] ist eine ausführliche und verständliche Einführung in „SystemArchitektur“. Die Autoren zeigen viele Gemeinsamkeiten zwischen Architekturen in unterschiedlichen Fachgebieten (etwa: Flugzeugbau, Gebäudearchitektur, Software-Architektur). Sie motivieren die Aufgabe der Architekten als „Anwälte der Kunden“. Eine Kernthese lautet: Architekten müssen auf Heuristiken (als kodifiziertes Erfahrungswissen) zurückgreifen. Das Buch enthält mehr als hundert solcher „Ratschläge“, die Sie auf jede Art von Architektur anwenden können.",
      "id": [
        "297885"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297886]\n\n[SEI2001] vergleicht verschiedene Definitionen des Begriffs „Software-Architektur“ miteinander. Der Artikel zeigt eindrucksvoll, wie unterschiedlich und vielseitig die Fachwelt diesen Begriff interpretiert.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[SEI2001] vergleicht verschiedene Definitionen des Begriffs „Software-Architektur“ miteinander. Der Artikel zeigt eindrucksvoll, wie unterschiedlich und vielseitig die Fachwelt diesen Begriff interpretiert.",
      "id": [
        "297886"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297887]\n\n[Shaw96a] zeigen auf, welche Erkenntnisse über Software-Architekturen noch \nfehlen und begründen mit ihren Problemdefinitionen die systematische Forschung auf diesem Gebiet. Daneben stellen sie einige Architektur-Stile vor.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Shaw96a] zeigen auf, welche Erkenntnisse über Software-Architekturen noch \nfehlen und begründen mit ihren Problemdefinitionen die systematische Forschung auf diesem Gebiet. Daneben stellen sie einige Architektur-Stile vor.",
      "id": [
        "297887"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297888]\n\nIn [Starke+09] erklären Peter Hruschka und ich Ihnen in Kurzform die Aufgaben \nvon Software-Architekten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In [Starke+09] erklären Peter Hruschka und ich Ihnen in Kurzform die Aufgaben \nvon Software-Architekten.",
      "id": [
        "297888"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297889]\n[▼ch-48]\n[##Wissensüberprüfung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297889"
      ],
      "anchor": "ch-48",
      "title": "Wissensüberprüfung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297890]\nBitte beantworten Sie die nachfolgenden Fragen und überprüfen Sie Ihr Wissen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bitte beantworten Sie die nachfolgenden Fragen und überprüfen Sie Ihr Wissen.",
      "id": [
        "297890"
      ]
    }
  },
  {
    "bitmark": "[.cloze:bitmark--]\n[@id:297891]\n[%1]\nDie Architektur eines Softwaresystems besteht  aus seinen [_Strukturen][@example], der Zerlegung in [_Komponenten][@example], deren [_Schnittstellen] und Beziehungen untereinander.",
    "bit": {
      "type": "cloze",
      "format": "bitmark--",
      "body": "Die Architektur eines Softwaresystems besteht  aus seinen {0}, der Zerlegung in {1}, deren {2} und Beziehungen untereinander.",
      "item": "1",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297891"
      ],
      "placeholders": {
        "{0}": {
          "type": "gap",
          "item": "",
          "solutions": [
            "Strukturen"
          ],
          "hint": "",
          "instruction": "",
          "isCaseSensitive": true,
          "isExample": true,
          "example": ""
        },
        "{1}": {
          "type": "gap",
          "item": "",
          "solutions": [
            "Komponenten"
          ],
          "hint": "",
          "instruction": "",
          "isCaseSensitive": true,
          "isExample": true,
          "example": ""
        },
        "{2}": {
          "type": "gap",
          "item": "",
          "solutions": [
            "Schnittstellen"
          ],
          "hint": "",
          "instruction": "",
          "isCaseSensitive": true,
          "isExample": false,
          "example": ""
        }
      }
    }
  },
  {
    "bitmark": "[.multiple-choice-text:bitmark--]\n[@id:297892]\n[%2]\nFür Softwaresysteme gilt: Ihre Architektur besteht aus (abstrakten) [+Komponenten][-Teilen] und [+Schnittstellen][-Verbindungen], die durch eine [+konkrete][-provisiorische] Implementierung zu einem realen System wird.",
    "bit": {
      "type": "multiple-choice-text",
      "format": "bitmark--",
      "body": "Für Softwaresysteme gilt: Ihre Architektur besteht aus (abstrakten) {0} und {1}, die durch eine {2} Implementierung zu einem realen System wird.",
      "placeholders": {
        "{0}": {
          "type": "select",
          "item": "",
          "options": [
            {
              "text": "Komponenten",
              "hint": "",
              "isCorrect": true
            },
            {
              "text": "Teilen",
              "hint": "",
              "isCorrect": false
            }
          ],
          "prefix": "",
          "postfix": "",
          "hint": "",
          "instruction": "",
          "isExample": false,
          "example": ""
        },
        "{1}": {
          "type": "select",
          "item": "",
          "options": [
            {
              "text": "Schnittstellen",
              "hint": "",
              "isCorrect": true
            },
            {
              "text": "Verbindungen",
              "hint": "",
              "isCorrect": false
            }
          ],
          "prefix": "",
          "postfix": "",
          "hint": "",
          "instruction": "",
          "isExample": false,
          "example": ""
        },
        "{2}": {
          "type": "select",
          "item": "",
          "options": [
            {
              "text": "konkrete",
              "hint": "",
              "isCorrect": true
            },
            {
              "text": "provisiorische",
              "hint": "",
              "isCorrect": false
            }
          ],
          "prefix": "",
          "postfix": "",
          "hint": "",
          "instruction": "",
          "isExample": false,
          "example": ""
        }
      },
      "id": [
        "297892"
      ],
      "item": "2"
    }
  },
  {
    "bitmark": "[.true-false]\n[@id:297893]\n[%3]\n[@labelTrue:korrekt][@labelFalse:falsch]\n===\n[+1) Wenn Sie „auf der grünen Wiese“ entwickeln, sind Sie relativ frei in der Wahl von Komponenten und der Abbildung der Fachdomäne auf Komponenten.]\n===\n[-2) Wenn Sie ein Teilsystem innerhalb einer existierenden Systemlandschaft entwickeln, unterliegen Sie keinen Restriktionen]\n===",
    "bit": {
      "type": "true-false",
      "format": "bitmark--",
      "item": "3",
      "lead": "",
      "instruction": "",
      "hint": "",
      "labelTrue": "korrekt",
      "labelFalse": "falsch",
      "statements": [
        {
          "statement": "1) Wenn Sie „auf der grünen Wiese“ entwickeln, sind Sie relativ frei in der Wahl von Komponenten und der Abbildung der Fachdomäne auf Komponenten.",
          "isCorrect": true,
          "isExample": false
        },
        {
          "statement": "2) Wenn Sie ein Teilsystem innerhalb einer existierenden Systemlandschaft entwickeln, unterliegen Sie keinen Restriktionen",
          "isCorrect": false,
          "isExample": false
        }
      ],
      "body": "",
      "id": [
        "297893"
      ]
    }
  },
  {
    "bitmark": "[.true-false:bitmark--&image]\n[@id:297894]\n[%4]\n[@labelTrue:korrekt][@labelFalse:falsch]\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software_architekturen_axa_version/web-resources/images/axa_aufgabe.png]\n===\n[+1) Das System enthält vier Teile.]\n===\n[+2) Drei davon könnten Gemeinsamkeiten aufweisen, weil sie auf einer Ebene angeordnet sind.]\n===\n[-3) Die Teile stehen aufgrund der Ebenen in Beziehung zueinander.]\n===",
    "bit": {
      "type": "true-false",
      "format": "bitmark--",
      "item": "4",
      "lead": "",
      "instruction": "",
      "hint": "",
      "labelTrue": "korrekt",
      "labelFalse": "falsch",
      "statements": [
        {
          "statement": "1) Das System enthält vier Teile.",
          "isCorrect": true,
          "isExample": false
        },
        {
          "statement": "2) Drei davon könnten Gemeinsamkeiten aufweisen, weil sie auf einer Ebene angeordnet sind.",
          "isCorrect": true,
          "isExample": false
        },
        {
          "statement": "3) Die Teile stehen aufgrund der Ebenen in Beziehung zueinander.",
          "isCorrect": false,
          "isExample": false
        }
      ],
      "body": "",
      "id": [
        "297894"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software_architekturen_axa_version/web-resources/images/axa_aufgabe.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297895]\n[▼ch-49]\n[%3]\n[#Vorgehen bei der Architekturentwicklung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 1,
      "progress": true,
      "toc": true,
      "id": [
        "297895"
      ],
      "anchor": "ch-49",
      "title": "Vorgehen bei der Architekturentwicklung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297896]\n\n__Erfahrung ist die härteste Lehrerin. \nSie gibt Dir zuerst den Test und anschließend den Unterricht. \nSusan Ruth1, 1993__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Erfahrung ist die härteste Lehrerin. \nSie gibt Dir zuerst den Test und anschließend den Unterricht. \nSusan Ruth1, 1993__",
      "id": [
        "297896"
      ]
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:297897]\n\n**Fragen, die dieses Kapitel beantwortet:**\n\n• Wie sollten Architekten vorgehen? \n• Welche Rolle spielt die systematische Informationsbeschaffung über existierende Projekte? \n• Wie entwickeln Sie eine „erste Vorstellung“ vom System? \n• Wie finden Sie die relevanten Einflussfaktoren? \n• Wie berücksichtigen Sie diese Einflüsse beim Entwurf von Architekturen? \n• Wie erreichen Sie Qualität (nichtfunktionale Anforderungen)? \n• Welche typischen Risiken drohen bei Software-Architekturen? \n• Welche Lösungsstrategien adressieren diese Risiken?",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "**Fragen, die dieses Kapitel beantwortet:**\n\n• Wie sollten Architekten vorgehen? \n• Welche Rolle spielt die systematische Informationsbeschaffung über existierende Projekte? \n• Wie entwickeln Sie eine „erste Vorstellung“ vom System? \n• Wie finden Sie die relevanten Einflussfaktoren? \n• Wie berücksichtigen Sie diese Einflüsse beim Entwurf von Architekturen? \n• Wie erreichen Sie Qualität (nichtfunktionale Anforderungen)? \n• Welche typischen Risiken drohen bei Software-Architekturen? \n• Welche Lösungsstrategien adressieren diese Risiken?",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297897"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297898]\n[▼ch-50]\n[####Wie sollen Architekten vorgehen?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297898"
      ],
      "anchor": "ch-50",
      "title": "Wie sollen Architekten vorgehen?"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297899]\n\nDie schlechte Nachricht zuerst: Es gibt kein deterministisches Verfahren, das in jedem Fall zu guten Software-Architekturen führt.2",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die schlechte Nachricht zuerst: Es gibt kein deterministisches Verfahren, das in jedem Fall zu guten Software-Architekturen führt.2",
      "id": [
        "297899"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297900]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_2.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297900"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_2.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297901]\n\nUnd jetzt die gute Nachricht: Abbildung 3.1 zeigt einige grundlegende Aktivitäten, die Ihnen beim effektiven Entwurf von Architekturen helfen. Sie gehen auf die Erfahrungen vieler erfolgreicher Software-Architekten zurück.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Und jetzt die gute Nachricht: Abbildung 3.1 zeigt einige grundlegende Aktivitäten, die Ihnen beim effektiven Entwurf von Architekturen helfen. Sie gehen auf die Erfahrungen vieler erfolgreicher Software-Architekten zurück.",
      "id": [
        "297901"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297902]\n\n[%Komponenten wieder verwenden]\n• Sammeln Sie zu Beginn Informationen und Lösungsideen. Informieren Sie sich systematisch darüber, wer eine ähnliche Aufgabe vor Ihnen gelöst hat.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Sammeln Sie zu Beginn Informationen und Lösungsideen. Informieren Sie sich systematisch darüber, wer eine ähnliche Aufgabe vor Ihnen gelöst hat.",
      "id": [
        "297902"
      ],
      "item": "Komponenten wieder verwenden"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297903]\n\n• Klären Sie Anforderungen mit den __maßgeblichen__ Beteiligten. Im Idealfall liegen Ihnen dazu aktuelle, inhaltlich korrekte und präzise Beschreibungen aus dem __Requirements Engineering__ vor.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Klären Sie Anforderungen mit den __maßgeblichen__ Beteiligten. Im Idealfall liegen Ihnen dazu aktuelle, inhaltlich korrekte und präzise Beschreibungen aus dem __Requirements Engineering__ vor.",
      "id": [
        "297903"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297904]\n\n[%Einflussfaktoren finden]\n• Identifizieren Sie projektspezifische Einflussfaktoren und Randbedingungen. \nAbschnitte 3.3 bis 3.7 helfen Ihnen dabei. Diese Faktoren bilden die __Leitplanken__ Ihrer Entwurfsentscheidungen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Identifizieren Sie projektspezifische Einflussfaktoren und Randbedingungen. \nAbschnitte 3.3 bis 3.7 helfen Ihnen dabei. Diese Faktoren bilden die __Leitplanken__ Ihrer Entwurfsentscheidungen.",
      "id": [
        "297904"
      ],
      "item": "Einflussfaktoren finden"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297905]\n\n• Aus Anforderungen und Einflussfaktoren leiten Sie Risiken ab, die den Erfolg Ihrer Architekturarbeit bedrohen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Aus Anforderungen und Einflussfaktoren leiten Sie Risiken ab, die den Erfolg Ihrer Architekturarbeit bedrohen.",
      "id": [
        "297905"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297906]\n\n• Entwickeln Sie die grundlegende Systemidee. Dabei entwerfen Sie erste Strukturen. Abschnitt 3.2 hilft Ihnen, bei diesem ersten Wurf genau zu zielen.3",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Entwickeln Sie die grundlegende Systemidee. Dabei entwerfen Sie erste Strukturen. Abschnitt 3.2 hilft Ihnen, bei diesem ersten Wurf genau zu zielen.3",
      "id": [
        "297906"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297907]\n\n[%Sichten erstellen]\n• Nun entwerfen Sie Strukturen in verschiedenen Sichten: Welche Bausteine gibt es, wie arbeiten sie zusammen, wie und wo laufen sie ab? Diese Strukturentscheidungen folgen grundlegenden Entwurfsprinzipien, „__Best Practices__“ und Heuristiken. Zusätzlich sollten Sie Architektur- und Entwurfsmuster, Referenzarchitekturen oder __Blueprints__ ([Liebhart+07]) zu Rate ziehen. Schon mal vorweggenommen: Sie beginnen mit fachlichen Strukturen und erweitern diese dann sukzessive um technische Details. All dies lernen Sie in den Kapiteln 4 (Architektursichten) und 6 (Strukturentwurf) kennen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Nun entwerfen Sie Strukturen in verschiedenen Sichten: Welche Bausteine gibt es, wie arbeiten sie zusammen, wie und wo laufen sie ab? Diese Strukturentscheidungen folgen grundlegenden Entwurfsprinzipien, „__Best Practices__“ und Heuristiken. Zusätzlich sollten Sie Architektur- und Entwurfsmuster, Referenzarchitekturen oder __Blueprints__ ([Liebhart+07]) zu Rate ziehen. Schon mal vorweggenommen: Sie beginnen mit fachlichen Strukturen und erweitern diese dann sukzessive um technische Details. All dies lernen Sie in den Kapiteln 4 (Architektursichten) und 6 (Strukturentwurf) kennen.",
      "id": [
        "297907"
      ],
      "item": "Sichten erstellen"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297908]\n\n• Neben den Systemstrukturen müssen Sie weitere Entwurfsentscheidungen zu vielen (meist technischen) Konzepten und Architekturaspekten (etwa: Persistenz, Benutzeroberfläche, Verteilung, Sicherheit u.a.) treffen. Das gesamte Kapitel 7 dieses Buches unterstützt Sie dabei. Das geschieht in der Regel parallel zum Entwurf der Strukturen – daher stehen diese beiden in Abbildung 3.1 zusammen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Neben den Systemstrukturen müssen Sie weitere Entwurfsentscheidungen zu vielen (meist technischen) Konzepten und Architekturaspekten (etwa: Persistenz, Benutzeroberfläche, Verteilung, Sicherheit u.a.) treffen. Das gesamte Kapitel 7 dieses Buches unterstützt Sie dabei. Das geschieht in der Regel parallel zum Entwurf der Strukturen – daher stehen diese beiden in Abbildung 3.1 zusammen.",
      "id": [
        "297908"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297909]\n\n• Kommunizieren Sie Ihre Software-Architekturen bedarfsgerecht und angemessen. In Kapitel 4 stelle ich Ihnen dazu unterschiedliche Sichten vor, die spezifische Interessen der verschiedenen Projektbeteiligten berücksichtigen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Kommunizieren Sie Ihre Software-Architekturen bedarfsgerecht und angemessen. In Kapitel 4 stelle ich Ihnen dazu unterschiedliche Sichten vor, die spezifische Interessen der verschiedenen Projektbeteiligten berücksichtigen.",
      "id": [
        "297909"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297910]\n\nDiese Kommunikation geschieht sowohl schriftlich als auch mündlich! \n• Während der Implementierung sollten Sie kontinuierlich Rückmeldungen Ihres Entwicklungsteams einholen. Überwachen Sie, ob Ihre Entscheidungen angemessen umgesetzt werden beziehungsweise die von Ihnen gewünschten Auswirkungen zeigen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Diese Kommunikation geschieht sowohl schriftlich als auch mündlich! \n• Während der Implementierung sollten Sie kontinuierlich Rückmeldungen Ihres Entwicklungsteams einholen. Überwachen Sie, ob Ihre Entscheidungen angemessen umgesetzt werden beziehungsweise die von Ihnen gewünschten Auswirkungen zeigen.",
      "id": [
        "297910"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297911]\n\n• Schließlich sollten Sie sich regelmäßig fragen, ob Ihre Architektur den Anforderungen Ihrer Kunden genügt – sowohl in funktionaler wie in qualitativer Hinsicht. Kapitel 10 zeigt Ihnen den Weg zu einer systematischen Bewertung Ihrer Architekturen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Schließlich sollten Sie sich regelmäßig fragen, ob Ihre Architektur den Anforderungen Ihrer Kunden genügt – sowohl in funktionaler wie in qualitativer Hinsicht. Kapitel 10 zeigt Ihnen den Weg zu einer systematischen Bewertung Ihrer Architekturen.",
      "id": [
        "297911"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297912]\n[▼ch-51]\n[####Architekturen entstehen iterativ]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297912"
      ],
      "anchor": "ch-51",
      "title": "Architekturen entstehen iterativ"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297913]\n\nEinige Aktivitäten aus Abbildung 3.1 können parallel stattfinden – in Ihrem Kopf oder auf verschiedene Personen verteilt. In jedem Fall klären Sie regelmäßig, welche Anforderungen und Einflussfaktoren sich geändert haben – daraufhin müssen Sie eventuell Ihre Entscheidungen überarbeiten und die Architektur Ihres Systems anpassen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Einige Aktivitäten aus Abbildung 3.1 können parallel stattfinden – in Ihrem Kopf oder auf verschiedene Personen verteilt. In jedem Fall klären Sie regelmäßig, welche Anforderungen und Einflussfaktoren sich geändert haben – daraufhin müssen Sie eventuell Ihre Entscheidungen überarbeiten und die Architektur Ihres Systems anpassen.",
      "id": [
        "297913"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297914]\n\nVerabschieden Sie sich von dem Gedanken, Software-Architekturen „einmal und für immer“ zu entwickeln. Arbeiten Sie iterativ. Entwickeln Sie Ihre Entwürfe in Zyklen. Bleiben Sie agil und nehmen Sie Rückkopplungen zu den Projektbeteiligten und der Organisation in Ihre Entwürfe auf. So entstehen Architekturen, die an den wirklichen Bedürfnissen und Anforderungen orientiert sind!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Verabschieden Sie sich von dem Gedanken, Software-Architekturen „einmal und für immer“ zu entwickeln. Arbeiten Sie iterativ. Entwickeln Sie Ihre Entwürfe in Zyklen. Bleiben Sie agil und nehmen Sie Rückkopplungen zu den Projektbeteiligten und der Organisation in Ihre Entwürfe auf. So entstehen Architekturen, die an den wirklichen Bedürfnissen und Anforderungen orientiert sind!",
      "id": [
        "297914"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297915]\n\nAbbildung 3.2 zeigt schematisch, dass sowohl Ihre Kunden wie auch andere Projektbeteiligte Anforderungen und Einflussfaktoren ändern. Aufgrund dieser Änderungen müssen Sie Ihren Architekturentwurf und Ihre Architekturentscheidungen iterativ den veränderten Gegebenheiten anpassen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Abbildung 3.2 zeigt schematisch, dass sowohl Ihre Kunden wie auch andere Projektbeteiligte Anforderungen und Einflussfaktoren ändern. Aufgrund dieser Änderungen müssen Sie Ihren Architekturentwurf und Ihre Architekturentscheidungen iterativ den veränderten Gegebenheiten anpassen.",
      "id": [
        "297915"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297916]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_3]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "297916"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_3",
          "showInIndex": false,
          "format": "cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_3",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297917]\n\nIm vorigen Kapitel haben Sie unter dem Begriff „ArchitectureBusiness Cycle“ bereits eine andere Art der __Iteration__ von Architekturen kennen gelernt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Im vorigen Kapitel haben Sie unter dem Begriff „ArchitectureBusiness Cycle“ bereits eine andere Art der __Iteration__ von Architekturen kennen gelernt.",
      "id": [
        "297917"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297918]\n[▼ch-52]\n[####Treffen Sie Architektur- und Entwurfsentscheidungen bewusst, angemessen und systematisch]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297918"
      ],
      "anchor": "ch-52",
      "title": "Treffen Sie Architektur- und Entwurfsentscheidungen bewusst, angemessen und systematisch"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297919]\n\nMachen Sie sich vor und während Ihrer Architekturentwicklung bewusst, welche  architekturrelevanten Entscheidungen Sie oder andere Stakeholder treffen müssen. Stimmen Sie mit betroffenen Stakeholdern ab, ob und wann diese Entscheidung notwendig wird – es kann sowohl für schnelle wie auch für verzögerte Entscheidungen gute Gründe geben.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Machen Sie sich vor und während Ihrer Architekturentwicklung bewusst, welche  architekturrelevanten Entscheidungen Sie oder andere Stakeholder treffen müssen. Stimmen Sie mit betroffenen Stakeholdern ab, ob und wann diese Entscheidung notwendig wird – es kann sowohl für schnelle wie auch für verzögerte Entscheidungen gute Gründe geben.",
      "id": [
        "297919"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297920]\n\n[%Entscheidungen dokumentieren]\nWenn Sie eine Entscheidung für besonders wichtig oder bemerkenswert halten, dann sollten Sie diese dokumentieren: Halten Sie dazu den genauen Entscheidungsumfang („Was ist das Problem?“) sowie die Auslöser für diese Entscheidung („Warum müssen wir das entscheiden?“) fest, sowie die Rahmenbedingungen, Ihre getroffenen Annahmen, Risiken und mögliche (verworfene) Alternativen.4 In jedem Fall sollten Sie Ihre Entscheidung begründen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wenn Sie eine Entscheidung für besonders wichtig oder bemerkenswert halten, dann sollten Sie diese dokumentieren: Halten Sie dazu den genauen Entscheidungsumfang („Was ist das Problem?“) sowie die Auslöser für diese Entscheidung („Warum müssen wir das entscheiden?“) fest, sowie die Rahmenbedingungen, Ihre getroffenen Annahmen, Risiken und mögliche (verworfene) Alternativen.4 In jedem Fall sollten Sie Ihre Entscheidung begründen.",
      "id": [
        "297920"
      ],
      "item": "Entscheidungen dokumentieren"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297921]\n\nEntwickeln Sie Mut zu Entscheidungen! Akzeptieren Sie, dass Sie so manche unsichere Entscheidungen treffen müssen (und erinnern Sie sich bisweilen an das Zitat von Philippe Kruchten aus Abschnitt 2.2 ...).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Entwickeln Sie Mut zu Entscheidungen! Akzeptieren Sie, dass Sie so manche unsichere Entscheidungen treffen müssen (und erinnern Sie sich bisweilen an das Zitat von Philippe Kruchten aus Abschnitt 2.2 ...).",
      "id": [
        "297921"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297922]\n[▼ch-53]\n[%3.1]\n[##Informationen sammeln]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297922"
      ],
      "anchor": "ch-53",
      "title": "Informationen sammeln"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297923]\n\n[%Quellen für Wiederverwendung finden]\nNoch bevor Sie eine eigene Systemidee entwickeln, sollten Sie Material darüber sammeln, wie andere Architekten vor Ihnen ähnliche Probleme gelöst haben:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Noch bevor Sie eine eigene Systemidee entwickeln, sollten Sie Material darüber sammeln, wie andere Architekten vor Ihnen ähnliche Probleme gelöst haben:",
      "id": [
        "297923"
      ],
      "item": "Quellen für Wiederverwendung finden"
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:297924]\n\n• Beginnen Sie mit Ihrer eigenen Erfahrung – Ihre Kunden erwarten sowohl Domänenwissen als auch technisches Wissen von Ihnen. \n• Prüfen Sie die Projekte innerhalb Ihrer Organisation, ob sich Ergebnisse wieder verwenden lassen. Seien Sie dabei pragmatisch! \n• Suchen Sie im Internet nach Beschreibungen ähnlicher Systeme. Vielleicht können Sie passende Komponenten dazukaufen. \n• Suchen Sie in der technischen Literatur, und durchforsten Sie die Entwurfsmuster auf Ihrem Gebiet.",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "• Beginnen Sie mit Ihrer eigenen Erfahrung – Ihre Kunden erwarten sowohl Domänenwissen als auch technisches Wissen von Ihnen. \n• Prüfen Sie die Projekte innerhalb Ihrer Organisation, ob sich Ergebnisse wieder verwenden lassen. Seien Sie dabei pragmatisch! \n• Suchen Sie im Internet nach Beschreibungen ähnlicher Systeme. Vielleicht können Sie passende Komponenten dazukaufen. \n• Suchen Sie in der technischen Literatur, und durchforsten Sie die Entwurfsmuster auf Ihrem Gebiet.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297924"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297925]\n\nIn vielen Fällen bekommen Sie dadurch Beispiele und Muster und müssen nur noch kleine Teile völlig neu entwerfen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In vielen Fällen bekommen Sie dadurch Beispiele und Muster und müssen nur noch kleine Teile völlig neu entwerfen.",
      "id": [
        "297925"
      ]
    }
  },
  {
    "bitmark": "[.note:bitmark++]\n[@id:297926]\n\nSie sollten ein tiefes Misstrauen gegenüber solchen Lösungen hegen, die sich in den Grundzügen nicht auf bekannte Dinge zurückführen lassen. Nur die wenigsten, die solche (angeblich innovativen) Lösungen präsentieren, sind wirklich geniale Erfinder – die meisten haben nur schlecht recherchiert.",
    "bit": {
      "type": "note",
      "format": "bitmark++",
      "body": "Sie sollten ein tiefes Misstrauen gegenüber solchen Lösungen hegen, die sich in den Grundzügen nicht auf bekannte Dinge zurückführen lassen. Nur die wenigsten, die solche (angeblich innovativen) Lösungen präsentieren, sind wirklich geniale Erfinder – die meisten haben nur schlecht recherchiert.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297926"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297927]\n[▼ch-54]\n[%3.2]\n[##Systemidee entwickeln]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297927"
      ],
      "anchor": "ch-54",
      "title": "Systemidee entwickeln"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297928]\n\nBevor Sie mit dem Entwurf der Software-Architektur eines konkreten Systems beginnen, sollten Sie eine erste Vorstellung einiger wichtiger Systemeigenschaften besitzen. Sie sollten folgende Fragen über das System beantwortet haben: \n\n• Was ist die Kernaufgabe des Systems? Welches sind die wichtigsten Elemente der Fachdomäne? \n• Wie wird das System genutzt? \n• Wer nutzt das System? \n• Welche Art von Benutzeroberfläche hat das System? \n• Über welche Schnittstellen zu anderen Systemen verfügt das System? \n• Wie werden die vom System bearbeiteten Daten verwaltet? Welche Art von Datenzugriffen ist notwendig? \n• Wie wird das System gesteuert?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Bevor Sie mit dem Entwurf der Software-Architektur eines konkreten Systems beginnen, sollten Sie eine erste Vorstellung einiger wichtiger Systemeigenschaften besitzen. Sie sollten folgende Fragen über das System beantwortet haben: \n\n• Was ist die Kernaufgabe des Systems? Welches sind die wichtigsten Elemente der Fachdomäne? \n• Wie wird das System genutzt? \n• Wer nutzt das System? \n• Welche Art von Benutzeroberfläche hat das System? \n• Über welche Schnittstellen zu anderen Systemen verfügt das System? \n• Wie werden die vom System bearbeiteten Daten verwaltet? Welche Art von Datenzugriffen ist notwendig? \n• Wie wird das System gesteuert?",
      "id": [
        "297928"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297929]\n\nDie Antworten auf diese Fragen werden Ihnen eine Orientierung geben, nach der Sie eine erste Systemstruktur entwickeln können.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Antworten auf diese Fragen werden Ihnen eine Orientierung geben, nach der Sie eine erste Systemstruktur entwickeln können.",
      "id": [
        "297929"
      ]
    }
  },
  {
    "bitmark": "[.note:bitmark--]\n[@id:297930]\n\nDokumentieren Sie diese Antworten möglichst kurz und prägnant, eine einzige Seite sollte dafür genügen. Diese „Systemidee“ ist eine wichtige Grundlage der Kommunikation mit den Stakeholdern!",
    "bit": {
      "type": "note",
      "format": "bitmark--",
      "body": "Dokumentieren Sie diese Antworten möglichst kurz und prägnant, eine einzige Seite sollte dafür genügen. Diese „Systemidee“ ist eine wichtige Grundlage der Kommunikation mit den Stakeholdern!",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297930"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297931]\n\nIm Normalfall verfügen Sie beim Entwurf einer Software-Architektur bereits über Erfahrung mit ähnlichen Systemen, vielleicht sogar aus einem ähnlichen fachlichen Bereich. Dann wird es Ihnen leichtfallen, einen ersten Vorschlag für die Software-Architektur zu entwickeln. Sie werden die obigen Fragen aus dem Stegreif beantworten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Im Normalfall verfügen Sie beim Entwurf einer Software-Architektur bereits über Erfahrung mit ähnlichen Systemen, vielleicht sogar aus einem ähnlichen fachlichen Bereich. Dann wird es Ihnen leichtfallen, einen ersten Vorschlag für die Software-Architektur zu entwickeln. Sie werden die obigen Fragen aus dem Stegreif beantworten.",
      "id": [
        "297931"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297932]\n\nAndernfalls befinden Sie sich auf fachlichem oder technischem Neuland. Sie haben es mit einem neuen Fachgebiet zu tun und noch keine vergleichbaren oder zumindest ähnlichen Systeme entworfen. Die folgenden Abschnitte zeigen Ihnen wichtige Aspekte und Alternativen auf, die Sie beim Entwurf beachten sollten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Andernfalls befinden Sie sich auf fachlichem oder technischem Neuland. Sie haben es mit einem neuen Fachgebiet zu tun und noch keine vergleichbaren oder zumindest ähnlichen Systeme entworfen. Die folgenden Abschnitte zeigen Ihnen wichtige Aspekte und Alternativen auf, die Sie beim Entwurf beachten sollten.",
      "id": [
        "297932"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297933]\n[▼ch-55]\n[####Was ist die Kernaufgabe des Systems?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297933"
      ],
      "anchor": "ch-55",
      "title": "Was ist die Kernaufgabe des Systems?"
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:297934]\n\n• Beschreiben Sie die Kernaufgabe und Verantwortlichkeit des Systems in zwei bis drei Sätzen. Formulieren Sie positiv, und benutzen Sie die Kernbegriffe der Fachdomäne. \n• Fügen Sie die wichtigsten Begriffe oder Aspekte der Fachdomäne hinzu; an die fünf Begriffe genügen.5 \n• Stimmen Sie diese Formulierung mit Kunden und Auftraggebern ab!",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "• Beschreiben Sie die Kernaufgabe und Verantwortlichkeit des Systems in zwei bis drei Sätzen. Formulieren Sie positiv, und benutzen Sie die Kernbegriffe der Fachdomäne. \n• Fügen Sie die wichtigsten Begriffe oder Aspekte der Fachdomäne hinzu; an die fünf Begriffe genügen.5 \n• Stimmen Sie diese Formulierung mit Kunden und Auftraggebern ab!",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297934"
      ]
    }
  },
  {
    "bitmark": "[.example:bitmark++]\n[@id:297935]\n\n__Beispiel__: Das System unterstützt Call-Agents bei der Erfassung und Bearbeitung von Schadenmeldungen von Privatkunden. \nDie wichtigsten Aspekte der Fachdomäne sind Vorfall, Schaden, Partner und Vertrag.",
    "bit": {
      "type": "example",
      "format": "bitmark++",
      "body": "__Beispiel__: Das System unterstützt Call-Agents bei der Erfassung und Bearbeitung von Schadenmeldungen von Privatkunden. \nDie wichtigsten Aspekte der Fachdomäne sind Vorfall, Schaden, Partner und Vertrag.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297935"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297936]\n\nEine solche kurze Formulierung erleichtert die Kommunikation über das System. Sie definiert für alle Beteiligten das wichtigste Projektziel (= das System). Gleichzeitig schafft sie einen wichtigen begrifflichen Kontext, an dem sich alle Beteiligten orientieren können.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Eine solche kurze Formulierung erleichtert die Kommunikation über das System. Sie definiert für alle Beteiligten das wichtigste Projektziel (= das System). Gleichzeitig schafft sie einen wichtigen begrifflichen Kontext, an dem sich alle Beteiligten orientieren können.",
      "id": [
        "297936"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297937]\n\nManchmal können Sie diese Aussagen aus der Anforderungsanalyse übernehmen. Andernfalls müssen Sie die Kernaufgabe mit Ihren Auftraggebern oder Kunden selbst formulieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Manchmal können Sie diese Aussagen aus der Anforderungsanalyse übernehmen. Andernfalls müssen Sie die Kernaufgabe mit Ihren Auftraggebern oder Kunden selbst formulieren.",
      "id": [
        "297937"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297938]\n[▼ch-56]\n[####Wie wird das System genutzt?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297938"
      ],
      "anchor": "ch-56",
      "title": "Wie wird das System genutzt?"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297939]\n\nIn vielen Fällen geben die Anforderungen bereits eindeutig die grundsätzliche Nutzungsart des Systems vor. In Zweifelsfällen sollten Sie prüfen, zu welcher Kategorie das gewünschte System gehört:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In vielen Fällen geben die Anforderungen bereits eindeutig die grundsätzliche Nutzungsart des Systems vor. In Zweifelsfällen sollten Sie prüfen, zu welcher Kategorie das gewünschte System gehört:",
      "id": [
        "297939"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297940]\n\n[%Online]\n• Interaktive Online-Systeme: Auch als operationale Systeme [Blaha98] bezeichnet, arbeiten diese Systeme als Teil der normalen Geschäftsprozesse in Unternehmen. In den meisten Fällen enthalten sie Operationen auf Daten (Transaktionen, Einfüge-, Änderungs- und Löschoperationen), die vom Ablauf her in die Benutzeroberfläche eingebettet sind. Die Art der Transaktionen ist festgelegt. Die Systeme operieren auf möglichst aktuellen Datenbeständen. Sie erfordern ein hohes Maß an Systemverfügbarkeit und Performance.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Interaktive Online-Systeme: Auch als operationale Systeme [Blaha98] bezeichnet, arbeiten diese Systeme als Teil der normalen Geschäftsprozesse in Unternehmen. In den meisten Fällen enthalten sie Operationen auf Daten (Transaktionen, Einfüge-, Änderungs- und Löschoperationen), die vom Ablauf her in die Benutzeroberfläche eingebettet sind. Die Art der Transaktionen ist festgelegt. Die Systeme operieren auf möglichst aktuellen Datenbeständen. Sie erfordern ein hohes Maß an Systemverfügbarkeit und Performance.",
      "id": [
        "297940"
      ],
      "item": "Online"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297941]\n\n[%Decision-Support]\n• Entscheidungsunterstützungssysteme (__decision support system__): arbeiten oftmals auf Kopien der aktuellen Unternehmensdaten (__data warehouse__) und enthalten hauptsächlich lesende Datenzugriffe. Die Art der Anfragen an die Daten ist flexibel. Benutzer können neue Anfragen (__queries__) formulieren. Daher ist die Laufzeit von Anfragen im Vorfeld kaum abschätzbar. Solche Systeme tolerieren nach [Blaha98] höhere Ausfallzeiten und geringere Performance.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Entscheidungsunterstützungssysteme (__decision support system__): arbeiten oftmals auf Kopien der aktuellen Unternehmensdaten (__data warehouse__) und enthalten hauptsächlich lesende Datenzugriffe. Die Art der Anfragen an die Daten ist flexibel. Benutzer können neue Anfragen (__queries__) formulieren. Daher ist die Laufzeit von Anfragen im Vorfeld kaum abschätzbar. Solche Systeme tolerieren nach [Blaha98] höhere Ausfallzeiten und geringere Performance.",
      "id": [
        "297941"
      ],
      "item": "Decision-Support"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297942]\n\n[%Batch/Offline]\n• Hintergrundsysteme (Offline-Systeme, Batch-Systeme): dienen hauptsächlich der Datenmanipulation, oftmals zur Vor- oder Nachverarbeitung vorhandener Datenbestände; werden zur Interaktion mit anderen Systemen eingesetzt. In Kapitel 7 finden Sie mehr zum Thema Integration.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Hintergrundsysteme (Offline-Systeme, Batch-Systeme): dienen hauptsächlich der Datenmanipulation, oftmals zur Vor- oder Nachverarbeitung vorhandener Datenbestände; werden zur Interaktion mit anderen Systemen eingesetzt. In Kapitel 7 finden Sie mehr zum Thema Integration.",
      "id": [
        "297942"
      ],
      "item": "Batch/Offline"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297943]\n\n[%Embedded]\n• Eingebettete Systeme (__embedded systems__): arbeiten eng verzahnt mit spezieller Hardware. Ein Beispiel für eingebettete Systeme sind Mobiltelefone (viele haben auch Echtzeitanforderungen; Details dazu finden Sie in [b-agile 2002a]).",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Eingebettete Systeme (__embedded systems__): arbeiten eng verzahnt mit spezieller Hardware. Ein Beispiel für eingebettete Systeme sind Mobiltelefone (viele haben auch Echtzeitanforderungen; Details dazu finden Sie in [b-agile 2002a]).",
      "id": [
        "297943"
      ],
      "item": "Embedded"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297944]\n\n[%Real-Time]\n• Systeme mit Echtzeitanforderungen (__real-time systems__): Operationen werden innerhalb garantierter Zeiten fertig gestellt. Beispiel: Produktionssteuerung \n(Fließbänder mit festen Taktzeiten), Herzschrittmacher. Details zur effektiven Erstellung von Echtzeitsystemen finden Sie in [b-agile2002a].",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Systeme mit Echtzeitanforderungen (__real-time systems__): Operationen werden innerhalb garantierter Zeiten fertig gestellt. Beispiel: Produktionssteuerung \n(Fließbänder mit festen Taktzeiten), Herzschrittmacher. Details zur effektiven Erstellung von Echtzeitsystemen finden Sie in [b-agile2002a].",
      "id": [
        "297944"
      ],
      "item": "Real-Time"
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:297945]\n\n• Dokumentieren Sie die wichtigsten Nutzungsarten des Systems in der „Systemidee“. Fixieren Sie schriftlich, wenn Sie zusätzliche Nutzungsarten erwarten. \n• Wenn das System zu mehreren der genannten Kategorien gehört, sollte die Architektur aus entsprechenden Teilsystemen bestehen, die jeweils zu einer Kategorie gehören.",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "• Dokumentieren Sie die wichtigsten Nutzungsarten des Systems in der „Systemidee“. Fixieren Sie schriftlich, wenn Sie zusätzliche Nutzungsarten erwarten. \n• Wenn das System zu mehreren der genannten Kategorien gehört, sollte die Architektur aus entsprechenden Teilsystemen bestehen, die jeweils zu einer Kategorie gehören.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297945"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297946]\n[▼ch-57]\n[####Von wem wird das System auf welche Weise genutzt?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297946"
      ],
      "anchor": "ch-57",
      "title": "Von wem wird das System auf welche Weise genutzt?"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297947]\n\n[%Stakeholder]\n• Welche Personen oder Stakeholder benutzen das System? Beispiele sind Benutzer der Kernfunktionalität („Anwender“), Administratoren und Betreiber, Benutzer mit Sonderfunktionen (Genehmiger, Prüfer, Auswerter oder Ähnliche).",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Welche Personen oder Stakeholder benutzen das System? Beispiele sind Benutzer der Kernfunktionalität („Anwender“), Administratoren und Betreiber, Benutzer mit Sonderfunktionen (Genehmiger, Prüfer, Auswerter oder Ähnliche).",
      "id": [
        "297947"
      ],
      "item": "Stakeholder"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297948]\n\n• Welche Stakeholder stehen dem (neuen) System negativ gegenüber? Die jeweilige Einstellung der Stakeholder prägt die Art der Informationen, die sie Ihnen über das System geben werden.6",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Welche Stakeholder stehen dem (neuen) System negativ gegenüber? Die jeweilige Einstellung der Stakeholder prägt die Art der Informationen, die sie Ihnen über das System geben werden.6",
      "id": [
        "297948"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297949]\n\n[%Benutzerschnittstellen]\n• Welche Art von Benutzerschnittstellen muss das System bereitstellen: \n- Bildschirm- oder formularorientierte Bearbeitung \n- Objektorientierte Benutzeroberfläche \n- Bedienung über Konsole oder Kommandozeile \n- Bedienung über spezielle Hardware (bei eingebetteten Systemen)",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Welche Art von Benutzerschnittstellen muss das System bereitstellen: \n- Bildschirm- oder formularorientierte Bearbeitung \n- Objektorientierte Benutzeroberfläche \n- Bedienung über Konsole oder Kommandozeile \n- Bedienung über spezielle Hardware (bei eingebetteten Systemen)",
      "id": [
        "297949"
      ],
      "item": "Benutzerschnittstellen"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297950]\n\n• Muss die Benutzeroberfläche für verschiedene Nutzergruppen anpassbar sein (etwa: Laien, gelegentliche Benutzer, Experten, Administratoren)?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Muss die Benutzeroberfläche für verschiedene Nutzergruppen anpassbar sein (etwa: Laien, gelegentliche Benutzer, Experten, Administratoren)?",
      "id": [
        "297950"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297951]\n\n• Müssen für unterschiedliche Benutzergruppen verschiedene Benutzeroberflächen vorgesehen werden?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Müssen für unterschiedliche Benutzergruppen verschiedene Benutzeroberflächen vorgesehen werden?",
      "id": [
        "297951"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297952]\n\n• Müssen die Benutzer das System selbst installieren und konfigurieren? Oder müssen Benutzer das System lediglich aufrufen?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Müssen die Benutzer das System selbst installieren und konfigurieren? Oder müssen Benutzer das System lediglich aufrufen?",
      "id": [
        "297952"
      ]
    }
  },
  {
    "bitmark": "[.note:bitmark--]\n[@id:297953]\n\nNehmen Sie die Benutzer und die Art der Benutzerschnittstelle, die Sie durch diese Fragen identifiziert haben, in die Beschreibung der „Systemidee“ auf.",
    "bit": {
      "type": "note",
      "format": "bitmark--",
      "body": "Nehmen Sie die Benutzer und die Art der Benutzerschnittstelle, die Sie durch diese Fragen identifiziert haben, in die Beschreibung der „Systemidee“ auf.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297953"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297954]\n[▼ch-58]\n[####Welche Schnittstellen gibt es?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297954"
      ],
      "anchor": "ch-58",
      "title": "Welche Schnittstellen gibt es?"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297955]\n\n[%Schnittstellen zu anderen Systemen]\n• Welche Schnittstellen gibt es zu externen Systemen? Hierzu zählen: \n- Schnittstellen anderer Systeme, die genutzt werden. \n- Schnittstellen, die für andere Systeme bereitgestellt werden.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Welche Schnittstellen gibt es zu externen Systemen? Hierzu zählen: \n- Schnittstellen anderer Systeme, die genutzt werden. \n- Schnittstellen, die für andere Systeme bereitgestellt werden.",
      "id": [
        "297955"
      ],
      "item": "Schnittstellen zu anderen Systemen"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297956]\n\n• Sind diese externen Schnittstellen stabil? Wie zuverlässig sind sie? Wie fehlertolerant muss das neue System gegenüber den fremden Systemen sein?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Sind diese externen Schnittstellen stabil? Wie zuverlässig sind sie? Wie fehlertolerant muss das neue System gegenüber den fremden Systemen sein?",
      "id": [
        "297956"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297957]\n\n[%Funktionale/ Datenschnittstellen]\n• Handelt es sich um funktionale Schnittstellen oder Datenschnittstellen? Können Sie über diese Schnittstellen Funktionen oder Methoden des anderen Systems aufrufen, oder funktioniert die Schnittstelle nur über den Austausch von Daten?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Handelt es sich um funktionale Schnittstellen oder Datenschnittstellen? Können Sie über diese Schnittstellen Funktionen oder Methoden des anderen Systems aufrufen, oder funktioniert die Schnittstelle nur über den Austausch von Daten?",
      "id": [
        "297957"
      ],
      "item": "Funktionale/ Datenschnittstellen"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297958]\n\n[%Synchron/ Asynchron]\n• Im Falle der funktionalen Schnittstelle: \n- Aufrufverhalten: Synchron oder asynchron? \n- Ist die Schnittstelle stabil oder variabel? (Das bedeutet: Sind die Fremdsysteme bezüglich ihrer Schnittstellen stabil?) \n- Ist die Semantik der Aufrufe eindeutig und präzise beschrieben? \n- Wie performant sind die anderen Systeme? Wie beeinflusst das Verhalten der Schnittstellen die Performance des Gesamtsystems?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Im Falle der funktionalen Schnittstelle: \n- Aufrufverhalten: Synchron oder asynchron? \n- Ist die Schnittstelle stabil oder variabel? (Das bedeutet: Sind die Fremdsysteme bezüglich ihrer Schnittstellen stabil?) \n- Ist die Semantik der Aufrufe eindeutig und präzise beschrieben? \n- Wie performant sind die anderen Systeme? Wie beeinflusst das Verhalten der Schnittstellen die Performance des Gesamtsystems?",
      "id": [
        "297958"
      ],
      "item": "Synchron/ Asynchron"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297959]\n\n[%Änderbarkeit]\n• Gibt es die Möglichkeit, die Schnittstelle auf Seiten des anderen Systems zu ändern? Liegt der Quellcode der Schnittstelle vor?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Gibt es die Möglichkeit, die Schnittstelle auf Seiten des anderen Systems zu ändern? Liegt der Quellcode der Schnittstelle vor?",
      "id": [
        "297959"
      ],
      "item": "Änderbarkeit"
    }
  },
  {
    "bitmark": "[.note:bitmark++]\n[@id:297960]\n\n[%Das Schwierigste zuerst!]\n• Dokumentieren Sie, welche Schnittstellen Sie bis jetzt identifiziert haben. \n• Wenn das System Schnittstellen zu Fremdsystemen besitzt, sollten Sie über einen funktionalen Prototypen die technische Machbarkeit verifizieren. Dieser Prototyp muss die Machbarkeit der zentralen Probleme demonstrieren, getreu dem Motto „Erledige die schwierigsten Dinge zuerst“.",
    "bit": {
      "type": "note",
      "format": "bitmark++",
      "body": "• Dokumentieren Sie, welche Schnittstellen Sie bis jetzt identifiziert haben. \n• Wenn das System Schnittstellen zu Fremdsystemen besitzt, sollten Sie über einen funktionalen Prototypen die technische Machbarkeit verifizieren. Dieser Prototyp muss die Machbarkeit der zentralen Probleme demonstrieren, getreu dem Motto „Erledige die schwierigsten Dinge zuerst“.",
      "item": "Das Schwierigste zuerst!",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297960"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297961]\n[▼ch-59]\n[####Wie verwaltet das System Daten?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297961"
      ],
      "anchor": "ch-59",
      "title": "Wie verwaltet das System Daten?"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297962]\n\nSysteme können Datenverwaltung mit unterschiedlichen Alternativen realisieren: im Hauptspeicher, in Dateien oder in Datenbanksystemen (DBMS). Folgende Aspekte können die Entscheidung für diese Alternativen beeinflussen:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Systeme können Datenverwaltung mit unterschiedlichen Alternativen realisieren: im Hauptspeicher, in Dateien oder in Datenbanksystemen (DBMS). Folgende Aspekte können die Entscheidung für diese Alternativen beeinflussen:",
      "id": [
        "297962"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297963]\n\n[%Persistenz]\n• Persistenz: Dateien und Datenbank-Managementsysteme (DBMS) können Daten persistent (dauerhaft) speichern. Daten im Hauptspeicher erfordern spezielle Maßnahmen gegen Datenverlust, etwa bei Stromausfall. Kapitel 7 enthält mehr zur Persistenz.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Persistenz: Dateien und Datenbank-Managementsysteme (DBMS) können Daten persistent (dauerhaft) speichern. Daten im Hauptspeicher erfordern spezielle Maßnahmen gegen Datenverlust, etwa bei Stromausfall. Kapitel 7 enthält mehr zur Persistenz.",
      "id": [
        "297963"
      ],
      "item": "Persistenz"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297964]\n\n[%Lizenzen]\n• Lizenzkosten und Wartungskosten: Manche DBMS verursachen hohe Lizenz- und Wartungskosten. Dateien sind von diesem Faktor nicht betroffen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Lizenzkosten und Wartungskosten: Manche DBMS verursachen hohe Lizenz- und Wartungskosten. Dateien sind von diesem Faktor nicht betroffen.",
      "id": [
        "297964"
      ],
      "item": "Lizenzen"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297965]\n\n[%Volumen]\n• Datenvolumen: DBMS können mit nahezu beliebig großen Datenvolumina arbeiten, begrenzt meist nur durch die Grenze der physikalischen Speichermedien. Hauptspeicher ist nur begrenzt verfügbar. Dateigrößen sind meist durch das Betriebssystem begrenzt.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Datenvolumen: DBMS können mit nahezu beliebig großen Datenvolumina arbeiten, begrenzt meist nur durch die Grenze der physikalischen Speichermedien. Hauptspeicher ist nur begrenzt verfügbar. Dateigrößen sind meist durch das Betriebssystem begrenzt.",
      "id": [
        "297965"
      ],
      "item": "Volumen"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297966]\n\n[%Performance]\n• Performance: Datenstrukturen im Hauptspeicher bieten den schnellsten Zugriff. DBMS bieten oft Möglichkeiten, spezielle Zugriffe zu optimieren. Dateien können schnellen Zugriff durch __Caching__ erreichen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Performance: Datenstrukturen im Hauptspeicher bieten den schnellsten Zugriff. DBMS bieten oft Möglichkeiten, spezielle Zugriffe zu optimieren. Dateien können schnellen Zugriff durch __Caching__ erreichen.",
      "id": [
        "297966"
      ],
      "item": "Performance"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297967]\n\n[%Erweiterbarkeit]\n• Erweiterbarkeit: DBMS bieten Architekten und Entwicklern Unabhängigkeit von der Implementierung der Daten und ihrer Zugriffe. Auf bestehende Datenbanken können auch neue Systeme zugreifen. Physische Unabhängigkeit erlaubt, das DBMS zu optimieren (__tuning__), ohne die Anwendungslogik zu beeinflussen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Erweiterbarkeit: DBMS bieten Architekten und Entwicklern Unabhängigkeit von der Implementierung der Daten und ihrer Zugriffe. Auf bestehende Datenbanken können auch neue Systeme zugreifen. Physische Unabhängigkeit erlaubt, das DBMS zu optimieren (__tuning__), ohne die Anwendungslogik zu beeinflussen.",
      "id": [
        "297967"
      ],
      "item": "Erweiterbarkeit"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297968]\n\n[%Paralleler Zugriff]\n• Paralleler Zugriff: DBMS bieten eine Vielzahl von Strategien zum parallelen und konfliktfreien Zugriff auf Daten an (__locking__). Dateien können von Betriebssystemen meist nur als Ganzes gesperrt werden.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Paralleler Zugriff: DBMS bieten eine Vielzahl von Strategien zum parallelen und konfliktfreien Zugriff auf Daten an (__locking__). Dateien können von Betriebssystemen meist nur als Ganzes gesperrt werden.",
      "id": [
        "297968"
      ],
      "item": "Paralleler Zugriff"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297969]\n\n[%Integrität]\n• Datenintegrität: Datenbank-Designer können bei DBMS Regeln für die Integrität von Daten spezifizieren. Das DBMS stellt die Einhaltung dieser Regeln sicher, unabhängig von Anwendungssystemen. Die Sicherung der Integrität funktioniert selbst übergreifend über mehrere Anwendungen, die ein und dieselbe Datenbank benutzen. Für Dateien und Daten im Hauptspeicher gibt es keine derartigen Mechanismen zur automatischen Sicherstellung der Datenintegrität.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Datenintegrität: Datenbank-Designer können bei DBMS Regeln für die Integrität von Daten spezifizieren. Das DBMS stellt die Einhaltung dieser Regeln sicher, unabhängig von Anwendungssystemen. Die Sicherung der Integrität funktioniert selbst übergreifend über mehrere Anwendungen, die ein und dieselbe Datenbank benutzen. Für Dateien und Daten im Hauptspeicher gibt es keine derartigen Mechanismen zur automatischen Sicherstellung der Datenintegrität.",
      "id": [
        "297969"
      ],
      "item": "Integrität"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297970]\n\n[%Transaktionen]\n• Unterstützung von Transaktionen: Zusammengehörige Gruppen von Datenbank-Kommandos können bei DBMS in Transaktionen zusammengefasst werden. Das DBMS stellt sicher, dass entweder die gesamte Transaktion erfolgreich abgewickelt wird oder kein Teil der Transaktion. Dateien bieten keine automatische Unterstützung für Transaktionen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Unterstützung von Transaktionen: Zusammengehörige Gruppen von Datenbank-Kommandos können bei DBMS in Transaktionen zusammengefasst werden. Das DBMS stellt sicher, dass entweder die gesamte Transaktion erfolgreich abgewickelt wird oder kein Teil der Transaktion. Dateien bieten keine automatische Unterstützung für Transaktionen.",
      "id": [
        "297970"
      ],
      "item": "Transaktionen"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297971]\n\n• Anfragesprache: Viele DBMS bieten spezielle Anfragesprachen (etwa SQL, OQL) an, die auch in Anwendungsprogramme eingebettet werden können (etwa: embedded-SQL). Dateien oder Hauptspeicherdaten bieten solche Sprachen nicht.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Anfragesprache: Viele DBMS bieten spezielle Anfragesprachen (etwa SQL, OQL) an, die auch in Anwendungsprogramme eingebettet werden können (etwa: embedded-SQL). Dateien oder Hauptspeicherdaten bieten solche Sprachen nicht.",
      "id": [
        "297971"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297972]\n\n[%Unbefugter Zugriff]\n• Sicherheit: DBMS können einzelne Daten (Tabellen und einzelne Datensätze) durch verschiedene Mechanismen vor unbefugtem Zugriff sichern (beispielsweise Benutzer- und Gruppenkonzepte mit Kennworten oder Verschlüsselung von Daten). Dateien oder Hauptspeicherdaten bieten keinen derart abgestuften Zugriffsschutz. Kapitel 7 enthält mehr zu Sicherheit.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Sicherheit: DBMS können einzelne Daten (Tabellen und einzelne Datensätze) durch verschiedene Mechanismen vor unbefugtem Zugriff sichern (beispielsweise Benutzer- und Gruppenkonzepte mit Kennworten oder Verschlüsselung von Daten). Dateien oder Hauptspeicherdaten bieten keinen derart abgestuften Zugriffsschutz. Kapitel 7 enthält mehr zu Sicherheit.",
      "id": [
        "297972"
      ],
      "item": "Unbefugter Zugriff"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297973]\n\n[%Crash recovery]\n• Wiederherstellung nach Systemausfällen: DBMS verfügen oft über einen leistungsfähigen Katastrophenschutz. Selbst mit Systemabstürzen oder Hardwaredefekten können viele DBMS durch __crash recovery__ ohne Daten- oder Integritätsverlust umgehen. Bei Dateien kann eine solche Sicherheit durch permanente Kopien (__continous backup__) erreicht werden. \n\nIn vielen Fällen geben die technischen Vorteile von Datenbanksystemen den Ausschlag gegenüber datei- oder hauptspeicherbasierter Datenverwaltung. Meiner Erfahrung nach kommen in kommerziellen Systemen praktisch nur DBMS zum Einsatz. Technische Systeme können ihre Datenverwaltung oftmals über Schnittstellen an kommerzielle Systeme delegieren.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Wiederherstellung nach Systemausfällen: DBMS verfügen oft über einen leistungsfähigen Katastrophenschutz. Selbst mit Systemabstürzen oder Hardwaredefekten können viele DBMS durch __crash recovery__ ohne Daten- oder Integritätsverlust umgehen. Bei Dateien kann eine solche Sicherheit durch permanente Kopien (__continous backup__) erreicht werden. \n\nIn vielen Fällen geben die technischen Vorteile von Datenbanksystemen den Ausschlag gegenüber datei- oder hauptspeicherbasierter Datenverwaltung. Meiner Erfahrung nach kommen in kommerziellen Systemen praktisch nur DBMS zum Einsatz. Technische Systeme können ihre Datenverwaltung oftmals über Schnittstellen an kommerzielle Systeme delegieren.",
      "id": [
        "297973"
      ],
      "item": "Crash recovery"
    }
  },
  {
    "bitmark": "[.note:bitmark--]\n[@id:297974]\n\nDokumentieren Sie die wesentlichen Aspekte der Datenverwaltung in der Systemidee. Halten Sie fest, welche Entscheidungen bereits gefallen sind und welche Freiheitsgrade Sie beim Entwurf der Datenverwaltung noch besitzen.",
    "bit": {
      "type": "note",
      "format": "bitmark--",
      "body": "Dokumentieren Sie die wesentlichen Aspekte der Datenverwaltung in der Systemidee. Halten Sie fest, welche Entscheidungen bereits gefallen sind und welche Freiheitsgrade Sie beim Entwurf der Datenverwaltung noch besitzen.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297974"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297975]\n[▼ch-60]\n[####Wie wird das System gesteuert?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297975"
      ],
      "anchor": "ch-60",
      "title": "Wie wird das System gesteuert?"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297976]\n\nNach den Fragen über Nutzungsart, Benutzeroberfläche und Datenverwaltung sollten Sie nun eine Vorstellung entwickeln, wie das System gesteuert wird und wie es mit seinen Benutzern interagiert. Sie können folgende Fälle unterscheiden:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nach den Fragen über Nutzungsart, Benutzeroberfläche und Datenverwaltung sollten Sie nun eine Vorstellung entwickeln, wie das System gesteuert wird und wie es mit seinen Benutzern interagiert. Sie können folgende Fälle unterscheiden:",
      "id": [
        "297976"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297977]\n\n[%Event driven]\n• __Ereignisgetriebene (event driven) Steuerung__: Die Steuerung der Applikation obliegt einem Steuermechanismus (__controller, dispatcher__), den entweder das Betriebssystem, die Programmiersprache oder das System bereitstellt. Methoden- oder Funktionsaufrufe werden bestimmten Ereignissen zugeordnet, beispielsweise Tastatureingaben oder Mausklicks. Der Dispatcher ruft die entsprechenden Methoden auf, wenn die jeweiligen Ereignisse eintreten. Setzen Sie die ereignisgetriebene Steuerung für Systeme mit grafischen Benutzeroberflächen ein, für Client/Server-Systeme oder auch für Mess-, Steueroder Regelsysteme.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• __Ereignisgetriebene (event driven) Steuerung__: Die Steuerung der Applikation obliegt einem Steuermechanismus (__controller, dispatcher__), den entweder das Betriebssystem, die Programmiersprache oder das System bereitstellt. Methoden- oder Funktionsaufrufe werden bestimmten Ereignissen zugeordnet, beispielsweise Tastatureingaben oder Mausklicks. Der Dispatcher ruft die entsprechenden Methoden auf, wenn die jeweiligen Ereignisse eintreten. Setzen Sie die ereignisgetriebene Steuerung für Systeme mit grafischen Benutzeroberflächen ein, für Client/Server-Systeme oder auch für Mess-, Steueroder Regelsysteme.",
      "id": [
        "297977"
      ],
      "item": "Event driven"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297978]\n\n[%Prozedural]\n• __Prozedurale Steuerung__: Die gesamte Steuerung obliegt einer Implementierungskomponente. Diese Komponente ruft sequenziell andere Methoden oder Funktionen auf und wartet auf deren Rückgaben. Anschließend setzt die kontrollierende Komponente den Programmablauf fort. Typische Konstrukte für die Implementierung der prozeduralen Steuerung ist die main()-Funktion eines C-Programms. Setzen Sie die prozedurale Steuerung dort ein, wo nur eine minimale Benutzerschnittstelle implementiert wird.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• __Prozedurale Steuerung__: Die gesamte Steuerung obliegt einer Implementierungskomponente. Diese Komponente ruft sequenziell andere Methoden oder Funktionen auf und wartet auf deren Rückgaben. Anschließend setzt die kontrollierende Komponente den Programmablauf fort. Typische Konstrukte für die Implementierung der prozeduralen Steuerung ist die main()-Funktion eines C-Programms. Setzen Sie die prozedurale Steuerung dort ein, wo nur eine minimale Benutzerschnittstelle implementiert wird.",
      "id": [
        "297978"
      ],
      "item": "Prozedural"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297979]\n\n[%Parallel]\n• __Parallele Steuerung__: Die Steuerung wird von mehreren unabhängigen Komponenten realisiert. Jede dieser Komponenten reagiert losgelöst von anderen auf Ereignisse oder Anfragen. Die parallele Steuerung lässt sich in Client/ Server-Systemen einsetzen, wo Client-Sessions unabhängig voneinander ablaufen können.7",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• __Parallele Steuerung__: Die Steuerung wird von mehreren unabhängigen Komponenten realisiert. Jede dieser Komponenten reagiert losgelöst von anderen auf Ereignisse oder Anfragen. Die parallele Steuerung lässt sich in Client/ Server-Systemen einsetzen, wo Client-Sessions unabhängig voneinander ablaufen können.7",
      "id": [
        "297979"
      ],
      "item": "Parallel"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297980]\n\n[%Deklarativ]\n• __Deklarative oder regelbasierte Steuerung__: Der Programmablauf wird durch einen Regelinterpreter oder ähnliche Auswertungsmechanismen gesteuert. Programmiersprachen wie Prolog implementieren diese Art der Steuerung. Regelinterpreter können Sie ausgezeichnet in Ihre Architektur integrieren, um Geschäftslogik an zentraler Stelle zu behandeln. Abschnitt 7.2 (Geschäftsregeln) erläutert Ihnen diesen Ansatz näher.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• __Deklarative oder regelbasierte Steuerung__: Der Programmablauf wird durch einen Regelinterpreter oder ähnliche Auswertungsmechanismen gesteuert. Programmiersprachen wie Prolog implementieren diese Art der Steuerung. Regelinterpreter können Sie ausgezeichnet in Ihre Architektur integrieren, um Geschäftslogik an zentraler Stelle zu behandeln. Abschnitt 7.2 (Geschäftsregeln) erläutert Ihnen diesen Ansatz näher.",
      "id": [
        "297980"
      ],
      "item": "Deklarativ"
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:297981]\n\n• In großen Systemen müssen Sie häufig mehrere der obigen Ansätze kombinieren. \n• Dokumentieren Sie die Aspekte der Steuerung in der Laufzeitsicht (siehe Kapitel 4.6)",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "• In großen Systemen müssen Sie häufig mehrere der obigen Ansätze kombinieren. \n• Dokumentieren Sie die Aspekte der Steuerung in der Laufzeitsicht (siehe Kapitel 4.6)",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297981"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297982]\n[▼ch-61]\n[####Systemidee – und nun?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297982"
      ],
      "anchor": "ch-61",
      "title": "Systemidee – und nun?"
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:297983]\n\n[%Vage Systemidee = Risiko]\n• Sie besitzen jetzt eine Systemidee, die Ihnen als Grundlage für Abstimmungen mit Stakeholdern und dem Projektteam dient. Falls Sie einzelne Aspekte des Systems nicht genau beschreiben konnten, ist dies ein Indikator für potenzielle Risiken. \n• Stimmen Sie die Systemidee auf jeden Fall mit den Auftraggebern und der Projektleitung ab. Sie dient Ihnen zukünftig als Grundlage für Entwurfsentscheidungen. \n• Kommunizieren Sie die abgestimmte Systemidee an alle Projektbeteiligten, insbesondere das Entwicklungsteam!",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "• Sie besitzen jetzt eine Systemidee, die Ihnen als Grundlage für Abstimmungen mit Stakeholdern und dem Projektteam dient. Falls Sie einzelne Aspekte des Systems nicht genau beschreiben konnten, ist dies ein Indikator für potenzielle Risiken. \n• Stimmen Sie die Systemidee auf jeden Fall mit den Auftraggebern und der Projektleitung ab. Sie dient Ihnen zukünftig als Grundlage für Entwurfsentscheidungen. \n• Kommunizieren Sie die abgestimmte Systemidee an alle Projektbeteiligten, insbesondere das Entwicklungsteam!",
      "item": "Vage Systemidee = Risiko",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297983"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297984]\n\nIn der Regel werden Sie das System in mehrere Schichten zerlegen, etwa „Präsentation“, „Fachdomäne“ und „Infrastruktur“. Näheres zu Schichten und Zerlegung finden Sie in Kapitel 6 (Strukturentwurf).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In der Regel werden Sie das System in mehrere Schichten zerlegen, etwa „Präsentation“, „Fachdomäne“ und „Infrastruktur“. Näheres zu Schichten und Zerlegung finden Sie in Kapitel 6 (Strukturentwurf).",
      "id": [
        "297984"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297985]\n\nMit der Systemidee haben Sie wichtige Aspekte der Präsentation und Infrastruktur bereits explizit gemacht. Damit wird Ihnen der Entwurf dieser Systemteile leichter fallen. Sie haben die wichtigsten Begriffe und Aspekte der Fachdomäne dokumentiert, die sich im Entwurf später wiederfinden werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Mit der Systemidee haben Sie wichtige Aspekte der Präsentation und Infrastruktur bereits explizit gemacht. Damit wird Ihnen der Entwurf dieser Systemteile leichter fallen. Sie haben die wichtigsten Begriffe und Aspekte der Fachdomäne dokumentiert, die sich im Entwurf später wiederfinden werden.",
      "id": [
        "297985"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297986]\n\nBevor Sie nun konkrete Entwurfs- und Architekturentscheidungen treffen, sollten Sie unbedingt die __Leitplanken__ genauer untersuchen, die Sie bei diesen Entscheidungen beachten müssen: Einflussfaktoren und Randbedingungen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bevor Sie nun konkrete Entwurfs- und Architekturentscheidungen treffen, sollten Sie unbedingt die __Leitplanken__ genauer untersuchen, die Sie bei diesen Entscheidungen beachten müssen: Einflussfaktoren und Randbedingungen.",
      "id": [
        "297986"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297987]\n[▼ch-62]\n[% 3.3]\n[##Was sind Einflussfaktoren und Randbedingungen?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "297987"
      ],
      "anchor": "ch-62",
      "title": "Was sind Einflussfaktoren und Randbedingungen?"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297988]\n\nUm als Software-Architekt anwendungs- und problembezogene Entwurfsentscheidungen zu treffen, müssen Sie die Faktoren untersuchen, die Ihre Architekturen beeinflussen können (siehe dazu Abbildung 3.3). Diese Faktoren besitzen einen prägenden Einfluss auf das Gesamtsystem.8",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Um als Software-Architekt anwendungs- und problembezogene Entwurfsentscheidungen zu treffen, müssen Sie die Faktoren untersuchen, die Ihre Architekturen beeinflussen können (siehe dazu Abbildung 3.3). Diese Faktoren besitzen einen prägenden Einfluss auf das Gesamtsystem.8",
      "id": [
        "297988"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297989]\n\n[%Einflussfaktoren finden]\n• Aus den Systemanforderungen sowie den Anforderungen der System-Umwelt ermitteln Sie architekturrelevante Einflussfaktoren. Im Folgenden stelle ich Ihnen einige typischer Einflussfaktoren vor.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Aus den Systemanforderungen sowie den Anforderungen der System-Umwelt ermitteln Sie architekturrelevante Einflussfaktoren. Im Folgenden stelle ich Ihnen einige typischer Einflussfaktoren vor.",
      "id": [
        "297989"
      ],
      "item": "Einflussfaktoren finden"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297990]\n\n• Von besonderer Bedeutung für Architekturentscheidung sind dabei die nichtfunktionalen Anforderungen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Von besonderer Bedeutung für Architekturentscheidung sind dabei die nichtfunktionalen Anforderungen.",
      "id": [
        "297990"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297991]\n\n• Auf dieser Basis identifizieren Sie die projekt- und systemspezifischen Risiken.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Auf dieser Basis identifizieren Sie die projekt- und systemspezifischen Risiken.",
      "id": [
        "297991"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:297992]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_4]\n\nIn den folgenden Abschnitten schaffe ich einige Voraussetzungen, um die architekturrelevanten Einflussfaktoren zu charakterisieren. Sie erfahren, in welchen Kategorien Sie bei der Suche nach den Faktoren fündig werden. Zusätzlich beschreibe ich, was Flexibilität und Veränderlichkeit von Faktoren bedeuten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In den folgenden Abschnitten schaffe ich einige Voraussetzungen, um die architekturrelevanten Einflussfaktoren zu charakterisieren. Sie erfahren, in welchen Kategorien Sie bei der Suche nach den Faktoren fündig werden. Zusätzlich beschreibe ich, was Flexibilität und Veränderlichkeit von Faktoren bedeuten.",
      "id": [
        "297992"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_4",
          "showInIndex": false,
          "format": "cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_4",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:297993]\n[▼ch-63]\n[####Technik allein genügt nicht]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "297993"
      ],
      "anchor": "ch-63",
      "title": "Technik allein genügt nicht"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297994]\n\nSoftware-Architekten müssen bei der Entwicklung von Architekturen eine ganze Reihe verschiedener Faktoren berücksichtigen. Alle diese Faktoren fallen in eine der folgenden Kategorien:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Software-Architekten müssen bei der Entwicklung von Architekturen eine ganze Reihe verschiedener Faktoren berücksichtigen. Alle diese Faktoren fallen in eine der folgenden Kategorien:",
      "id": [
        "297994"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297995]\n\n[%Einflüsse von Organisation]\n• Organisatorische und politische Faktoren. Manche solcher Faktoren wirken auf ein bestimmtes System ein. Andere beeinflussen sämtliche Projekte innerhalb einer Organisation. [Rechtin2000] charakterisiert diese Faktoren als __facts of life__.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Organisatorische und politische Faktoren. Manche solcher Faktoren wirken auf ein bestimmtes System ein. Andere beeinflussen sämtliche Projekte innerhalb einer Organisation. [Rechtin2000] charakterisiert diese Faktoren als __facts of life__.",
      "id": [
        "297995"
      ],
      "item": "Einflüsse von Organisation"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297996]\n\n[%Technik]\n• Technische Faktoren. Sie prägen das technische Umfeld des Systems und seiner Entwicklung.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Technische Faktoren. Sie prägen das technische Umfeld des Systems und seiner Entwicklung.",
      "id": [
        "297996"
      ],
      "item": "Technik"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:297997]\n\n[%System-/Produktfaktoren]\n• System- oder Produktfaktoren. Sie beschreiben sowohl die funktionalen Eigenschaften (__required features__) des Systems als auch seine nichtfunktionalen „Qualitäten“ (__required constraints__), wie Performance, Flexibilität und Wartbarkeit.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• System- oder Produktfaktoren. Sie beschreiben sowohl die funktionalen Eigenschaften (__required features__) des Systems als auch seine nichtfunktionalen „Qualitäten“ (__required constraints__), wie Performance, Flexibilität und Wartbarkeit.",
      "id": [
        "297997"
      ],
      "item": "System-/Produktfaktoren"
    }
  },
  {
    "bitmark": "[.info:bitmark--]\n[@id:297998]\n\nDiese zuletzt genannten Qualitäten sind in der Praxis häufig die Auslöser oder treibenden Kräfte zentraler Architekturentscheidungen. Abschnitt 3.6 stellt Ihnen dieses Thema vor.",
    "bit": {
      "type": "info",
      "format": "bitmark--",
      "body": "Diese zuletzt genannten Qualitäten sind in der Praxis häufig die Auslöser oder treibenden Kräfte zentraler Architekturentscheidungen. Abschnitt 3.6 stellt Ihnen dieses Thema vor.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "297998"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:297999]\n\n[%Qualität als treibende Kraft von Architekturentscheidungen]\nMeiner Erfahrung nach tendieren Software-Architekten dazu, die politischen und organisatorischen Faktoren zu unterschätzen und zu vernachlässigen. Das kann im Extremfall dazu führen, dass an sich lauffähige Systeme nicht zum Einsatz kommen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Meiner Erfahrung nach tendieren Software-Architekten dazu, die politischen und organisatorischen Faktoren zu unterschätzen und zu vernachlässigen. Das kann im Extremfall dazu führen, dass an sich lauffähige Systeme nicht zum Einsatz kommen.",
      "id": [
        "297999"
      ],
      "item": "Qualität als treibende Kraft von Architekturentscheidungen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298000]\n\nDas hat mehrere Gründe: Erstens bestimmen die technischen Faktoren ein System viel offensichtlicher. Zweitens sind Software-Architekten in technischen Themen oftmals erfahrener als in organisatorischen oder gar politischen. Drittens herrscht in Software-Projekten manchmal ein technischer Zweckoptimismus, getreu dem Motto: Mit der neuen X-Technik und dem Y-Werkzeug haben wir unsere Probleme im Griff.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Das hat mehrere Gründe: Erstens bestimmen die technischen Faktoren ein System viel offensichtlicher. Zweitens sind Software-Architekten in technischen Themen oftmals erfahrener als in organisatorischen oder gar politischen. Drittens herrscht in Software-Projekten manchmal ein technischer Zweckoptimismus, getreu dem Motto: Mit der neuen X-Technik und dem Y-Werkzeug haben wir unsere Probleme im Griff.",
      "id": [
        "298000"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298001]\n\n[%Keine technischen Probleme]\nWie [Rechtin2000] es treffend formuliert: Es gibt keine rein technischen Probleme. Sie werden schnell zu organisatorischen oder politischen Schwierigkeiten, und damit entgleiten sie auch der Kontrolle rein technisch orientierter Projektbeteiligter.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wie [Rechtin2000] es treffend formuliert: Es gibt keine rein technischen Probleme. Sie werden schnell zu organisatorischen oder politischen Schwierigkeiten, und damit entgleiten sie auch der Kontrolle rein technisch orientierter Projektbeteiligter.",
      "id": [
        "298001"
      ],
      "item": "Keine technischen Probleme"
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298002]\n[▼ch-64]\n[####Welche Faktoren sind architekturrelevant?]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298002"
      ],
      "anchor": "ch-64",
      "title": "Welche Faktoren sind architekturrelevant?"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298003]\n\n__Information ist architekturrelevant, \nwenn sie für Zwecke oder Ziele des Kunden notwendig ist. \n[Rechtin2000, p222]__",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "__Information ist architekturrelevant, \nwenn sie für Zwecke oder Ziele des Kunden notwendig ist. \n[Rechtin2000, p222]__",
      "id": [
        "298003"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298004]\n\n[%Relevante Faktoren]\nVon den unzähligen Faktoren, die ein ganzes Projekt beeinflussen, gilt es diejenigen zu selektieren, die relevant für die Architektur sind. Hier einige Ratschläge, wie Faktoren auf ihre Relevanz geprüft werden können: \n\n• Praktisch alle „nicht-funktionalen“ Anforderungen (__required constraints__) besitzen Auswirkungen auf die Software-Architektur. \n• Viele Faktoren, die für die Implementierung bedeutsam sind, haben Auswirkungen auf die Architektur. Hierzu zählen technische Faktoren, aber auch Vorgaben für spezielle Vorgehensweisen oder Methoden. \n• Faktoren, die neuartige Verfahren oder Techniken betreffen, sind oft architekturrelevant. Das kann die Wahl einer neuen Programmiersprache sein, aber auch der Einsatz eines für Ihre Organisation neuen Entwicklungswerkzeugs. \n• Faktoren, für die Erfahrung oder Fachwissen innerhalb der Organisation nur unzureichend vorhanden ist, können die Architektur beeinflussen. \n• Alle Faktoren, die knappe Ressourcen betreffen. Hierzu gehören beispielsweise Zeit, Personen, Geld oder technische Ausstattung.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Von den unzähligen Faktoren, die ein ganzes Projekt beeinflussen, gilt es diejenigen zu selektieren, die relevant für die Architektur sind. Hier einige Ratschläge, wie Faktoren auf ihre Relevanz geprüft werden können: \n\n• Praktisch alle „nicht-funktionalen“ Anforderungen (__required constraints__) besitzen Auswirkungen auf die Software-Architektur. \n• Viele Faktoren, die für die Implementierung bedeutsam sind, haben Auswirkungen auf die Architektur. Hierzu zählen technische Faktoren, aber auch Vorgaben für spezielle Vorgehensweisen oder Methoden. \n• Faktoren, die neuartige Verfahren oder Techniken betreffen, sind oft architekturrelevant. Das kann die Wahl einer neuen Programmiersprache sein, aber auch der Einsatz eines für Ihre Organisation neuen Entwicklungswerkzeugs. \n• Faktoren, für die Erfahrung oder Fachwissen innerhalb der Organisation nur unzureichend vorhanden ist, können die Architektur beeinflussen. \n• Alle Faktoren, die knappe Ressourcen betreffen. Hierzu gehören beispielsweise Zeit, Personen, Geld oder technische Ausstattung.",
      "id": [
        "298004"
      ],
      "item": "Relevante Faktoren"
    }
  },
  {
    "bitmark": "[.info:bitmark--]\n[@id:298005]\n\n[%Im Zweifel: Faktor aufnehmen]\nWenn Sie nicht entscheiden können, ob ein Faktor Relevanz für die Architektur besitzt, dann nehmen Sie ihn auf. Weil Sie die Tabelle mit Einflussfaktoren, Projektrisiken und Lösungsstrategien im Laufe des Projektes weiter pflegen, können Sie diesen Faktor auch später noch entfernen.",
    "bit": {
      "type": "info",
      "format": "bitmark--",
      "body": "Wenn Sie nicht entscheiden können, ob ein Faktor Relevanz für die Architektur besitzt, dann nehmen Sie ihn auf. Weil Sie die Tabelle mit Einflussfaktoren, Projektrisiken und Lösungsstrategien im Laufe des Projektes weiter pflegen, können Sie diesen Faktor auch später noch entfernen.",
      "item": "Im Zweifel: Faktor aufnehmen",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298005"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298006]\n[▼ch-65]\n[####Einflussfaktoren sind flexibel]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298006"
      ],
      "anchor": "ch-65",
      "title": "Einflussfaktoren sind flexibel"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298007]\n\n[%Flexibilität beachten]\nSie können in den meisten Fällen mit den betroffenen Projektbeteiligten über die Prioritäten oder die konkrete Ausgestaltung der Einflussfaktoren verhandeln. Die Flexibilität eines Faktors beschreibt, welche Aspekte eines Faktors zur Disposition stehen können. Flexibilität von Faktoren bezieht sich daher auf gewollte oder bewusst herbeigeführte Änderungen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie können in den meisten Fällen mit den betroffenen Projektbeteiligten über die Prioritäten oder die konkrete Ausgestaltung der Einflussfaktoren verhandeln. Die Flexibilität eines Faktors beschreibt, welche Aspekte eines Faktors zur Disposition stehen können. Flexibilität von Faktoren bezieht sich daher auf gewollte oder bewusst herbeigeführte Änderungen.",
      "id": [
        "298007"
      ],
      "item": "Flexibilität beachten"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298008]\n\nFolgende Argumente und Fragen können dabei nützlich sein: \n\n• Manche Einflussfaktoren widersprechen sich, etwa Performance und Flexibilität (hohe Flexibilität erreicht man durch Einführung von zusätzlichen Abstraktionsschichten, was sich negativ auf die Performance auswirken kann). \n\nWelche Faktoren sind für das konkrete Projekt wichtiger? \n• Einzelne Faktoren oder Anforderungen können ein Projekt signifikant verteuern oder verlängern. Können Sie diese Faktoren umgehen oder abschwächen? \n• In welcher Hinsicht können die Projektbeteiligten die Einflussfaktoren steuern, um Ihnen den Entwurf der Architektur zu erleichtern?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Folgende Argumente und Fragen können dabei nützlich sein: \n\n• Manche Einflussfaktoren widersprechen sich, etwa Performance und Flexibilität (hohe Flexibilität erreicht man durch Einführung von zusätzlichen Abstraktionsschichten, was sich negativ auf die Performance auswirken kann). \n\nWelche Faktoren sind für das konkrete Projekt wichtiger? \n• Einzelne Faktoren oder Anforderungen können ein Projekt signifikant verteuern oder verlängern. Können Sie diese Faktoren umgehen oder abschwächen? \n• In welcher Hinsicht können die Projektbeteiligten die Einflussfaktoren steuern, um Ihnen den Entwurf der Architektur zu erleichtern?",
      "id": [
        "298008"
      ]
    }
  },
  {
    "bitmark": "[.note:bitmark--]\n[@id:298009]\n\n[%Konsequenzen bewusst machen]\nIch habe in meinen Projekten die Erfahrung gemacht, dass manchen Projektbeteiligten die Konsequenzen ihrer Anforderungen nicht bewusst sind. Das hier beschriebene Vorgehen macht Einflussfaktoren und deren für die Software-Architektur wichtige Konsequenzen explizit. Es erleichtert dadurch eine konstruktive Kommunikation mit allen Projektbeteiligten über die architekturrelevanten Aspekte eines Projektes.",
    "bit": {
      "type": "note",
      "format": "bitmark--",
      "body": "Ich habe in meinen Projekten die Erfahrung gemacht, dass manchen Projektbeteiligten die Konsequenzen ihrer Anforderungen nicht bewusst sind. Das hier beschriebene Vorgehen macht Einflussfaktoren und deren für die Software-Architektur wichtige Konsequenzen explizit. Es erleichtert dadurch eine konstruktive Kommunikation mit allen Projektbeteiligten über die architekturrelevanten Aspekte eines Projektes.",
      "item": "Konsequenzen bewusst machen",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298009"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298010]\n[▼ch-66]\n[####Einflussfaktoren werden sich ändern]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298010"
      ],
      "anchor": "ch-66",
      "title": "Einflussfaktoren werden sich ändern"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298011]\n\nVeränderungen von Einflussfaktoren können auch ohne Ihr aktives Eingreifen stattfinden. Pro Monat ändern sich in den meisten Projekten 1–2% der fachlichen Anforderungen.9",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Veränderungen von Einflussfaktoren können auch ohne Ihr aktives Eingreifen stattfinden. Pro Monat ändern sich in den meisten Projekten 1–2% der fachlichen Anforderungen.9",
      "id": [
        "298011"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298012]\n\n[%Zukünftige Veränderungen erkennen]\nEine zentrale Aufgabe von Architekten besteht darin, die erwarteten Veränderungen der relevanten Einflussfaktoren zu erkennen und in der Architektur entsprechend zu berücksichtigen. Peter Hruschka formuliert es treffend: „Entwerfen heißt, die Kundenwünsche von morgen vorauszuahnen.“10",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Eine zentrale Aufgabe von Architekten besteht darin, die erwarteten Veränderungen der relevanten Einflussfaktoren zu erkennen und in der Architektur entsprechend zu berücksichtigen. Peter Hruschka formuliert es treffend: „Entwerfen heißt, die Kundenwünsche von morgen vorauszuahnen.“10",
      "id": [
        "298012"
      ],
      "item": "Zukünftige Veränderungen erkennen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298013]\n\nEin solcher Blick in die Zukunft ist jedoch zwangsläufig mit Unsicherheit behaftet. Haben Sie dennoch keine Sorge, Sie brauchen nicht in eine Kristallkugel zu schauen! Die Orientierung an wichtigen Einflussfaktoren gewährleistet, dass Sie mit relativer Sicherheit die Elemente Ihrer Architekturen identifizieren können, an denen sich zukünftig Änderungen ergeben werden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Ein solcher Blick in die Zukunft ist jedoch zwangsläufig mit Unsicherheit behaftet. Haben Sie dennoch keine Sorge, Sie brauchen nicht in eine Kristallkugel zu schauen! Die Orientierung an wichtigen Einflussfaktoren gewährleistet, dass Sie mit relativer Sicherheit die Elemente Ihrer Architekturen identifizieren können, an denen sich zukünftig Änderungen ergeben werden.",
      "id": [
        "298013"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298014]\n\nUm die Veränderbarkeit von Faktoren zu charakterisieren, sollten Sie folgende Fragen beantworten:10\n\n• Auf welche Weise kann sich der Faktor ändern? Welche Änderungen an diesem Faktor können Sie (oder andere Projektbeteiligte) absehen? \n• Wie häufig können Änderungen sein? \n• Könnte sich der Faktor bereits während der Systementwicklung ändern? \n• Hängt der Faktor mit anderen Einflussfaktoren zusammen? \n• Was bedeutet eine Änderung des Faktors für die Architektur?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Um die Veränderbarkeit von Faktoren zu charakterisieren, sollten Sie folgende Fragen beantworten:10\n\n• Auf welche Weise kann sich der Faktor ändern? Welche Änderungen an diesem Faktor können Sie (oder andere Projektbeteiligte) absehen? \n• Wie häufig können Änderungen sein? \n• Könnte sich der Faktor bereits während der Systementwicklung ändern? \n• Hängt der Faktor mit anderen Einflussfaktoren zusammen? \n• Was bedeutet eine Änderung des Faktors für die Architektur?",
      "id": [
        "298014"
      ]
    }
  },
  {
    "bitmark": "[.note:bitmark--]\n[@id:298015]\n\nDokumentieren Sie diese möglichen Variabilitäten! Die verschiedenen Sichten auf die Architektur (siehe Kapitel 4) bieten dafür geeigneten Platz.",
    "bit": {
      "type": "note",
      "format": "bitmark--",
      "body": "Dokumentieren Sie diese möglichen Variabilitäten! Die verschiedenen Sichten auf die Architektur (siehe Kapitel 4) bieten dafür geeigneten Platz.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298015"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298016]\n[▼ch-67]\n[%3.4]\n[##Einflussfaktoren finden]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.4",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "298016"
      ],
      "anchor": "ch-67",
      "title": "Einflussfaktoren finden"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298017]\n\nIm letzten Abschnitt haben Sie gelernt, was Einflussfaktoren sind und aus welchen Bereichen sie stammen. Nun gilt es, möglichst alle für die Software-Architektur eines konkreten Systems relevanten Einflussfaktoren zu identifizieren.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Im letzten Abschnitt haben Sie gelernt, was Einflussfaktoren sind und aus welchen Bereichen sie stammen. Nun gilt es, möglichst alle für die Software-Architektur eines konkreten Systems relevanten Einflussfaktoren zu identifizieren.",
      "id": [
        "298017"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298018]\n\nMachen Sie diese Faktoren explizit und lassen Sie alle Projektbeteiligten wissen, welchen Einflüssen das Projekt oder das System ausgesetzt ist.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Machen Sie diese Faktoren explizit und lassen Sie alle Projektbeteiligten wissen, welchen Einflüssen das Projekt oder das System ausgesetzt ist.",
      "id": [
        "298018"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298019]\n\nIn den folgenden Abschnitten stelle ich Ihnen typische Einflussfaktoren vor. Ich zeige Ihnen, wie Sie diese Faktoren in einer einfachen und praxistauglichen Form systematisch erfassen und beschreiben können.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In den folgenden Abschnitten stelle ich Ihnen typische Einflussfaktoren vor. Ich zeige Ihnen, wie Sie diese Faktoren in einer einfachen und praxistauglichen Form systematisch erfassen und beschreiben können.",
      "id": [
        "298019"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298020]\n[▼ch-68]\n[####Beschreiben Sie Einflussfaktoren explizit]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298020"
      ],
      "anchor": "ch-68",
      "title": "Beschreiben Sie Einflussfaktoren explizit"
    }
  },
  {
    "bitmark": "[.info:bitmark--]\n[@id:298021]\n\n[%Tabelle von Einflussfaktoren]\nDie Einflussfaktoren auf eine konkrete Software-Architektur sollten Sie in einer Tabelle (als Bestandteil der Architekturdokumentation) festhalten. \nNeben der Bezeichnung des Faktors gehört dazu auch die Beschreibung seiner Flexibilität und Veränderbarkeit.",
    "bit": {
      "type": "info",
      "format": "bitmark--",
      "body": "Die Einflussfaktoren auf eine konkrete Software-Architektur sollten Sie in einer Tabelle (als Bestandteil der Architekturdokumentation) festhalten. \nNeben der Bezeichnung des Faktors gehört dazu auch die Beschreibung seiner Flexibilität und Veränderbarkeit.",
      "item": "Tabelle von Einflussfaktoren",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298021"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298022]\n\nZusätzlich sollten Sie beschreiben, auf welche Elemente der Architektur jeder Faktor einwirkt. Dies ist vor dem Entwurf der Architektur (genauer: der Architektursichten) kaum möglich, weil die Elemente der einzelnen Sichten noch nicht identifiziert oder bestimmt sind. Sie sollten dies jedoch im Laufe der Iterationen des Architekturentwurfs nachtragen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Zusätzlich sollten Sie beschreiben, auf welche Elemente der Architektur jeder Faktor einwirkt. Dies ist vor dem Entwurf der Architektur (genauer: der Architektursichten) kaum möglich, weil die Elemente der einzelnen Sichten noch nicht identifiziert oder bestimmt sind. Sie sollten dies jedoch im Laufe der Iterationen des Architekturentwurfs nachtragen.",
      "id": [
        "298022"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298023]\n\nIn den folgenden Abschnitten stelle ich Ihnen typische Einflussfaktoren vor.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In den folgenden Abschnitten stelle ich Ihnen typische Einflussfaktoren vor.",
      "id": [
        "298023"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298024]\n[▼ch-69]\n[####Organisatorische Faktoren]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298024"
      ],
      "anchor": "ch-69",
      "title": "Organisatorische Faktoren"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298025]\n\nDiese Faktoren beziehen sich im weitesten Sinne auf die Umgebung, in der das System erstellt wird. Sie prägen das System indirekt. Hierzu zählen Aspekte wie Termin- und Budgetplanung, vorhandene Mitarbeiter, technische Ressourcen, Entwicklungsprozesse, Vorgaben bezüglich Werkzeugen und Ähnliches. Tabelle 3.1 gibt einen Überblick über typische organisatorische Faktoren.12",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Diese Faktoren beziehen sich im weitesten Sinne auf die Umgebung, in der das System erstellt wird. Sie prägen das System indirekt. Hierzu zählen Aspekte wie Termin- und Budgetplanung, vorhandene Mitarbeiter, technische Ressourcen, Entwicklungsprozesse, Vorgaben bezüglich Werkzeugen und Ähnliches. Tabelle 3.1 gibt einen Überblick über typische organisatorische Faktoren.12",
      "id": [
        "298025"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298026]\n\nEinige Tipps zur Identifikation von organisatorischen Faktoren Ihrer Projekte:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Einige Tipps zur Identifikation von organisatorischen Faktoren Ihrer Projekte:",
      "id": [
        "298026"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298027]\n\n• Denken Sie negativ. Murphys Regel besagt: Wenn etwas schiefgehen kann, wird es irgendwann schiefgehen. Und es geschieht immer im denkbar schlechtesten Moment.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Denken Sie negativ. Murphys Regel besagt: Wenn etwas schiefgehen kann, wird es irgendwann schiefgehen. Und es geschieht immer im denkbar schlechtesten Moment.",
      "id": [
        "298027"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298028]\n\n• Politik und Organisation, nicht Technik, setzen die Grenzen dafür, was ein Projekt erreichen kann und darf. Bringen Sie die „politischen“ Stakeholder auf Ihre Seite. Stellen Sie sicher, dass Sie die Intention der „Politiker“ innerhalb Ihrer Organisation richtig verstanden haben.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Politik und Organisation, nicht Technik, setzen die Grenzen dafür, was ein Projekt erreichen kann und darf. Bringen Sie die „politischen“ Stakeholder auf Ihre Seite. Stellen Sie sicher, dass Sie die Intention der „Politiker“ innerhalb Ihrer Organisation richtig verstanden haben.",
      "id": [
        "298028"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298029]\n\n• Eine fundamentale Gleichung lautet: „Geld = Politik“ ([Rechtin2000]). Die Politik gibt Projekten die Kostenregeln vor. Diese Kostenregeln besitzen prägenden Einfluss auf Architekturen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Eine fundamentale Gleichung lautet: „Geld = Politik“ ([Rechtin2000]). Die Politik gibt Projekten die Kostenregeln vor. Diese Kostenregeln besitzen prägenden Einfluss auf Architekturen.",
      "id": [
        "298029"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298030]\n\n• Finden Sie heraus, welche Ziele die einzelnen Stakeholder mit dem System verfolgen. Oftmals werden in einem Projekt verschiedene Ziele verfolgt!",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Finden Sie heraus, welche Ziele die einzelnen Stakeholder mit dem System verfolgen. Oftmals werden in einem Projekt verschiedene Ziele verfolgt!",
      "id": [
        "298030"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298031]\n\n[%Ziele der Stakeholder finden]\n• Die besten technischen Lösungen sind nicht unbedingt die besten politischen Lösungen. Im Regelfall sind „politische“ Stakeholder die Auftraggeber und Eigentümer von Projekten (nach [Rechtin2000]). Sie entscheiden meist nach anderen Kriterien als „technische“ Stakeholder.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Die besten technischen Lösungen sind nicht unbedingt die besten politischen Lösungen. Im Regelfall sind „politische“ Stakeholder die Auftraggeber und Eigentümer von Projekten (nach [Rechtin2000]). Sie entscheiden meist nach anderen Kriterien als „technische“ Stakeholder.",
      "id": [
        "298031"
      ],
      "item": "Ziele der Stakeholder finden"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298032]\n\n• Betrachten Sie systemübergreifende Prozesse oder Rollen innerhalb der Organisation. Beispiel: In vielen großen Unternehmen gibt es Vorgaben zur Datenmodellierung und zum Datenbankdesign (die von dedizierten Datenbankadministratoren geprüft und freigegeben werden müssen).",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Betrachten Sie systemübergreifende Prozesse oder Rollen innerhalb der Organisation. Beispiel: In vielen großen Unternehmen gibt es Vorgaben zur Datenmodellierung und zum Datenbankdesign (die von dedizierten Datenbankadministratoren geprüft und freigegeben werden müssen).",
      "id": [
        "298032"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298033]\n\n• Beziehen Sie andere Projekte innerhalb der Organisation in Ihre Betrachtung ein. Sie können aus deren Verlauf viel über Stärken und Schwächen der Organisation hinsichtlich Software-Erstellung lernen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Beziehen Sie andere Projekte innerhalb der Organisation in Ihre Betrachtung ein. Sie können aus deren Verlauf viel über Stärken und Schwächen der Organisation hinsichtlich Software-Erstellung lernen.",
      "id": [
        "298033"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298034]\n\n• Die Erfahrung der beteiligten Entscheider spielt meistens eine wichtige Rolle. So schränkt eine negative Erfahrung des Auftraggebers mit einer bestimmten Technologie Ihre Entwurfsalternativen möglicherweise ein.13",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Die Erfahrung der beteiligten Entscheider spielt meistens eine wichtige Rolle. So schränkt eine negative Erfahrung des Auftraggebers mit einer bestimmten Technologie Ihre Entwurfsalternativen möglicherweise ein.13",
      "id": [
        "298034"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298035]\n\n• Werfen Sie einen Blick auf das Risikomanagement Ihrer Projektleitung. Eventuell finden Sie dort neue und für die Architektur wichtige Faktoren.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Werfen Sie einen Blick auf das Risikomanagement Ihrer Projektleitung. Eventuell finden Sie dort neue und für die Architektur wichtige Faktoren.",
      "id": [
        "298035"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298036]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_5.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298036"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_5.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298037]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_6.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298037"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_6.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298038]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_7.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298038"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_7.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298039]\n\nZu den organisatorischen Einflussfaktoren ein kleines Beispiel:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Zu den organisatorischen Einflussfaktoren ein kleines Beispiel:",
      "id": [
        "298039"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298040]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_8.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298040"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_8.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298041]\n\nDie Informatik-Tochterfirma eines Konzerns erhielt den internen Auftrag, ein Internet-basiertes Informationssystem für Finanznachrichten und Geschäftsberichte zu entwickeln und zu vermarkten. \nDas Entwicklungsteam schien anfangs frei von organisatorischen und technischen Einflüssen zu sein. Im Laufe der Entwicklung stellt sich heraus, dass die Firma mit Marktpartnern und Kunden projektübergreifende „Service Level Agreements“ (SLAs) bezüglich der Verfügbarkeit von Software vertraglich vereinbart hatte. Als Konsequenz für die Architektur ergab sich die Notwendigkeit, eine (anfänglich nicht geplante) Überwachungskomponente zum verbindlichen Nachweis der Systemverfügbarkeit zu entwickeln. Dies machte eine kosten- und zeitintensive Änderung des gesamten Persistenzkonzeptes notwendig. \nDer zuständigen Projektleiterin gelang es, mit den betroffenen Endkunden des Systems eine Änderung der Nachweispflicht und der SLAs zu vereinbaren und damit zumindest den Termindruck der notwendigen Änderungen zu entschärfen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Informatik-Tochterfirma eines Konzerns erhielt den internen Auftrag, ein Internet-basiertes Informationssystem für Finanznachrichten und Geschäftsberichte zu entwickeln und zu vermarkten. \nDas Entwicklungsteam schien anfangs frei von organisatorischen und technischen Einflüssen zu sein. Im Laufe der Entwicklung stellt sich heraus, dass die Firma mit Marktpartnern und Kunden projektübergreifende „Service Level Agreements“ (SLAs) bezüglich der Verfügbarkeit von Software vertraglich vereinbart hatte. Als Konsequenz für die Architektur ergab sich die Notwendigkeit, eine (anfänglich nicht geplante) Überwachungskomponente zum verbindlichen Nachweis der Systemverfügbarkeit zu entwickeln. Dies machte eine kosten- und zeitintensive Änderung des gesamten Persistenzkonzeptes notwendig. \nDer zuständigen Projektleiterin gelang es, mit den betroffenen Endkunden des Systems eine Änderung der Nachweispflicht und der SLAs zu vereinbaren und damit zumindest den Termindruck der notwendigen Änderungen zu entschärfen.",
      "id": [
        "298041"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298042]\n[▼ch-70]\n[####Technische Faktoren]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298042"
      ],
      "anchor": "ch-70",
      "title": "Technische Faktoren"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298043]\n\nTechnische Faktoren mit Relevanz für die Software-Architektur betreffen einerseits die technische Infrastruktur, also die Ablaufumgebung des Systems. Andererseits umfassen sie auch technische Vorgaben für die Entwicklung, einzusetzende Fremdsoftware und vorhandene Systeme.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Technische Faktoren mit Relevanz für die Software-Architektur betreffen einerseits die technische Infrastruktur, also die Ablaufumgebung des Systems. Andererseits umfassen sie auch technische Vorgaben für die Entwicklung, einzusetzende Fremdsoftware und vorhandene Systeme.",
      "id": [
        "298043"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298044]\n\nEinige Tipps bei der Suche nach technischen Faktoren: \n\n• Analysieren Sie andere Projekte innerhalb Ihrer Organisation. Befragen Sie Architekten und Projektleiter solcher Projekte. \n• Betrachten Sie andere Systeme innerhalb der Organisation. Wie sieht die technische Umgebung dieser Systeme aus? Wie werden diese Systeme betrieben? \n• Betrachten Sie die vorhandene Infrastruktur hinsichtlich Hardware und Software. \n• Das Qualitätsmanagement der Organisation kann Hinweise auf weitere Einflussfaktoren geben. \n• Gibt es Methoden, Standards oder Vorlagen für Software-Projekte? \n• Analog zum Tipp bei den organisatorischen Faktoren: Betrachten Sie systemübergreifende Abnahme- und Freigabeprozesse. Sie machen häufig Vorgaben zur Gestaltung von Datenmodellen, Datenbanken, Benutzeroberflächen, Geschäftsprozessen (Workflows), Sicherheit, Laufzeit- und Wartungsprozessen sowie der technischen Infrastruktur. \n• Tabelle 3.2 zeigt einige typische technische Einflussfaktoren.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Einige Tipps bei der Suche nach technischen Faktoren: \n\n• Analysieren Sie andere Projekte innerhalb Ihrer Organisation. Befragen Sie Architekten und Projektleiter solcher Projekte. \n• Betrachten Sie andere Systeme innerhalb der Organisation. Wie sieht die technische Umgebung dieser Systeme aus? Wie werden diese Systeme betrieben? \n• Betrachten Sie die vorhandene Infrastruktur hinsichtlich Hardware und Software. \n• Das Qualitätsmanagement der Organisation kann Hinweise auf weitere Einflussfaktoren geben. \n• Gibt es Methoden, Standards oder Vorlagen für Software-Projekte? \n• Analog zum Tipp bei den organisatorischen Faktoren: Betrachten Sie systemübergreifende Abnahme- und Freigabeprozesse. Sie machen häufig Vorgaben zur Gestaltung von Datenmodellen, Datenbanken, Benutzeroberflächen, Geschäftsprozessen (Workflows), Sicherheit, Laufzeit- und Wartungsprozessen sowie der technischen Infrastruktur. \n• Tabelle 3.2 zeigt einige typische technische Einflussfaktoren.",
      "id": [
        "298044"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298045]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_9.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298045"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_9.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298046]\n[▼ch-71]\n[####Systemfaktoren]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298046"
      ],
      "anchor": "ch-71",
      "title": "Systemfaktoren"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298047]\n\nDie Systemfaktoren beschreiben die Anforderungen an das System, die geforderten Eigenschaften (__required features__) und Randbedingungen (__required constraints__). Sie sind üblicherweise15 in der Anforderungsanalyse16 (__requirements engineering__) erarbeitet und dokumentiert worden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Systemfaktoren beschreiben die Anforderungen an das System, die geforderten Eigenschaften (__required features__) und Randbedingungen (__required constraints__). Sie sind üblicherweise15 in der Anforderungsanalyse16 (__requirements engineering__) erarbeitet und dokumentiert worden.",
      "id": [
        "298047"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298048]\n\nVielleicht kennen Sie die Systemfaktoren unter den Begriffen funktionale und nichtfunktionale Anforderungen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Vielleicht kennen Sie die Systemfaktoren unter den Begriffen funktionale und nichtfunktionale Anforderungen.",
      "id": [
        "298048"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298049]\n\nDiese Kategorien haben folgende Bedeutung: \n\n• „Required Features“ oder funktionale Anforderungen beschreiben die geforderte Funktionalität des Systems. Sie können zur Laufzeit des Systems an dessen Ausgaben festgestellt werden. \n• „Required Constraints“, auch nicht-funktionale Anforderungen oder Qualitätsanforderungen genannt, schränken die Freiheitsgrade von Architekten beim Entwurf ein. Der nachfolgende Abschnitt beschreibt, was es mit Qualitätsanforderungen auf sich hat und wie Sie typische Qualitätsmerkmale in IT-Systemen erreichen. \n• Zu guter Letzt sollten Sie die Abhängigkeiten von anderen IT-Systemen als Einflussfaktoren beachten. Falls es diese Systeme bereits gibt, können Sie häufig von (relativ!) stabilen Schnittstellen ausgehen. Falls diese Systeme sich gerade in der Entwicklung befinden, müssen Sie erhöhte Aufwände und Risiken für die Definition, Abstimmung und Umsetzung der jeweiligen Schnittstellen berücksichtigen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Diese Kategorien haben folgende Bedeutung: \n\n• „Required Features“ oder funktionale Anforderungen beschreiben die geforderte Funktionalität des Systems. Sie können zur Laufzeit des Systems an dessen Ausgaben festgestellt werden. \n• „Required Constraints“, auch nicht-funktionale Anforderungen oder Qualitätsanforderungen genannt, schränken die Freiheitsgrade von Architekten beim Entwurf ein. Der nachfolgende Abschnitt beschreibt, was es mit Qualitätsanforderungen auf sich hat und wie Sie typische Qualitätsmerkmale in IT-Systemen erreichen. \n• Zu guter Letzt sollten Sie die Abhängigkeiten von anderen IT-Systemen als Einflussfaktoren beachten. Falls es diese Systeme bereits gibt, können Sie häufig von (relativ!) stabilen Schnittstellen ausgehen. Falls diese Systeme sich gerade in der Entwicklung befinden, müssen Sie erhöhte Aufwände und Risiken für die Definition, Abstimmung und Umsetzung der jeweiligen Schnittstellen berücksichtigen.",
      "id": [
        "298049"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298050]\n[▼ch-72]\n[%3.5]\n[##Risiken identifizieren]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.5",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "298050"
      ],
      "anchor": "ch-72",
      "title": "Risiken identifizieren"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298051]\n\nAufgrund der Anforderungen und Einflussfaktoren entstehen bei der Systementwicklung Risiken. Die Risiken sollten Sie explizit identifizieren und dagegen passende Maßnahmen und Lösungsstrategien entwickeln.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Aufgrund der Anforderungen und Einflussfaktoren entstehen bei der Systementwicklung Risiken. Die Risiken sollten Sie explizit identifizieren und dagegen passende Maßnahmen und Lösungsstrategien entwickeln.",
      "id": [
        "298051"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298052]\n\nDie Kenntnis der Risiken hilft Ihnen bei Ihren Entwurfsentscheidungen. Stehen Sie vor der __Qual der Wahl__, dann sollten Sie neben konkreten Anforderungen und Einflussfaktoren bei Ihrer Entscheidung die drohenden Risiken berücksichtigen. \nBetrachten Sie diese Aktivität als eine Art „kritische Zusammenfassung“ von Anforderungen und Einflussfaktoren. Stellen Sie die Risiken Ihren Projektbeteiligten vor, insbesondere den Auftraggebern.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Kenntnis der Risiken hilft Ihnen bei Ihren Entwurfsentscheidungen. Stehen Sie vor der __Qual der Wahl__, dann sollten Sie neben konkreten Anforderungen und Einflussfaktoren bei Ihrer Entscheidung die drohenden Risiken berücksichtigen. \nBetrachten Sie diese Aktivität als eine Art „kritische Zusammenfassung“ von Anforderungen und Einflussfaktoren. Stellen Sie die Risiken Ihren Projektbeteiligten vor, insbesondere den Auftraggebern.",
      "id": [
        "298052"
      ]
    }
  },
  {
    "bitmark": "[.info:bitmark--]\n[@id:298053]\n\nMachen Sie Auftraggebern klar, welche Risiken durch welche Einflussfaktoren und Anforderungen entstehen. Diese explizite Darstellung von Risiken gibt Ihnen die Möglichkeit, mit Ihren Auftraggebern über Prioritäten von Anforderungen und Einflussfaktoren zu diskutieren.",
    "bit": {
      "type": "info",
      "format": "bitmark--",
      "body": "Machen Sie Auftraggebern klar, welche Risiken durch welche Einflussfaktoren und Anforderungen entstehen. Diese explizite Darstellung von Risiken gibt Ihnen die Möglichkeit, mit Ihren Auftraggebern über Prioritäten von Anforderungen und Einflussfaktoren zu diskutieren.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298053"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298054]\n\nLeider gibt es jedoch keinen systematischen oder deterministischen Weg, die Risiken von Software-Projekten zu identifizieren. Hier helfen Ihnen lediglich Ihre Erfahrung und Ihr Sachverstand. Nachfolgend finden Sie in Kurzform einige Techniken, mit denen Sie auf Basis der Einflussfaktoren wichtige Risiken identifizieren können:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Leider gibt es jedoch keinen systematischen oder deterministischen Weg, die Risiken von Software-Projekten zu identifizieren. Hier helfen Ihnen lediglich Ihre Erfahrung und Ihr Sachverstand. Nachfolgend finden Sie in Kurzform einige Techniken, mit denen Sie auf Basis der Einflussfaktoren wichtige Risiken identifizieren können:",
      "id": [
        "298054"
      ]
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:298055]\n\n• Laden Sie verschiedene Projektbeteiligte zu einer Brainstorming-Sitzung ein. \n• Diskutieren Sie die Liste Ihrer spezifischen Einflussfaktoren mit Mitarbeitern aus anderen Projekten. \n• Orientieren Sie sich am Risikomanagement der Projektleitung. \n• Abstrahieren Sie von den Einflussfaktoren. Verallgemeinern Sie. \n• Beachten Sie die Wechselwirkungen oder gegenseitige Verstärkung von Faktoren. Beispiel: Das Entwicklungsteam besitzt keine Erfahrung mit der geforderten Programmiersprache, und gleichzeitig gibt es kein Budget für Schulung.",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "• Laden Sie verschiedene Projektbeteiligte zu einer Brainstorming-Sitzung ein. \n• Diskutieren Sie die Liste Ihrer spezifischen Einflussfaktoren mit Mitarbeitern aus anderen Projekten. \n• Orientieren Sie sich am Risikomanagement der Projektleitung. \n• Abstrahieren Sie von den Einflussfaktoren. Verallgemeinern Sie. \n• Beachten Sie die Wechselwirkungen oder gegenseitige Verstärkung von Faktoren. Beispiel: Das Entwicklungsteam besitzt keine Erfahrung mit der geforderten Programmiersprache, und gleichzeitig gibt es kein Budget für Schulung.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298055"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298056]\n\nTabelle 3.3 zeigt einige typische Projektrisiken, die nach meiner Erfahrung in der Praxis immer wieder auftreten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Tabelle 3.3 zeigt einige typische Projektrisiken, die nach meiner Erfahrung in der Praxis immer wieder auftreten.",
      "id": [
        "298056"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298057]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_10.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298057"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_10.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298058]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_11.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298058"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_11.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298059]\n[▼ch-73]\n[####Dokumentieren Sie die Risiken]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298059"
      ],
      "anchor": "ch-73",
      "title": "Dokumentieren Sie die Risiken"
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:298060]\n\n[%Probleme offenlegen!]\n• Seien Sie bei der Dokumentation von Software-Architekturen pragmatisch – weniger ist oftmals mehr. \n• Stellen Sie vor allem sicher, dass sämtlichen Projektbeteiligten die Risiken des Projektes bekannt sind. Frühzeitige Offenlegung der (potenziellen) Probleme ermöglicht es allen Beteiligten, zur Lösung beizutragen.17\n• Daher: Dokumentieren Sie die Projektrisiken. Dazu genügt eine formlose Tabelle. Notieren Sie dazu, welche Einflussfaktoren auf welche Risiken Einfluss haben. Dann können Sie im Projektverlauf abschätzen, welche Auswirkungen durch Veränderungen der Einflussfaktoren hervorgerufen werden.",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "• Seien Sie bei der Dokumentation von Software-Architekturen pragmatisch – weniger ist oftmals mehr. \n• Stellen Sie vor allem sicher, dass sämtlichen Projektbeteiligten die Risiken des Projektes bekannt sind. Frühzeitige Offenlegung der (potenziellen) Probleme ermöglicht es allen Beteiligten, zur Lösung beizutragen.17\n• Daher: Dokumentieren Sie die Projektrisiken. Dazu genügt eine formlose Tabelle. Notieren Sie dazu, welche Einflussfaktoren auf welche Risiken Einfluss haben. Dann können Sie im Projektverlauf abschätzen, welche Auswirkungen durch Veränderungen der Einflussfaktoren hervorgerufen werden.",
      "item": "Probleme offenlegen!",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298060"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298061]\n\nMöglicherweise übernimmt Ihre Projektleitung das Risikomanagement. Dann können Sie durch Identifikation technischer oder architektureller Risiken und passender Maßnahmen helfen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Möglicherweise übernimmt Ihre Projektleitung das Risikomanagement. Dann können Sie durch Identifikation technischer oder architektureller Risiken und passender Maßnahmen helfen.",
      "id": [
        "298061"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298062]\n[▼ch-74]\n[%3.6]\n[##Qualität explizit beschreiben]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.6",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "298062"
      ],
      "anchor": "ch-74",
      "title": "Qualität explizit beschreiben"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298063]\n\nQualität, laut Duden definiert als „Beschaffenheit, Güte, Wert“, bildet ein wichtiges Ziel für Software-Architekten. Bei Qualität handelt es sich allerdings um ein vielschichtiges Konzept, das mit einer Reihe gravierender Probleme behaftet ist: \n\n• Qualität ist nur indirekt messbar: Es gibt kein absolutes Maß für die Qualität eines Produktes, höchstens für einzelne Eigenschaften (etwa: Zeit- oder Ressourceneffizienz). \n• Qualität ist relativ: Verschiedene Stakeholder haben unterschiedliche Qualitätsbegriffe und -anforderungen. \n• Manager und Auftraggeber fordern Kosteneffizienz, Flexibilität und Wartbarkeit. \n• Endanwender fordern hohe Performance und einfache Benutzbarkeit. \n• Projektleiter fordern Parallelisierbarkeit der Implementierung und gute Testbarkeit. \n• Betreiber fordern Administrierbarkeit und Sicherheit. \n• Qualität der Architektur korreliert nicht notwendigerweise mit der Qualität des Endproduktes: Gute Architekturen können schlecht implementiert sein und dadurch die Qualität des Gesamtsystems mindern. Aus hervorragendem Quellcode kann jedoch nicht auf die Qualität der Architektur geschlossen werden. Insgesamt gilt daher: Architektur ist für die Qualität eines Systems notwendig, aber nicht hinreichend. \n• Die Erfüllung sämtlicher funktionaler Anforderungen lässt keinerlei Aussage über die Erreichung der Qualitätsanforderungen zu. Betrachten Sie das Beispiel eines einfachen Sortierverfahrens: Die (triviale) Anforderung, eine Menge von Variablen gemäß eines vorgegebenen Sortierkriteriums aufsteigend zu ordnen, ist eine beliebte Programmieraufgabe für Einsteiger. Nun denken Sie an einige zusätzliche nichtfunktionale Anforderungen, etwa: \n• Sortierung großer Datenmengen (Terabyte), die nicht mehr zeitgleich im Hauptspeicher gehalten werden können. \n• Sortierung robust gegenüber unterschiedlichen Sortierkriterien (Umlaute, akzentuierte Zeichen, Phoneme, Ähnlichkeitsmaße und anderes). \n• Sortierung für viele parallele Benutzer. \n• Sortierung unterbrechbar für lang laufende Sortiervorgänge. \n• Erweiterbarkeit um weitere Algorithmen, beispielsweise für ressourcenintensive Vergleichsoperationen. \n• Entwickelbarkeit im räumlich verteilten Team.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Qualität, laut Duden definiert als „Beschaffenheit, Güte, Wert“, bildet ein wichtiges Ziel für Software-Architekten. Bei Qualität handelt es sich allerdings um ein vielschichtiges Konzept, das mit einer Reihe gravierender Probleme behaftet ist: \n\n• Qualität ist nur indirekt messbar: Es gibt kein absolutes Maß für die Qualität eines Produktes, höchstens für einzelne Eigenschaften (etwa: Zeit- oder Ressourceneffizienz). \n• Qualität ist relativ: Verschiedene Stakeholder haben unterschiedliche Qualitätsbegriffe und -anforderungen. \n• Manager und Auftraggeber fordern Kosteneffizienz, Flexibilität und Wartbarkeit. \n• Endanwender fordern hohe Performance und einfache Benutzbarkeit. \n• Projektleiter fordern Parallelisierbarkeit der Implementierung und gute Testbarkeit. \n• Betreiber fordern Administrierbarkeit und Sicherheit. \n• Qualität der Architektur korreliert nicht notwendigerweise mit der Qualität des Endproduktes: Gute Architekturen können schlecht implementiert sein und dadurch die Qualität des Gesamtsystems mindern. Aus hervorragendem Quellcode kann jedoch nicht auf die Qualität der Architektur geschlossen werden. Insgesamt gilt daher: Architektur ist für die Qualität eines Systems notwendig, aber nicht hinreichend. \n• Die Erfüllung sämtlicher funktionaler Anforderungen lässt keinerlei Aussage über die Erreichung der Qualitätsanforderungen zu. Betrachten Sie das Beispiel eines einfachen Sortierverfahrens: Die (triviale) Anforderung, eine Menge von Variablen gemäß eines vorgegebenen Sortierkriteriums aufsteigend zu ordnen, ist eine beliebte Programmieraufgabe für Einsteiger. Nun denken Sie an einige zusätzliche nichtfunktionale Anforderungen, etwa: \n• Sortierung großer Datenmengen (Terabyte), die nicht mehr zeitgleich im Hauptspeicher gehalten werden können. \n• Sortierung robust gegenüber unterschiedlichen Sortierkriterien (Umlaute, akzentuierte Zeichen, Phoneme, Ähnlichkeitsmaße und anderes). \n• Sortierung für viele parallele Benutzer. \n• Sortierung unterbrechbar für lang laufende Sortiervorgänge. \n• Erweiterbarkeit um weitere Algorithmen, beispielsweise für ressourcenintensive Vergleichsoperationen. \n• Entwickelbarkeit im räumlich verteilten Team.",
      "id": [
        "298063"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298064]\n\nDiese Qualitätsanforderungen können von naiven Implementierungen nicht erfüllt werden – dazu bedarf es grundlegender architektonischer Maßnahmen!",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Diese Qualitätsanforderungen können von naiven Implementierungen nicht erfüllt werden – dazu bedarf es grundlegender architektonischer Maßnahmen!",
      "id": [
        "298064"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298065]\n\nViele Publikationen18 über Software-Architektur ignorieren das Thema der nichtfunktionalen Anforderungen völlig. Es scheint fast, als fielen Verständlichkeit, Wartbarkeit und Performance von Systemen als Nebenprodukte ab, wenn der eifrige Architekt nur in ausreichender Menge Design- und Architekturmuster anwendet. Das Gegenteil ist der Fall:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Viele Publikationen18 über Software-Architektur ignorieren das Thema der nichtfunktionalen Anforderungen völlig. Es scheint fast, als fielen Verständlichkeit, Wartbarkeit und Performance von Systemen als Nebenprodukte ab, wenn der eifrige Architekt nur in ausreichender Menge Design- und Architekturmuster anwendet. Das Gegenteil ist der Fall:",
      "id": [
        "298065"
      ]
    }
  },
  {
    "bitmark": "[.note:bitmark--]\n[@id:298066]\n\nQualitätsmerkmale müssen Entwurfsziele sein. Treffen Sie Entscheidungen zur Erreichung solcher Ziele bewusst und frühzeitig. Qualität entsteht nicht von selbst, sondern muss konstruiert werden!",
    "bit": {
      "type": "note",
      "format": "bitmark--",
      "body": "Qualitätsmerkmale müssen Entwurfsziele sein. Treffen Sie Entscheidungen zur Erreichung solcher Ziele bewusst und frühzeitig. Qualität entsteht nicht von selbst, sondern muss konstruiert werden!",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298066"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298067]\n[▼ch-75]\n[%3.6.1]\n[###Qualitätsmerkmale von Software-Systemen]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.6.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "298067"
      ],
      "anchor": "ch-75",
      "title": "Qualitätsmerkmale von Software-Systemen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298068]\n\nDie Qualität von Software-Systemen wird immer bezogen auf einzelne Eigenschaften oder Merkmale. Beispiele für solche Merkmale sind Effizienz (Performance), Verfügbarkeit, Änderbarkeit und Verständlichkeit.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die Qualität von Software-Systemen wird immer bezogen auf einzelne Eigenschaften oder Merkmale. Beispiele für solche Merkmale sind Effizienz (Performance), Verfügbarkeit, Änderbarkeit und Verständlichkeit.",
      "id": [
        "298068"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298069]\n\nEs gibt eine ganze Reihe unterschiedlicher Definitionen von Qualitätsmodellen und Qualitätsmerkmalen. Die bekannten Qualitätsmodelle (siehe etwa [Wallmüller01]) definieren einige zentrale Qualitätseigenschaften (beispielsweise Zuverlässigkeit, Effizienz, Wartbarkeit, Portabilität etc.) und verfeinern diese Eigenschaften durch eine Hierarchie weiterer Merkmale.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Es gibt eine ganze Reihe unterschiedlicher Definitionen von Qualitätsmodellen und Qualitätsmerkmalen. Die bekannten Qualitätsmodelle (siehe etwa [Wallmüller01]) definieren einige zentrale Qualitätseigenschaften (beispielsweise Zuverlässigkeit, Effizienz, Wartbarkeit, Portabilität etc.) und verfeinern diese Eigenschaften durch eine Hierarchie weiterer Merkmale.",
      "id": [
        "298069"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298070]\n\nEgal, welches dieser Modelle Sie verwenden: Achten Sie darauf, innerhalb Ihrer Projekte, besser noch innerhalb ganzer Organisationen, eine einheitliche Terminologie einzuführen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Egal, welches dieser Modelle Sie verwenden: Achten Sie darauf, innerhalb Ihrer Projekte, besser noch innerhalb ganzer Organisationen, eine einheitliche Terminologie einzuführen.",
      "id": [
        "298070"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298071]\n\nTabelle 3.4 zeigt Ihnen die Qualitätsmerkmale gemäß DIN/ISO 9126.19 Diese Norm enthält die wesentlichen Begriffe rund um Software-Qualität. Ihr fehlen jedoch zwei wichtige Qualitätsziele von Software-Architekturen: \n\n• Verständlichkeit der Architektur selbst. \n• Testbarkeit der Architektur. \n\nFalls Sie in dieser Tabelle (vergeblich) nach dem Stichwort „Performance“ suchen – im DIN-normierten Sprachgebrauch heißt es „Effizienz“.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Tabelle 3.4 zeigt Ihnen die Qualitätsmerkmale gemäß DIN/ISO 9126.19 Diese Norm enthält die wesentlichen Begriffe rund um Software-Qualität. Ihr fehlen jedoch zwei wichtige Qualitätsziele von Software-Architekturen: \n\n• Verständlichkeit der Architektur selbst. \n• Testbarkeit der Architektur. \n\nFalls Sie in dieser Tabelle (vergeblich) nach dem Stichwort „Performance“ suchen – im DIN-normierten Sprachgebrauch heißt es „Effizienz“.",
      "id": [
        "298071"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298072]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_12.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298072"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_12.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298073]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_13.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298073"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_13.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298074]\n[▼ch-76]\n[%3.6.2]\n[###Szenarien konkretisieren Qualität]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.6.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "298074"
      ],
      "anchor": "ch-76",
      "title": "Szenarien konkretisieren Qualität"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298075]\n\nJetzt kennen Sie zwar die wichtigsten Qualitätsmerkmale, benötigen aber noch ein Mittel, um diese Merkmale praxisgerecht für Ihre Projekte zu konkretisieren und zu definieren. Hierzu eignen sich Szenarien (nach [Bass+03]). Szenarien beschreiben, was beim Eintreffen eines Stimulus auf ein System in bestimmten Situationen geschieht. Sie charakterisieren damit das Zusammenspiel von Stakeholdern mit dem System. Szenarien operationalisieren Qualitätsmerkmale und machen sie messbar.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Jetzt kennen Sie zwar die wichtigsten Qualitätsmerkmale, benötigen aber noch ein Mittel, um diese Merkmale praxisgerecht für Ihre Projekte zu konkretisieren und zu definieren. Hierzu eignen sich Szenarien (nach [Bass+03]). Szenarien beschreiben, was beim Eintreffen eines Stimulus auf ein System in bestimmten Situationen geschieht. Sie charakterisieren damit das Zusammenspiel von Stakeholdern mit dem System. Szenarien operationalisieren Qualitätsmerkmale und machen sie messbar.",
      "id": [
        "298075"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298076]\n[▼ch-77]\n[####Typen von Szenarien]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298076"
      ],
      "anchor": "ch-77",
      "title": "Typen von Szenarien"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298077]\n\nEs gibt einige unterschiedliche Typen von Szenarien: \n\n• __Anwendungsszenarien__ beschreiben, wie das System zur Laufzeit auf einen bestimmten Auslöser reagieren soll. Hierunter fallen auch Szenarien zur Beschreibung von Effizienz oder Performance. Beispiel: Das System beantwortet eine Benutzeranfrage innerhalb einer Sekunde. \n• __Änderungsszenarien__ beschreiben eine Modifikation des Systems oder seiner unmittelbaren Umgebung. Beispiel: Eine zusätzliche Funktionalität wird implementiert, oder die Anforderung an ein Qualitätsmerkmal ändert sich. \n• __Stress- oder Grenzszenarien__ beschreiben, wie das System auf Extremsituationen reagiert. Beispiele: Das System soll jetzt im Online- statt wie bisher im Batch-Betrieb laufen. Wie reagiert das System auf einen Stromausfall?",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Es gibt einige unterschiedliche Typen von Szenarien: \n\n• __Anwendungsszenarien__ beschreiben, wie das System zur Laufzeit auf einen bestimmten Auslöser reagieren soll. Hierunter fallen auch Szenarien zur Beschreibung von Effizienz oder Performance. Beispiel: Das System beantwortet eine Benutzeranfrage innerhalb einer Sekunde. \n• __Änderungsszenarien__ beschreiben eine Modifikation des Systems oder seiner unmittelbaren Umgebung. Beispiel: Eine zusätzliche Funktionalität wird implementiert, oder die Anforderung an ein Qualitätsmerkmal ändert sich. \n• __Stress- oder Grenzszenarien__ beschreiben, wie das System auf Extremsituationen reagiert. Beispiele: Das System soll jetzt im Online- statt wie bisher im Batch-Betrieb laufen. Wie reagiert das System auf einen Stromausfall?",
      "id": [
        "298077"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298078]\n[▼ch-78]\n[####Beispiele für Szenarien]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298078"
      ],
      "anchor": "ch-78",
      "title": "Beispiele für Szenarien"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298079]\n\nIch möchte Ihnen die Anwendung von Szenarien zur Konkretisierung von Qualitätsanforderungen anhand einiger Beispiele verdeutlichen. \n\n• __Anwendungsszenarien__: \n• Die Antwort auf eine Angebotsanfrage muss Endbenutzern im Regelbetrieb in weniger als 5 Sekunden dargestellt werden. Im Betrieb unter Hochlast (Jahresendgeschäft) darf eine Antwort bis zu 15 Sekunden dauern, in diesem Fall ist vorher ein entsprechender Hinweis darzustellen. \n• Ein Benutzer ohne Vorkenntnisse muss bei der erstmaligen Verwendung des Systems innerhalb von 15 Minuten in der Lage sein, die gewünschte Funktionalität zu lokalisieren und zu verwenden. \n• Bei Eingabe illegaler oder fehlerhafter Daten in die Eingabefelder muss das System entsprechende spezifische Hinweistexte ausgeben und anschließend im Normalbetrieb weiterarbeiten. \n\n• __Änderungsszenarien__: \n• Die Programmierung neuer Versicherungstarife muss in weniger als 30 Personentagen möglich sein. \n• Die Unterstützung einer neuen Browser- oder Client-JDK-Version muss in weniger als 30 Personentagen programmiert und getestet werden können. \n\n• __Stress- oder Grenzszenarien__: \n• Bei Ausfall einer CPU muss das Ersatzsystem (Hot-Spare) im Normalbetrieb innerhalb von 15 Minuten online sein. \n• Die Anbindung eines neuen CRM-Systems20 muss innerhalb von 60 Tagen möglich sein.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Ich möchte Ihnen die Anwendung von Szenarien zur Konkretisierung von Qualitätsanforderungen anhand einiger Beispiele verdeutlichen. \n\n• __Anwendungsszenarien__: \n• Die Antwort auf eine Angebotsanfrage muss Endbenutzern im Regelbetrieb in weniger als 5 Sekunden dargestellt werden. Im Betrieb unter Hochlast (Jahresendgeschäft) darf eine Antwort bis zu 15 Sekunden dauern, in diesem Fall ist vorher ein entsprechender Hinweis darzustellen. \n• Ein Benutzer ohne Vorkenntnisse muss bei der erstmaligen Verwendung des Systems innerhalb von 15 Minuten in der Lage sein, die gewünschte Funktionalität zu lokalisieren und zu verwenden. \n• Bei Eingabe illegaler oder fehlerhafter Daten in die Eingabefelder muss das System entsprechende spezifische Hinweistexte ausgeben und anschließend im Normalbetrieb weiterarbeiten. \n\n• __Änderungsszenarien__: \n• Die Programmierung neuer Versicherungstarife muss in weniger als 30 Personentagen möglich sein. \n• Die Unterstützung einer neuen Browser- oder Client-JDK-Version muss in weniger als 30 Personentagen programmiert und getestet werden können. \n\n• __Stress- oder Grenzszenarien__: \n• Bei Ausfall einer CPU muss das Ersatzsystem (Hot-Spare) im Normalbetrieb innerhalb von 15 Minuten online sein. \n• Die Anbindung eines neuen CRM-Systems20 muss innerhalb von 60 Tagen möglich sein.",
      "id": [
        "298079"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298080]\n[▼ch-79]\n[####Bestandteile von Szenarien]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298080"
      ],
      "anchor": "ch-79",
      "title": "Bestandteile von Szenarien"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298081]\n\nNach diesen Beispielen können Sie sicherlich etwas Methodik vertragen: Szenarien bestehen aus folgenden wesentlichen Teilen (in Klammern die Terminologie aus [Bass+03]: \n\n• Auslöser (__stimulus__): beschreibt eine spezifische Zusammenarbeit des (auslösenden) Stakeholders mit dem System. Beispiele: Ein Benutzer ruft eine Funktion auf, ein Entwickler programmiert eine Erweiterung, ein Administrator installiert oder konfiguriert das System. \n• Quelle des Auslösers (__source__): beschreibt, woher der Auslöser stammt. Beispiele: intern oder extern, Benutzer, Betreiber, Angreifer, Manager. \n• Umgebung (__environment__): beschreibt den Zustand des Systems zum Zeitpunkt des Auslösers. Befindet sich das System unter Normal- oder Höchstlast? Ist die Datenbank verfügbar oder nicht? Sind Benutzer online oder nicht? Hier sollten Sie alle Bedingungen beschreiben, die für das Verständnis des Szenarios wichtig sind. \n• Systembestandteil (__artifact__): beschreibt, welcher Bestandteil des Systems vom Auslöser betroffen ist. Beispiele: Gesamtsystem, Datenbank, Webserver. \n• Antwort (__response__): beschreibt, wie das System durch seine Architektur auf den Auslöser reagiert. Wird die vom Benutzer aufgerufene Funktion ausgeführt? Wie lange benötigt der Entwickler zur Programmierung? Welche Systemteile sind von Installation/Konfiguration betroffen? \n• Antwortmetrik (__response measure__): beschreibt, wie die Antwort gemessen oder bewertet werden kann. Beispiele: Ausfallzeit in Stunden, Korrektheit Ja/ Nein, Änderungszeit in Personentagen, Reaktionszeit in Sekunden.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Nach diesen Beispielen können Sie sicherlich etwas Methodik vertragen: Szenarien bestehen aus folgenden wesentlichen Teilen (in Klammern die Terminologie aus [Bass+03]: \n\n• Auslöser (__stimulus__): beschreibt eine spezifische Zusammenarbeit des (auslösenden) Stakeholders mit dem System. Beispiele: Ein Benutzer ruft eine Funktion auf, ein Entwickler programmiert eine Erweiterung, ein Administrator installiert oder konfiguriert das System. \n• Quelle des Auslösers (__source__): beschreibt, woher der Auslöser stammt. Beispiele: intern oder extern, Benutzer, Betreiber, Angreifer, Manager. \n• Umgebung (__environment__): beschreibt den Zustand des Systems zum Zeitpunkt des Auslösers. Befindet sich das System unter Normal- oder Höchstlast? Ist die Datenbank verfügbar oder nicht? Sind Benutzer online oder nicht? Hier sollten Sie alle Bedingungen beschreiben, die für das Verständnis des Szenarios wichtig sind. \n• Systembestandteil (__artifact__): beschreibt, welcher Bestandteil des Systems vom Auslöser betroffen ist. Beispiele: Gesamtsystem, Datenbank, Webserver. \n• Antwort (__response__): beschreibt, wie das System durch seine Architektur auf den Auslöser reagiert. Wird die vom Benutzer aufgerufene Funktion ausgeführt? Wie lange benötigt der Entwickler zur Programmierung? Welche Systemteile sind von Installation/Konfiguration betroffen? \n• Antwortmetrik (__response measure__): beschreibt, wie die Antwort gemessen oder bewertet werden kann. Beispiele: Ausfallzeit in Stunden, Korrektheit Ja/ Nein, Änderungszeit in Personentagen, Reaktionszeit in Sekunden.",
      "id": [
        "298081"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298082]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_14.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298082"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_14.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298083]\n[▼ch-80]\n[####Szenarien und Qualitätsmerkmale]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298083"
      ],
      "anchor": "ch-80",
      "title": "Szenarien und Qualitätsmerkmale"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298084]\n\nIch möchte Ihnen nun etwas allgemeiner vorstellen, wie Sie Qualitätsmerkmale mit Hilfe von Szenarien beschreiben. Dazu stelle ich zu ausgewählten Qualitätsmerkmalen mögliche Werte für die einzelnen Teile von Szenarien vor. Das Konzept dieser Darstellung stammt aus [Bass+03].",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Ich möchte Ihnen nun etwas allgemeiner vorstellen, wie Sie Qualitätsmerkmale mit Hilfe von Szenarien beschreiben. Dazu stelle ich zu ausgewählten Qualitätsmerkmalen mögliche Werte für die einzelnen Teile von Szenarien vor. Das Konzept dieser Darstellung stammt aus [Bass+03].",
      "id": [
        "298084"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298085]\n\nBitte beachten Sie, dass es sich bei dieser Darstellung um allgemeine exemplarische Darstellungen handelt, die Sie für die Qualitätsanforderungen Ihrer Projekte spezifisch anpassen müssen. Einige Beispiele spezifischer Szenarien finden Sie im vorangehenden Abschnitt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bitte beachten Sie, dass es sich bei dieser Darstellung um allgemeine exemplarische Darstellungen handelt, die Sie für die Qualitätsanforderungen Ihrer Projekte spezifisch anpassen müssen. Einige Beispiele spezifischer Szenarien finden Sie im vorangehenden Abschnitt.",
      "id": [
        "298085"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298086]\n\nIn Abschnitt 3.7 finden Sie einige Vorschläge, wie Sie Qualitätsanforderungen erfüllen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In Abschnitt 3.7 finden Sie einige Vorschläge, wie Sie Qualitätsanforderungen erfüllen.",
      "id": [
        "298086"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298087]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_15.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298087"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_15.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298088]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_16.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298088"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_16.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298089]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_17.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298089"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_17.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298090]\n\nHierzu gehören die üblicherweise als Mengengerüste bezeichneten Informatio\u0002nen: Wie viele Benutzer bearbeiten wann wie viele Daten in welcher Zeit? Wel\u0002che Reaktionszeiten oder Durchsätze soll das System erbringen, welche Prozes\u0002sor- oder Datenbanklast darf dabei entstehen?",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Hierzu gehören die üblicherweise als Mengengerüste bezeichneten Informatio\u0002nen: Wie viele Benutzer bearbeiten wann wie viele Daten in welcher Zeit? Wel\u0002che Reaktionszeiten oder Durchsätze soll das System erbringen, welche Prozes\u0002sor- oder Datenbanklast darf dabei entstehen?",
      "id": [
        "298090"
      ]
    },
    "errors": [
      {
        "message": "token recognition error at: '\u0002'",
        "line": 4,
        "column": 74,
        "errorLine": "Hierzu gehören die üblicherweise als Mengengerüste bezeichneten Informatio\u0002nen: Wie viele Benutzer bearbeiten wann wie viele Daten in welcher Zeit? Wel\u0002che Reaktionszeiten oder Durchsätze soll das System erbringen, welche Prozes\u0002sor- oder Datenbanklast darf dabei entstehen?"
      },
      {
        "message": "token recognition error at: '\u0002'",
        "line": 4,
        "column": 151,
        "errorLine": "Hierzu gehören die üblicherweise als Mengengerüste bezeichneten Informatio\u0002nen: Wie viele Benutzer bearbeiten wann wie viele Daten in welcher Zeit? Wel\u0002che Reaktionszeiten oder Durchsätze soll das System erbringen, welche Prozes\u0002sor- oder Datenbanklast darf dabei entstehen?"
      },
      {
        "message": "token recognition error at: '\u0002'",
        "line": 4,
        "column": 228,
        "errorLine": "Hierzu gehören die üblicherweise als Mengengerüste bezeichneten Informatio\u0002nen: Wie viele Benutzer bearbeiten wann wie viele Daten in welcher Zeit? Wel\u0002che Reaktionszeiten oder Durchsätze soll das System erbringen, welche Prozes\u0002sor- oder Datenbanklast darf dabei entstehen?"
      }
    ]
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298091]\n\nMengen- und Zeitangaben solcher Art bilden eine gute Grundlage für Effizienz\u0002oder Performanceszenarien.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Mengen- und Zeitangaben solcher Art bilden eine gute Grundlage für Effizienz\u0002oder Performanceszenarien.",
      "id": [
        "298091"
      ]
    },
    "errors": [
      {
        "message": "token recognition error at: '\u0002'",
        "line": 4,
        "column": 76,
        "errorLine": "Mengen- und Zeitangaben solcher Art bilden eine gute Grundlage für Effizienz\u0002oder Performanceszenarien."
      }
    ]
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298092]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_18.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298092"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_18.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298093]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_19.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298093"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_19.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298094]\n\nIn den Szenarien bezüglich Benutzbarkeit und Verständlichkeit weiche ich von der DIN/ISO 9126 ab, weil insbesondere die Verständlichkeit der SoftwareArchitektur für mich zu den wichtigen Architekturzielen und damit nichtfunktionalen Anforderungen gehört.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In den Szenarien bezüglich Benutzbarkeit und Verständlichkeit weiche ich von der DIN/ISO 9126 ab, weil insbesondere die Verständlichkeit der SoftwareArchitektur für mich zu den wichtigen Architekturzielen und damit nichtfunktionalen Anforderungen gehört.",
      "id": [
        "298094"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298095]\n\nEine leicht verständliche Architektur ohne (unliebsame) Überraschungen gehört zu den wesentlichen Voraussetzungen für Wartbarkeit und Änderbarkeit.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Eine leicht verständliche Architektur ohne (unliebsame) Überraschungen gehört zu den wesentlichen Voraussetzungen für Wartbarkeit und Änderbarkeit.",
      "id": [
        "298095"
      ]
    }
  },
  {
    "bitmark": "[.info:bitmark--]\n[@id:298096]\n\nVerständlichkeit von Architekturen entzieht sich der sinnvollen Quantifizierbarkeit. Ich habe positive Erfahrung mit der Vergabe von Schulnoten gemacht: Lassen Sie die Leser und Reviewer von Architekturen die Verständlichkeit der Architektur und ihrer Dokumentation (kapitel-/dokumentenweise) bewerten. Zwar ist diese Metrik subjektiv, sie gibt Ihnen aber wertvolle Hinweise, wo und bei wem Sie die Verständlichkeit erreicht haben und wo nicht.",
    "bit": {
      "type": "info",
      "format": "bitmark--",
      "body": "Verständlichkeit von Architekturen entzieht sich der sinnvollen Quantifizierbarkeit. Ich habe positive Erfahrung mit der Vergabe von Schulnoten gemacht: Lassen Sie die Leser und Reviewer von Architekturen die Verständlichkeit der Architektur und ihrer Dokumentation (kapitel-/dokumentenweise) bewerten. Zwar ist diese Metrik subjektiv, sie gibt Ihnen aber wertvolle Hinweise, wo und bei wem Sie die Verständlichkeit erreicht haben und wo nicht.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298096"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298097]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_20.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298097"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_20.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298098]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_21.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298098"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_21.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298099]\n\nHier kann ich bei weitem nicht alle Aspekte von Sicherheit in der IT abdecken. In [Möricke04] finden Sie weiterführende Hinweise.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Hier kann ich bei weitem nicht alle Aspekte von Sicherheit in der IT abdecken. In [Möricke04] finden Sie weiterführende Hinweise.",
      "id": [
        "298099"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298100]\n[▼ch-81]\n[####Szenarien unterstützen bei Architekturbewertung]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298100"
      ],
      "anchor": "ch-81",
      "title": "Szenarien unterstützen bei Architekturbewertung"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298101]\n\n[%Bewertung: Kapitel 10]\nSie können Szenarien auch nutzen, um Ihre Architekturen hinsichtlich spezifischer Qualitätsmerkmale zu bewerten. Eine kurze Einführung in die Architekturbewertung finden Sie in Kapitel 10.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie können Szenarien auch nutzen, um Ihre Architekturen hinsichtlich spezifischer Qualitätsmerkmale zu bewerten. Eine kurze Einführung in die Architekturbewertung finden Sie in Kapitel 10.",
      "id": [
        "298101"
      ],
      "item": "Bewertung: Kapitel 10"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298102]\n\nIm folgenden Abschnitt 3.7 möchte ich Ihnen einige Maßnahmen vorstellen, mit denen Sie bestimmte Qualitätsmerkmale erreichen können.21 Sie dienen in Ihren Projekten als Ausgangspunkte oder Diskussionsgrundlagen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Im folgenden Abschnitt 3.7 möchte ich Ihnen einige Maßnahmen vorstellen, mit denen Sie bestimmte Qualitätsmerkmale erreichen können.21 Sie dienen in Ihren Projekten als Ausgangspunkte oder Diskussionsgrundlagen.",
      "id": [
        "298102"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298103]\n[▼ch-82]\n[%3.7]\n[##Lösungsstrategien entwickeln]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.7",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "298103"
      ],
      "anchor": "ch-82",
      "title": "Lösungsstrategien entwickeln"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298104]\n\nNach der Klärung von Anforderungen, Einflussfaktoren und Risiken, insbesondere der geforderten Qualitätsmerkmale und Projektrisiken, kennen Sie also die Schwierigkeiten, die beim Entwurf des Systems auf Sie zukommen. Nun gilt es, passende Lösungsstrategien und -alternativen zu entwickeln.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nach der Klärung von Anforderungen, Einflussfaktoren und Risiken, insbesondere der geforderten Qualitätsmerkmale und Projektrisiken, kennen Sie also die Schwierigkeiten, die beim Entwurf des Systems auf Sie zukommen. Nun gilt es, passende Lösungsstrategien und -alternativen zu entwickeln.",
      "id": [
        "298104"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298105]\n\nDiese Strategien entwickeln Sie parallel zum Entwurf von Sichten und Aspekten (zu denen Sie in Kapitel 4, 5 und 7 noch viel mehr lesen).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Diese Strategien entwickeln Sie parallel zum Entwurf von Sichten und Aspekten (zu denen Sie in Kapitel 4, 5 und 7 noch viel mehr lesen).",
      "id": [
        "298105"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298106]\n\nWie bereits bei der Identifikation der Projektrisiken gilt: Es gibt keinen allgemeingültigen Weg zu Lösungsstrategien.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wie bereits bei der Identifikation der Projektrisiken gilt: Es gibt keinen allgemeingültigen Weg zu Lösungsstrategien.",
      "id": [
        "298106"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298107]\n\nIch möchte Ihnen in diesem Abschnitt Ratschläge und Anregungen zu einigen häufig vorkommenden Problembereichen von Software-Systemen geben: \n\n• Organisatorische Probleme: Mangel an Zeit, Budget oder Erfahrung \n• Performance \n• Flexibilität und Erweiterbarkeit \n\nSollten einige Ihrer spezifischen Probleme in eher technischen Bereichen angesiedelt sein, kann Ihnen sicherlich der Katalog typischer Architekturaspekte (Ka pitel 7) weiterhelfen. Dort finden Sie Tipps und Hinweise zu einer Vielzahl von Aspekten des praxisorientierten Software-Entwurfs.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "Ich möchte Ihnen in diesem Abschnitt Ratschläge und Anregungen zu einigen häufig vorkommenden Problembereichen von Software-Systemen geben: \n\n• Organisatorische Probleme: Mangel an Zeit, Budget oder Erfahrung \n• Performance \n• Flexibilität und Erweiterbarkeit \n\nSollten einige Ihrer spezifischen Probleme in eher technischen Bereichen angesiedelt sein, kann Ihnen sicherlich der Katalog typischer Architekturaspekte (Ka pitel 7) weiterhelfen. Dort finden Sie Tipps und Hinweise zu einer Vielzahl von Aspekten des praxisorientierten Software-Entwurfs.",
      "id": [
        "298107"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298108]\n[▼ch-83]\n[%3.7.1]\n[###Strategien gegen organisatorische Risiken]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.7.1",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "298108"
      ],
      "anchor": "ch-83",
      "title": "Strategien gegen organisatorische Risiken"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298109]\n\nMeiner Erfahrung nach leiden die meisten Software-Projekte unter mindestens einem der folgenden (organisatorischen) Risiken:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Meiner Erfahrung nach leiden die meisten Software-Projekte unter mindestens einem der folgenden (organisatorischen) Risiken:",
      "id": [
        "298109"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298110]\n\n• __Zu wenig Zeit__: Die Zeit bis zum Endtermin ist zu knapp bemessen, um die Anforderungen mit dem zugehörigen Projektteam zu erfüllen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• __Zu wenig Zeit__: Die Zeit bis zum Endtermin ist zu knapp bemessen, um die Anforderungen mit dem zugehörigen Projektteam zu erfüllen.",
      "id": [
        "298110"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298111]\n\n[%Zu wenig Zeit, Knappes Budget]\n• __Zu wenig Budget__: Es mangelt dem Projekt an Geld. Aus Projektsicht notwendige Investitionen in Hardware, Software oder Wissen (in Form von Schulungen oder weiteren Mitarbeitern) unterbleiben.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• __Zu wenig Budget__: Es mangelt dem Projekt an Geld. Aus Projektsicht notwendige Investitionen in Hardware, Software oder Wissen (in Form von Schulungen oder weiteren Mitarbeitern) unterbleiben.",
      "id": [
        "298111"
      ],
      "item": "Zu wenig Zeit, Knappes Budget"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298112]\n\n[%Knappe Ressourcen]\n• __Zu wenig Wissen und Erfahrung__: Es mangelt dem Projektteam an Wissen und Erfahrung in einigen Bereichen der Entwicklung. Beispielsweise wird ein neues, dem Team unbekanntes Entwicklungswerkzeug eingesetzt.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• __Zu wenig Wissen und Erfahrung__: Es mangelt dem Projektteam an Wissen und Erfahrung in einigen Bereichen der Entwicklung. Beispielsweise wird ein neues, dem Team unbekanntes Entwicklungswerkzeug eingesetzt.",
      "id": [
        "298112"
      ],
      "item": "Knappe Ressourcen"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298113]\n\nIn seinem Buch „Death March“ ([Yourdon99]) gibt Edward Yourdon einige Ratschläge, wie Sie in schwierigen Projekten Ihr eigenes fachliches Überleben sichern. Falls die Situation Ihrer Ansicht nach völlig aussichtslos erscheint, sollten Sie dort nach Rettungsvorschlägen suchen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In seinem Buch „Death March“ ([Yourdon99]) gibt Edward Yourdon einige Ratschläge, wie Sie in schwierigen Projekten Ihr eigenes fachliches Überleben sichern. Falls die Situation Ihrer Ansicht nach völlig aussichtslos erscheint, sollten Sie dort nach Rettungsvorschlägen suchen.",
      "id": [
        "298113"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298114]\n\nFür die in der Praxis häufig vorkommenden „normal kritischen“ Situationen gebe ich Ihnen bezüglich der Software-Architektur folgende Ratschläge:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Für die in der Praxis häufig vorkommenden „normal kritischen“ Situationen gebe ich Ihnen bezüglich der Software-Architektur folgende Ratschläge:",
      "id": [
        "298114"
      ]
    }
  },
  {
    "bitmark": "[.note:bitmark++]\n[@id:298115]\n\n[%Kooperation mit Projektleitung und Risikomanagement]\n• Arbeiten Sie bei organisatorischen Problemen eng mit der Projektleitung oder dem Projektmanagement zusammen. \n• Sie als Software-Architekt können wertvolle Hinweise zum Risikomanagement des Projektes liefern. Auf diese Weise können manche der Einflussfaktoren verhandelt werden (was Ihnen wiederum mehr Spielraum beim Entwurf der Architektur lässt). \n• Sie können gemeinsam mit der Projektleitung alternative Modelle der Auslieferung oder Fertigstellung erarbeiten. Beispiel: Am vereinbarten Endtermin wird lediglich ein Teil der gewünschten Funktionalität geliefert. \n• Sie können gemeinsam mit der Projektleitung die Auswirkung kritischer Anforderungen mit dem Auftraggeber diskutieren (und hier ebenfalls eine Entspannung der Situation erreichen). \n• Falls sich die organisatorischen Probleme direkt auf technische Aspekte des Systems oder einzelne Bestandteile auswirken: Nutzen Sie diese Sachverhalte für Verhandlungen mit Projektleitung, Auftraggebern und Kunden. \n• Prüfen Sie mit dem Auftraggeber, ob eine Revision der __Make-or-buy__-Entscheidung die Situation entschärfen kann. Gegebenenfalls kann auch der Zukauf einzelner Komponenten oder Systembestandteile helfen. \n• Überarbeiten Sie mit dem Auftraggeber die Anforderungen an das System. Verhandeln Sie über andere Prioritäten der Anforderungen, um die Einschränkungen durch einige Einflussfaktoren zu lockern. Besonders kritisch und aufwändig sind (oftmals überzogene) Anforderungen an Verfügbarkeit und Performance.",
    "bit": {
      "type": "note",
      "format": "bitmark++",
      "body": "• Arbeiten Sie bei organisatorischen Problemen eng mit der Projektleitung oder dem Projektmanagement zusammen. \n• Sie als Software-Architekt können wertvolle Hinweise zum Risikomanagement des Projektes liefern. Auf diese Weise können manche der Einflussfaktoren verhandelt werden (was Ihnen wiederum mehr Spielraum beim Entwurf der Architektur lässt). \n• Sie können gemeinsam mit der Projektleitung alternative Modelle der Auslieferung oder Fertigstellung erarbeiten. Beispiel: Am vereinbarten Endtermin wird lediglich ein Teil der gewünschten Funktionalität geliefert. \n• Sie können gemeinsam mit der Projektleitung die Auswirkung kritischer Anforderungen mit dem Auftraggeber diskutieren (und hier ebenfalls eine Entspannung der Situation erreichen). \n• Falls sich die organisatorischen Probleme direkt auf technische Aspekte des Systems oder einzelne Bestandteile auswirken: Nutzen Sie diese Sachverhalte für Verhandlungen mit Projektleitung, Auftraggebern und Kunden. \n• Prüfen Sie mit dem Auftraggeber, ob eine Revision der __Make-or-buy__-Entscheidung die Situation entschärfen kann. Gegebenenfalls kann auch der Zukauf einzelner Komponenten oder Systembestandteile helfen. \n• Überarbeiten Sie mit dem Auftraggeber die Anforderungen an das System. Verhandeln Sie über andere Prioritäten der Anforderungen, um die Einschränkungen durch einige Einflussfaktoren zu lockern. Besonders kritisch und aufwändig sind (oftmals überzogene) Anforderungen an Verfügbarkeit und Performance.",
      "item": "Kooperation mit Projektleitung und Risikomanagement",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298115"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298116]\n\nBedenken Sie bei organisatorischen Problemen einige wichtige Erfahrungen von Software-Projekten:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Bedenken Sie bei organisatorischen Problemen einige wichtige Erfahrungen von Software-Projekten:",
      "id": [
        "298116"
      ]
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:298117]\n\n• Niemand arbeitet unter hohem Druck besonders produktiv. Und keiner denkt unter Druck schneller. Im Gegenteil: Hoher Druck erhöht die Fehlerquote und die Bereitschaft zu „schmutzigen Tricks“. \n• Einem verspäteten Projekt mehr Mitarbeiter zu geben, macht das Projekt noch später ([Brooks95]). \n• Zusätzliche Probleme tauchen von allein auf. Bauen Sie daher in alle Schätzungen Sicherheitszuschläge ein. Unterschätzen Sie sich lieber, als sich zu überschätzen. \n• Wenn die Politik nicht mitspielt, wird das System niemals laufen.",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "• Niemand arbeitet unter hohem Druck besonders produktiv. Und keiner denkt unter Druck schneller. Im Gegenteil: Hoher Druck erhöht die Fehlerquote und die Bereitschaft zu „schmutzigen Tricks“. \n• Einem verspäteten Projekt mehr Mitarbeiter zu geben, macht das Projekt noch später ([Brooks95]). \n• Zusätzliche Probleme tauchen von allein auf. Bauen Sie daher in alle Schätzungen Sicherheitszuschläge ein. Unterschätzen Sie sich lieber, als sich zu überschätzen. \n• Wenn die Politik nicht mitspielt, wird das System niemals laufen.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298117"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298118]\n[▼ch-84]\n[%3.7.2]\n[###Strategien für hohe Performance]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.7.2",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "298118"
      ],
      "anchor": "ch-84",
      "title": "Strategien für hohe Performance"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298119]\n\nIn meinen Projekten habe ich gelernt, dass praktisch jeder Auftraggeber eine hohe Performance22 fordert. In vielen Fällen wird diese Forderung sehr allgemein formuliert („kurze Antwortzeiten“)",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In meinen Projekten habe ich gelernt, dass praktisch jeder Auftraggeber eine hohe Performance22 fordert. In vielen Fällen wird diese Forderung sehr allgemein formuliert („kurze Antwortzeiten“)",
      "id": [
        "298119"
      ]
    }
  },
  {
    "bitmark": "[.example:bitmark--]\n[@id:298120]\n\n__Beispiel__: Für eine Call-Center-Software forderte der Auftraggeber eine maximale Antwortzeit von einer Sekunde für sämtliche Operationen. Diese Anforderung wurde sehr hoch priorisiert und als formales Abnahmekriterium festgeschrieben. Gleichzeitig schrieb der Auftraggeber vor, sämtliche Daten des Systems mittels bereits vorhandener Mainframe-Systeme zu bearbeiten. \nSekundäre oder redundante Datenspeicher zur Performancesteigerung waren nicht erlaubt. \nDurch einen funktionalen Prototypen konnte der Architekt nachweisen, dass viele der Zugriffe auf diese Mainframe-Systeme bereits deutlich mehr als eine Sekunde benötigten. \nDie Anforderung bezüglich der Antwortzeiten wurde daraufhin neu verhandelt. \nDer Auftraggeber verringerte die Priorität und formulierte sie wie folgt um: „Die Antwortzeiten des Systems dürfen maximal eine Sekunde plus die kumulierten Antwortzeiten der beteiligten Mainframe-Systeme betragen.“",
    "bit": {
      "type": "example",
      "format": "bitmark--",
      "body": "__Beispiel__: Für eine Call-Center-Software forderte der Auftraggeber eine maximale Antwortzeit von einer Sekunde für sämtliche Operationen. Diese Anforderung wurde sehr hoch priorisiert und als formales Abnahmekriterium festgeschrieben. Gleichzeitig schrieb der Auftraggeber vor, sämtliche Daten des Systems mittels bereits vorhandener Mainframe-Systeme zu bearbeiten. \nSekundäre oder redundante Datenspeicher zur Performancesteigerung waren nicht erlaubt. \nDurch einen funktionalen Prototypen konnte der Architekt nachweisen, dass viele der Zugriffe auf diese Mainframe-Systeme bereits deutlich mehr als eine Sekunde benötigten. \nDie Anforderung bezüglich der Antwortzeiten wurde daraufhin neu verhandelt. \nDer Auftraggeber verringerte die Priorität und formulierte sie wie folgt um: „Die Antwortzeiten des Systems dürfen maximal eine Sekunde plus die kumulierten Antwortzeiten der beteiligten Mainframe-Systeme betragen.“",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298120"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298121]\n\nEinige grundlegende Hinweise zur Bewältigung hoher Performanceanforderungen:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Einige grundlegende Hinweise zur Bewältigung hoher Performanceanforderungen:",
      "id": [
        "298121"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298122]\n\n• Benutzen Sie einen Profiler, und führen Sie Lasttests durch. Lastkurven helfen in vielen Fällen, die Performance-Engpässe zu finden.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Benutzen Sie einen Profiler, und führen Sie Lasttests durch. Lastkurven helfen in vielen Fällen, die Performance-Engpässe zu finden.",
      "id": [
        "298122"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298123]\n\n[%Zusätzliche Hardware]\n• Lösen Sie das Problem durch zusätzliche Hardware. Hardware ist (manchmal) preiswerter als Gehirnschmalz. Zusätzliche Prozessoren, schnellere Netzwerke oder schnellere Datenbankserver können in manchen Fällen für ausreichende Performance sorgen. Einige Probleme bleiben mit diesem Ansatz jedoch erhalten:",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Lösen Sie das Problem durch zusätzliche Hardware. Hardware ist (manchmal) preiswerter als Gehirnschmalz. Zusätzliche Prozessoren, schnellere Netzwerke oder schnellere Datenbankserver können in manchen Fällen für ausreichende Performance sorgen. Einige Probleme bleiben mit diesem Ansatz jedoch erhalten:",
      "id": [
        "298123"
      ],
      "item": "Zusätzliche Hardware"
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298124]\n\n• Er erfordert teilweise erhebliche (Anfangs-) Investitionen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Er erfordert teilweise erhebliche (Anfangs-) Investitionen.",
      "id": [
        "298124"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298125]\n\n• Sie müssen im Vorfeld den „Beweis“ erbringen, dass die zusätzliche Hardware die Performance-Anforderungen erfüllt.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Sie müssen im Vorfeld den „Beweis“ erbringen, dass die zusätzliche Hardware die Performance-Anforderungen erfüllt.",
      "id": [
        "298125"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298126]\n\n• Versuchen Sie, mit Ihren Auftraggebern die gewünschte Performance des Systems neu zu verhandeln.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Versuchen Sie, mit Ihren Auftraggebern die gewünschte Performance des Systems neu zu verhandeln.",
      "id": [
        "298126"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298127]\n\n• Verringern Sie die Kommunikation der Systemkomponenten. Fügen Sie Platzhalter oder Proxy-Klassen ein, um Kommunikation und Datentransfer zu sparen (Details finden Sie in Kapitel 5).",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Verringern Sie die Kommunikation der Systemkomponenten. Fügen Sie Platzhalter oder Proxy-Klassen ein, um Kommunikation und Datentransfer zu sparen (Details finden Sie in Kapitel 5).",
      "id": [
        "298127"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298128]\n\n• Verringern Sie die Flexibilität des Systems. Verzichten Sie auf zusätzliche Abstraktionsschichten.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Verringern Sie die Flexibilität des Systems. Verzichten Sie auf zusätzliche Abstraktionsschichten.",
      "id": [
        "298128"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298129]\n\n• Verzichten Sie auf Verteilung. Verlagern Sie performancekritische Teile der Software zusammen auf einen Rechner oder Knoten, statt sie auf unterschiedliche Knoten zu verteilen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Verzichten Sie auf Verteilung. Verlagern Sie performancekritische Teile der Software zusammen auf einen Rechner oder Knoten, statt sie auf unterschiedliche Knoten zu verteilen.",
      "id": [
        "298129"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298130]\n\n• Führen Sie Redundanzen ein: Sie können Kopien kritischer Daten im Speicher halten, statt sie aus einer Datenbank zu lesen.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Führen Sie Redundanzen ein: Sie können Kopien kritischer Daten im Speicher halten, statt sie aus einer Datenbank zu lesen.",
      "id": [
        "298130"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark++]\n[@id:298131]\n\n• Seien Sie pragmatisch: Wenn Performance wirklich wichtig ist, können Sie den Abstraktionsgrad der Programmiersprache verringern: Setzen Sie betriebssystemnahe Sprachen oder Assembler statt objektorientierter Sprachen ein.",
    "bit": {
      "type": "article",
      "format": "bitmark++",
      "body": "• Seien Sie pragmatisch: Wenn Performance wirklich wichtig ist, können Sie den Abstraktionsgrad der Programmiersprache verringern: Setzen Sie betriebssystemnahe Sprachen oder Assembler statt objektorientierter Sprachen ein.",
      "id": [
        "298131"
      ]
    }
  },
  {
    "bitmark": "[.example:bitmark--]\n[@id:298132]\n\n__Beispiel__: Eine Bank entwickelte ein System für Online-Überweisungen im Internet. Die Zielplattform waren „Personal Digital Assistants“ (PDA) in Verbindung mit Mobiltelefonen. Als Programmiersprache sollte Java eingesetzt werden. Die Sicherheit der Datenübertragung sollte durch den „Secure Socket Layer“ (SSL) erreicht werden. Die Performance war kritisch für die Akzeptanz und wurde daher hoch priorisiert. \nEin erster Prototyp, vollständig in Java implementiert, benötigte für den (komplexen) Anmeldevorgang (mit SSL-Handshake) am zentralen Server mehr als drei Minuten – eine nicht akzeptable Zeit. \nZusätzliche oder andere Hardware war in diesem Fall nicht möglich. Daher wurde die Architektur des Systems vereinfacht: Abstraktionsschichten innerhalb der Java-Anwendung entfielen. Zusätzlich entschloss sich der verantwortliche Software-Architekt, für die SSL-Implementierung Assembler statt Java einzusetzen. Mit Erfolg – die Anmeldung dauert mittlerweile nur noch etwa 4 Sekunden. \nDer Nachteil: Das System hat dadurch massiv an Wartbarkeit und Verständlichkeit verloren. Die erwarteten Vorteile von Java hinsichtlich Portierbarkeit konnten nur eingeschränkt genutzt werden.",
    "bit": {
      "type": "example",
      "format": "bitmark--",
      "body": "__Beispiel__: Eine Bank entwickelte ein System für Online-Überweisungen im Internet. Die Zielplattform waren „Personal Digital Assistants“ (PDA) in Verbindung mit Mobiltelefonen. Als Programmiersprache sollte Java eingesetzt werden. Die Sicherheit der Datenübertragung sollte durch den „Secure Socket Layer“ (SSL) erreicht werden. Die Performance war kritisch für die Akzeptanz und wurde daher hoch priorisiert. \nEin erster Prototyp, vollständig in Java implementiert, benötigte für den (komplexen) Anmeldevorgang (mit SSL-Handshake) am zentralen Server mehr als drei Minuten – eine nicht akzeptable Zeit. \nZusätzliche oder andere Hardware war in diesem Fall nicht möglich. Daher wurde die Architektur des Systems vereinfacht: Abstraktionsschichten innerhalb der Java-Anwendung entfielen. Zusätzlich entschloss sich der verantwortliche Software-Architekt, für die SSL-Implementierung Assembler statt Java einzusetzen. Mit Erfolg – die Anmeldung dauert mittlerweile nur noch etwa 4 Sekunden. \nDer Nachteil: Das System hat dadurch massiv an Wartbarkeit und Verständlichkeit verloren. Die erwarteten Vorteile von Java hinsichtlich Portierbarkeit konnten nur eingeschränkt genutzt werden.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298132"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298133]\n[▼ch-85]\n[%3.7.3]\n[###Strategien für Anpassbarkeit und Flexibilität]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.7.3",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "298133"
      ],
      "anchor": "ch-85",
      "title": "Strategien für Anpassbarkeit und Flexibilität"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298134]\n\nFlexibilität eines Systems umfasst Analysierbarkeit (änderungsbedürftige Teile identifizieren), Modifizierbarkeit (Anpassung) und Stabilität (keine unerwarteten Auswirkungen nach Änderungen). In praktisch allen Fällen kollidiert die Forderung nach hoher Anpassbarkeit und Flexibilität mit den Forderungen nach hoher Performance.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Flexibilität eines Systems umfasst Analysierbarkeit (änderungsbedürftige Teile identifizieren), Modifizierbarkeit (Anpassung) und Stabilität (keine unerwarteten Auswirkungen nach Änderungen). In praktisch allen Fällen kollidiert die Forderung nach hoher Anpassbarkeit und Flexibilität mit den Forderungen nach hoher Performance.",
      "id": [
        "298134"
      ]
    }
  },
  {
    "bitmark": "[.example:bitmark--]\n[@id:298135]\n\n__Beispiel__: In einem unserer Projekte stand aufgrund der hohen erwarteten Lebensdauer des Systems (mehr als 15 Jahre!) die Flexibilität der Anwendung im Vordergrund aller Anforderungen. Sämtliche Details der eingesetzten Hard- und Softwareplattform sollten durch Architekturmittel gekapselt werden, CORBA war „politisch“ verpönt. Direkte Methodenaufrufe zwischen verschiedenen Komponenten wurden vom Auftraggeber untersagt und ausschließlich über das Entwurfsmuster „Command“ erlaubt. Die Software-Architekten konnten diese Anforderungen durch die Einführung mehrerer Abstraktionsschichten erreichen, die jeweils technische Details der darunter liegenden Schichten kapselten. \nGleichzeitig forderte der Auftraggeber allerdings eine sehr hohe Performance und kurze Antwortzeiten. Diese Forderung kollidiert mit der Schichtenbildung, die für die gewünschte Flexibilität notwendig war. \nIn diesem Fall zeigte ein ausführlicher technischer Prototyp die Unvereinbarkeit beider Anforderungen. Nach langen Verhandlungen willigte der Kunde ein, die (aus meiner Sicht übertriebenen) Forderungen hinsichtlich der Flexibilität zu lockern.",
    "bit": {
      "type": "example",
      "format": "bitmark--",
      "body": "__Beispiel__: In einem unserer Projekte stand aufgrund der hohen erwarteten Lebensdauer des Systems (mehr als 15 Jahre!) die Flexibilität der Anwendung im Vordergrund aller Anforderungen. Sämtliche Details der eingesetzten Hard- und Softwareplattform sollten durch Architekturmittel gekapselt werden, CORBA war „politisch“ verpönt. Direkte Methodenaufrufe zwischen verschiedenen Komponenten wurden vom Auftraggeber untersagt und ausschließlich über das Entwurfsmuster „Command“ erlaubt. Die Software-Architekten konnten diese Anforderungen durch die Einführung mehrerer Abstraktionsschichten erreichen, die jeweils technische Details der darunter liegenden Schichten kapselten. \nGleichzeitig forderte der Auftraggeber allerdings eine sehr hohe Performance und kurze Antwortzeiten. Diese Forderung kollidiert mit der Schichtenbildung, die für die gewünschte Flexibilität notwendig war. \nIn diesem Fall zeigte ein ausführlicher technischer Prototyp die Unvereinbarkeit beider Anforderungen. Nach langen Verhandlungen willigte der Kunde ein, die (aus meiner Sicht übertriebenen) Forderungen hinsichtlich der Flexibilität zu lockern.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298135"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298136]\n\nWenn Flexibilität zu den Risiken (oder wichtigen Anforderungen) Ihres Systems gehört, dann können Ihnen folgende Ratschläge helfen:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Wenn Flexibilität zu den Risiken (oder wichtigen Anforderungen) Ihres Systems gehört, dann können Ihnen folgende Ratschläge helfen:",
      "id": [
        "298136"
      ]
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:298137]\n\nFinden Sie gemeinsam mit Auftraggeber und Anwendern des Systems heraus, in welcher Hinsicht das System flexibel sein muss: \n\n• Funktionalität (Hinzufügen neuer oder Modifizieren bestehender Funktionen) \n• Datenstrukturen oder Datenmodell \n• Eingesetzte Fremdsoftware (Datenbanksystem, GUI-Bibliothek, Middleware oder andere)\n• Schnittstellen zu anderen Systemen (neue Schnittstellen, Modifikation bestehender Schnittstellen) \n• Benutzerschnittstelle (veränderte Gestaltung oder Inhalte) \n• Zielplattform (Portabilität auf andere Betriebssysteme, Datenbanken oder Kommunikationssysteme)",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "Finden Sie gemeinsam mit Auftraggeber und Anwendern des Systems heraus, in welcher Hinsicht das System flexibel sein muss: \n\n• Funktionalität (Hinzufügen neuer oder Modifizieren bestehender Funktionen) \n• Datenstrukturen oder Datenmodell \n• Eingesetzte Fremdsoftware (Datenbanksystem, GUI-Bibliothek, Middleware oder andere)\n• Schnittstellen zu anderen Systemen (neue Schnittstellen, Modifikation bestehender Schnittstellen) \n• Benutzerschnittstelle (veränderte Gestaltung oder Inhalte) \n• Zielplattform (Portabilität auf andere Betriebssysteme, Datenbanken oder Kommunikationssysteme)",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298137"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298138]\n\nDiese Informationen können den Bereich der notwendigen Flexibilität einschränken und Ihnen beim Entwurf des Systems mehr Freiheiten verschaffen. Sie können auf Basis dieser Informationen „Was-wäre-wenn“-Szenarien entwickeln, um verschiedene Architekturalternativen auf ihre Eignung zu prüfen. Mehr zum Thema „Bewertung von Architekturen“ finden Sie in Kapitel 9 sowie in [Clements+02], [Bosch2000], [Bass+03] und [Parnas72].",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Diese Informationen können den Bereich der notwendigen Flexibilität einschränken und Ihnen beim Entwurf des Systems mehr Freiheiten verschaffen. Sie können auf Basis dieser Informationen „Was-wäre-wenn“-Szenarien entwickeln, um verschiedene Architekturalternativen auf ihre Eignung zu prüfen. Mehr zum Thema „Bewertung von Architekturen“ finden Sie in Kapitel 9 sowie in [Clements+02], [Bosch2000], [Bass+03] und [Parnas72].",
      "id": [
        "298138"
      ]
    }
  },
  {
    "bitmark": "[.note:bitmark++]\n[@id:298139]\n\n• Betreiben Sie möglichst ausgiebig „Information Hiding“: \n- Verbergen Sie die internen Details einer Komponente vor anderen Komponenten. \n- Führen Sie interne Abstraktionsschichten ein. \n- Verringern Sie Abhängigkeiten zwischen Komponenten. Dabei kann Ihnen Kapitel 5 über Entwurfsprinzipien helfen.\n\n• Halten Sie die Änderungen möglichst lokal: Die notwendigen oder erwarteten Änderungen sollten auf möglichst wenige Bausteine des Gesamtsystems beschränkt bleiben.\n\n• Entkoppeln Sie Systembestandteile weitmöglichst voneinander: \n- Lassen Sie Bausteine immer über Schnittstellen miteinander kommunizieren – verwenden Sie möglichst niemals Implementierungsdetails der benutzten Bausteine (das gewährleistet die Austauschbarkeit von Bausteinen). \n- Verwenden Sie Adapter, Fassaden oder Proxies (siehe Kapitel 5 und [GoF]), um Bausteine voneinander zu entkoppeln.\n\n• Sorgen Sie für verständlichen Quellcode – der unterstützt auch den Umbau im Großen. In Robert Martins empfehlenswertem Buch __Clean Code__ ( [Martin08]) finden Sie mehr dazu.",
    "bit": {
      "type": "note",
      "format": "bitmark++",
      "body": "• Betreiben Sie möglichst ausgiebig „Information Hiding“: \n- Verbergen Sie die internen Details einer Komponente vor anderen Komponenten. \n- Führen Sie interne Abstraktionsschichten ein. \n- Verringern Sie Abhängigkeiten zwischen Komponenten. Dabei kann Ihnen Kapitel 5 über Entwurfsprinzipien helfen.\n\n• Halten Sie die Änderungen möglichst lokal: Die notwendigen oder erwarteten Änderungen sollten auf möglichst wenige Bausteine des Gesamtsystems beschränkt bleiben.\n\n• Entkoppeln Sie Systembestandteile weitmöglichst voneinander: \n- Lassen Sie Bausteine immer über Schnittstellen miteinander kommunizieren – verwenden Sie möglichst niemals Implementierungsdetails der benutzten Bausteine (das gewährleistet die Austauschbarkeit von Bausteinen). \n- Verwenden Sie Adapter, Fassaden oder Proxies (siehe Kapitel 5 und [GoF]), um Bausteine voneinander zu entkoppeln.\n\n• Sorgen Sie für verständlichen Quellcode – der unterstützt auch den Umbau im Großen. In Robert Martins empfehlenswertem Buch __Clean Code__ ( [Martin08]) finden Sie mehr dazu.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298139"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298140]\n\nFalls Sie auch Flexibilität zur Laufzeit Ihrer Systeme benötigen, können Ihnen die folgenden Vorschläge helfen. Ihr Tenor lautet: Entscheiden Sie möglichst spät.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Falls Sie auch Flexibilität zur Laufzeit Ihrer Systeme benötigen, können Ihnen die folgenden Vorschläge helfen. Ihr Tenor lautet: Entscheiden Sie möglichst spät.",
      "id": [
        "298140"
      ]
    }
  },
  {
    "bitmark": "[.note:bitmark--]\n[@id:298141]\n\n• Verwenden Sie Konfigurationsdateien, um Installations- oder Laufzeitparameter möglichst lange flexibel zu halten.\n• Für objektorientierte Systeme: \n\nVerwenden Sie Polymorphismus23, um die Identifikation konkreter Typen erst zur Laufzeit vornehmen zu lassen (leider funktioniert das nur mit objektorientierten Programmiersprachen).",
    "bit": {
      "type": "note",
      "format": "bitmark--",
      "body": "• Verwenden Sie Konfigurationsdateien, um Installations- oder Laufzeitparameter möglichst lange flexibel zu halten.\n• Für objektorientierte Systeme: \n\nVerwenden Sie Polymorphismus23, um die Identifikation konkreter Typen erst zur Laufzeit vornehmen zu lassen (leider funktioniert das nur mit objektorientierten Programmiersprachen).",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298141"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298142]\n[▼ch-86]\n[%3.7.4]\n[###Strategien für hohe Verfügbarkeit]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.7.4",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 3,
      "progress": true,
      "toc": true,
      "id": [
        "298142"
      ],
      "anchor": "ch-86",
      "title": "Strategien für hohe Verfügbarkeit"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298143]\n\nSie können die Verfügbarkeit Ihrer Systeme durch folgende grundsätzliche Maßnahmen verbessern: Fehlererkennung (__fault detection__), Fehlerbehebung (__fault recovery__) und Fehlerverhütung (__fault prevention__). Zu allen Dreien gebe ich Ihnen einige (kurze) Ratschläge, die Sie für Ihre konkreten Anforderungen spezialisieren müssen:",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Sie können die Verfügbarkeit Ihrer Systeme durch folgende grundsätzliche Maßnahmen verbessern: Fehlererkennung (__fault detection__), Fehlerbehebung (__fault recovery__) und Fehlerverhütung (__fault prevention__). Zu allen Dreien gebe ich Ihnen einige (kurze) Ratschläge, die Sie für Ihre konkreten Anforderungen spezialisieren müssen:",
      "id": [
        "298143"
      ]
    }
  },
  {
    "bitmark": "[.info:bitmark++]\n[@id:298144]\n\n• Zur Fehlererkennung: \nPrüfen Sie frühzeitig auf Situationen, die zu Ausfällen oder Beeinträchtigungen führen können. Spendieren Sie beispielsweise Ihren Systemen eine robuste Ausnahmebehandlung, und/oder realisieren Sie Mechanismen, die periodisch (über __ping__- oder __echo__-Mechanismen) oder kontinuierlich (__heartbeat__) die Verfügbarkeit Ihrer Systeme prüfen. \n\n• Zur Fehlerbehebung: \n- Lassen Sie mehrere redundante Bausteine über die Richtigkeit von Ergebnissen abstimmen (__voting__). Dies ist ein beliebtes, aber aufwändiges Mittel aus der Hochsicherheitstechnik. \n- Halten Sie Systembestandteile mehrfach redundant verfügbar (__hot __spare), und ersetzen Sie im Fehlerfall den defekten Systembestandteil durch ein solches Ersatzteil. Das gilt für Hardware wie auch für Software. Beispiel hierfür ist die Auslegung großer Rechenzentren, in denen die komplette Hard- und Software mehrfach und voneinander \nräumlich getrennt vorgehalten wird.24\n\n• Zur Fehlerverhütung: \n- Verwenden Sie Transaktionen, indem Sie logisch zusammengehörige Operationen klammern. Falls innerhalb einer solchen Transaktion ein Fehler auftritt, setzen Sie das System durch ein Rollback auf den Zustand vor der Transaktion zurück. \n- Speichern Sie periodisch den gesamten Systemzustand in so genannten __Checkpoints__. Im Fehlerfall können Sie auf den letzten Checkpoint zurücksetzen.",
    "bit": {
      "type": "info",
      "format": "bitmark++",
      "body": "• Zur Fehlererkennung: \nPrüfen Sie frühzeitig auf Situationen, die zu Ausfällen oder Beeinträchtigungen führen können. Spendieren Sie beispielsweise Ihren Systemen eine robuste Ausnahmebehandlung, und/oder realisieren Sie Mechanismen, die periodisch (über __ping__- oder __echo__-Mechanismen) oder kontinuierlich (__heartbeat__) die Verfügbarkeit Ihrer Systeme prüfen. \n\n• Zur Fehlerbehebung: \n- Lassen Sie mehrere redundante Bausteine über die Richtigkeit von Ergebnissen abstimmen (__voting__). Dies ist ein beliebtes, aber aufwändiges Mittel aus der Hochsicherheitstechnik. \n- Halten Sie Systembestandteile mehrfach redundant verfügbar (__hot __spare), und ersetzen Sie im Fehlerfall den defekten Systembestandteil durch ein solches Ersatzteil. Das gilt für Hardware wie auch für Software. Beispiel hierfür ist die Auslegung großer Rechenzentren, in denen die komplette Hard- und Software mehrfach und voneinander \nräumlich getrennt vorgehalten wird.24\n\n• Zur Fehlerverhütung: \n- Verwenden Sie Transaktionen, indem Sie logisch zusammengehörige Operationen klammern. Falls innerhalb einer solchen Transaktion ein Fehler auftritt, setzen Sie das System durch ein Rollback auf den Zustand vor der Transaktion zurück. \n- Speichern Sie periodisch den gesamten Systemzustand in so genannten __Checkpoints__. Im Fehlerfall können Sie auf den letzten Checkpoint zurücksetzen.",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "id": [
        "298144"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298145]\n[▼ch-87]\n[####Weiter mit Sichten und Dokumentation!]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298145"
      ],
      "anchor": "ch-87",
      "title": "Weiter mit Sichten und Dokumentation!"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298146]\n\nSchon mal als Vorwarnung: Im nächsten Kapitel stelle ich Ihnen die wichtigsten Sichten auf Software-Architekturen vor. Die müssen Sie kennen, bevor Sie mit dem Entwurf von Strukturen loslegen – dessen Prinzipien Sie in Kapitel 4 finden.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Schon mal als Vorwarnung: Im nächsten Kapitel stelle ich Ihnen die wichtigsten Sichten auf Software-Architekturen vor. Die müssen Sie kennen, bevor Sie mit dem Entwurf von Strukturen loslegen – dessen Prinzipien Sie in Kapitel 4 finden.",
      "id": [
        "298146"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298147]\n[▼ch-88]\n[####Das alles sollte die Systemanalyse geliefert haben]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 4,
      "progress": true,
      "toc": true,
      "id": [
        "298147"
      ],
      "anchor": "ch-88",
      "title": "Das alles sollte die Systemanalyse geliefert haben"
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298148]\n\nIn einer idealen Situation hat die Systemanalyse oder das Requirements Engineering bereits alle hier aufgeführten Informationen passend aufbereitet. Gute Systemanalytiker entwickeln ein fachliches Modell, stellen Anforderungen, Einflussfaktoren und Randbedingungen systematisch dar und beschreiben die geforderten Qualitäten des Systems in Form von Szenarien.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "In einer idealen Situation hat die Systemanalyse oder das Requirements Engineering bereits alle hier aufgeführten Informationen passend aufbereitet. Gute Systemanalytiker entwickeln ein fachliches Modell, stellen Anforderungen, Einflussfaktoren und Randbedingungen systematisch dar und beschreiben die geforderten Qualitäten des Systems in Form von Szenarien.",
      "id": [
        "298148"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298149]\n\nNach meiner Erfahrung betreiben jedoch nur wenige Projekte eine so ausführliche und methodische Systemanalyse. In den übrigen Projekten müssen die Software- und Systemarchitekten Teile dieser Analyse nachholen, insbesondere die hier dargestellten Einflussfaktoren, Randbedingungen, Risiken und Qualitätsmerkmale ermitteln und beschreiben.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Nach meiner Erfahrung betreiben jedoch nur wenige Projekte eine so ausführliche und methodische Systemanalyse. In den übrigen Projekten müssen die Software- und Systemarchitekten Teile dieser Analyse nachholen, insbesondere die hier dargestellten Einflussfaktoren, Randbedingungen, Risiken und Qualitätsmerkmale ermitteln und beschreiben.",
      "id": [
        "298149"
      ]
    }
  },
  {
    "bitmark": "[.chapter]\n[@id:298150]\n[▼ch-89]\n[%3.8]\n[##Weiterführende Literatur]",
    "bit": {
      "type": "chapter",
      "format": "bitmark--",
      "body": "",
      "item": "3.8",
      "hint": "",
      "isExample": false,
      "example": "",
      "level": 2,
      "progress": true,
      "toc": true,
      "id": [
        "298150"
      ],
      "anchor": "ch-89",
      "title": "Weiterführende Literatur"
    }
  },
  {
    "bitmark": "[.article:bitmark--&image]\n[@id:298151]\n\n[&image:https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_1.png]",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "",
      "id": [
        "298151"
      ],
      "resource": {
        "type": "image",
        "image": {
          "src": "https://docs.bitmark.cloud/bit-books/axa/effektive_software-architekturen/web-resources/images/k3/axa_effektive_software_architekturen_k3_1.png",
          "showInIndex": false,
          "format": "png",
          "width": null,
          "height": null,
          "alt": "",
          "caption": "",
          "license": "",
          "copyright": ""
        }
      }
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298152]\n\nDie hier vorgestellten Ansätze, Einflussfaktoren zu gruppieren, zu priorisieren und mit spezifischen Strategien zu adressieren, werden in einigen anderen Disziplinen seit langem erfolgreich angewandt, etwa im Risikomanagement von Projekten (siehe auch [Dorofee96]) oder dem __System Engineering__ (siehe [Rechtin2000]).",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "Die hier vorgestellten Ansätze, Einflussfaktoren zu gruppieren, zu priorisieren und mit spezifischen Strategien zu adressieren, werden in einigen anderen Disziplinen seit langem erfolgreich angewandt, etwa im Risikomanagement von Projekten (siehe auch [Dorofee96]) oder dem __System Engineering__ (siehe [Rechtin2000]).",
      "id": [
        "298152"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298153]\n\n[Bass+03] diskutieren Qualitätsmerkmale und Möglichkeiten zur Umsetzung als so genannte Architectural Tactics.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Bass+03] diskutieren Qualitätsmerkmale und Möglichkeiten zur Umsetzung als so genannte Architectural Tactics.",
      "id": [
        "298153"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298154]\n\n[Blaha98] beschreiben Ansätze zum Entwurf datenorientierter Systeme.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Blaha98] beschreiben Ansätze zum Entwurf datenorientierter Systeme.",
      "id": [
        "298154"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298155]\n\n[Dorofee96] fokussiert auf ein durchgängiges System von Risikomanagement und beschreibt dazu ein System von Einflussfaktoren auf Projekte.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Dorofee96] fokussiert auf ein durchgängiges System von Risikomanagement und beschreibt dazu ein System von Einflussfaktoren auf Projekte.",
      "id": [
        "298155"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298156]\n\n[Hofmeister2000] beschreibt eine „globale Analyse“, die auch auf die Darstellung der Einflussfaktoren sowie die Entwicklung von Strategien abzielt.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Hofmeister2000] beschreibt eine „globale Analyse“, die auch auf die Darstellung der Einflussfaktoren sowie die Entwicklung von Strategien abzielt.",
      "id": [
        "298156"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298157]\n\n[Martin08] zeigt den durchweg positiven Effekt von __Clean Code__ auf: Verständlicher Quellcode hilft auch beim Verständnis von Architekturen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Martin08] zeigt den durchweg positiven Effekt von __Clean Code__ auf: Verständlicher Quellcode hilft auch beim Verständnis von Architekturen.",
      "id": [
        "298157"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298158]\n\n[Meszaros97] stellt einige Muster zur Definition von Architekturen vor.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Meszaros97] stellt einige Muster zur Definition von Architekturen vor.",
      "id": [
        "298158"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298159]\n\n[Möricke04] bietet einen aktuellen Überblick über weitere Aspekte der IT-Sicherheit.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Möricke04] bietet einen aktuellen Überblick über weitere Aspekte der IT-Sicherheit.",
      "id": [
        "298159"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298160]\n\n[Rechtin2000] ist eine Fundgrube für Heuristiken und Vorgehensweisen beim Entwurf von Architekturen.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Rechtin2000] ist eine Fundgrube für Heuristiken und Vorgehensweisen beim Entwurf von Architekturen.",
      "id": [
        "298160"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298161]\n\n[Siedersleben04] beschreibt das Vorgehen beim Entwurf von Komponenten. Zwar bleiben dabei viele der hier genannten Einflussfaktoren außen vor, jedoch erläutert er nachvollziehbar und praxisorientiert, wie Sie zu einer angemessenen Struktur von Komponenten kommen können.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Siedersleben04] beschreibt das Vorgehen beim Entwurf von Komponenten. Zwar bleiben dabei viele der hier genannten Einflussfaktoren außen vor, jedoch erläutert er nachvollziehbar und praxisorientiert, wie Sie zu einer angemessenen Struktur von Komponenten kommen können.",
      "id": [
        "298161"
      ]
    }
  },
  {
    "bitmark": "[.article:bitmark--]\n[@id:298162]\n\n[Yourdon99] charakterisiert pragmatisch und sehr praxisorientiert die Probleme „unmöglicher“ Projekte („__mission impossible projects__“). Hier finden Sie Ratschläge und Heuristiken zur Schadensminimierung für die Projektbeteiligten.",
    "bit": {
      "type": "article",
      "format": "bitmark--",
      "body": "[Yourdon99] charakterisiert pragmatisch und sehr praxisorientiert die Probleme „unmöglicher“ Projekte („__mission impossible projects__“). Hier finden Sie Ratschläge und Heuristiken zur Schadensminimierung für die Projektbeteiligten.",
      "id": [
        "298162"
      ]
    }
  }
]