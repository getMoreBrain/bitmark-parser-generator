
import { BitmarkParserHelper, TypeKey } from '../../../parser/bitmark/BitmarkParserHelper';


// Generated by peggy v. 3.0.2 (ts-pegjs plugin v. 3.1.0 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

 // GLOBAL JS

//
// Global variables
//

// None



export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "PeggySyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, PeggySyntaxError.prototype);
    } else {
      (this as any).__proto__ = PeggySyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, PeggySyntaxError);
    }
  }

  format(sources: { grammarSource?: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].grammarSource === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

function peg$parse(input: string, options?: ParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { bitmark: peg$parsebitmark, bit: peg$parsebit, body: peg$parsebody, cardContent: peg$parsecardContent };
  let peg$startRuleFunction: () => any = peg$parsebitmark;

  const peg$c0 = function(firstBit: any, bits: any): any { return helper.buildBits([ firstBit, ...bits]) };
  const peg$c1 = function(bit: any): any { return helper.buildBits([ bit ]) };
  const peg$c2 = "[.";
  const peg$c3 = peg$literalExpectation("[.", false);
  const peg$c4 = /^[^\]]/;
  const peg$c5 = peg$classExpectation(["]"], true, false);
  const peg$c6 = "]";
  const peg$c7 = peg$literalExpectation("]", false);
  const peg$c8 = function(bit: any): any { return bit };
  const peg$c9 = function(bitHeader: any, bitContent: any): any { return helper.buildBit(bitHeader, bitContent) };
  const peg$c10 = function(bit: any): any { return helper.invalidBit(bit) };
  const peg$c11 = function(bitType: any, formatAndResource: any): any { return helper.buildBitHeader(bitType, formatAndResource) };
  const peg$c12 = function(value1: any, value2: any): any { return helper.buildTextAndResourceType(value1, value2) };
  const peg$c13 = ":";
  const peg$c14 = peg$literalExpectation(":", false);
  const peg$c15 = function(value: any): any { return { type: TypeKey.TextFormat, value } };
  const peg$c16 = "&";
  const peg$c17 = peg$literalExpectation("&", false);
  const peg$c18 = function(value: any): any { return { type: TypeKey.ResourceType, value } };
  const peg$c19 = function(value: any): any { return helper.reduceToArrayOfTypes(value) };
  const peg$c20 = function(value: any): any { return value };
  const peg$c21 = function(value: any, others: any): any { return { type: TypeKey.TrueFalse_V1, value: [...value, ...others] } };
  const peg$c22 = function(value: any): any { return { type: TypeKey.BodyLine, value: value } };
  const peg$c23 = function(value: any): any { return { type: TypeKey.CardSet, value: value[1].flat() } };
  const peg$c24 = "===";
  const peg$c25 = peg$literalExpectation("===", false);
  const peg$c26 = function(): any { helper.processCardSetStart(); };
  const peg$c27 = function(): any { helper.processCardSetEnd(); };
  const peg$c28 = function(value: any): any { helper.processCard(); return value[2]; };
  const peg$c29 = function(value: any): any {
      const cards = helper.reduceToArrayOfTypes(value, TypeKey.Card);
      return cards;
    };
  const peg$c30 = "==";
  const peg$c31 = peg$literalExpectation("==", false);
  const peg$c32 = "--";
  const peg$c33 = peg$literalExpectation("--", false);
  const peg$c34 = function(value: any): any { return helper.processPossibleCardLine(value); };
  const peg$c35 = function(value: any): any { return helper.processCardLine(value); };
  const peg$c36 = function(value: any): any { return value; };
  const peg$c37 = function(value: any): any { return { type: TypeKey.BodyChar, value: value } };
  const peg$c38 = function(value: any, others: any): any { return { type: TypeKey.Gap, value: [value, ...others] }; };
  const peg$c39 = function(value: any, others: any): any { return { type: TypeKey.Select, value: [...value, ...others] } };
  const peg$c40 = function(value: any, props: any): any {
      // console.log('RESOURCE_TAGS', value, props);

      // TODO - insert other tags values into the resource tag value
      return helper.processResourceTags(value, props);
    };
  const peg$c41 = "[&";
  const peg$c42 = peg$literalExpectation("[&", false);
  const peg$c43 = function(key: any, value: any): any { return { type: TypeKey.Resource, key, url: value } };
  const peg$c44 = "[@";
  const peg$c45 = peg$literalExpectation("[@", false);
  const peg$c46 = function(key: any, value: any): any { return { type: TypeKey.ResourceProperty, key, value } };
  const peg$c47 = "[";
  const peg$c48 = peg$literalExpectation("[", false);
  const peg$c49 = "#";
  const peg$c50 = peg$literalExpectation("#", false);
  const peg$c51 = function(level: any, title: any): any { return { type: TypeKey.Title, value: { level, title } } };
  const peg$c52 = "[\u25BC";
  const peg$c53 = peg$literalExpectation("[\u25BC", false);
  const peg$c54 = function(value: any): any { return { type: TypeKey.Anchor, value } };
  const peg$c55 = "[\u25BA";
  const peg$c56 = peg$literalExpectation("[\u25BA", false);
  const peg$c57 = function(value: any): any { return { type: TypeKey.Reference, value } };
  const peg$c58 = function(key: any, value: any): any { return { type: TypeKey.Property, key, value } };
  const peg$c59 = "[%";
  const peg$c60 = peg$literalExpectation("[%", false);
  const peg$c61 = function(value: any): any { return { type: TypeKey.ItemLead, value } };
  const peg$c62 = "[!";
  const peg$c63 = peg$literalExpectation("[!", false);
  const peg$c64 = function(value: any): any { return { type: TypeKey.Instruction, value } };
  const peg$c65 = "[?";
  const peg$c66 = peg$literalExpectation("[?", false);
  const peg$c67 = function(value: any): any { return { type: TypeKey.Hint, value } };
  const peg$c68 = "[+";
  const peg$c69 = peg$literalExpectation("[+", false);
  const peg$c70 = function(value: any): any { return { type: TypeKey.True, value } };
  const peg$c71 = "[-";
  const peg$c72 = peg$literalExpectation("[-", false);
  const peg$c73 = function(value: any): any { return { type: TypeKey.False, value } };
  const peg$c74 = "[$";
  const peg$c75 = peg$literalExpectation("[$", false);
  const peg$c76 = function(value: any): any { return { type: TypeKey.SampleSolution, value } };
  const peg$c77 = "||";
  const peg$c78 = peg$literalExpectation("||", false);
  const peg$c79 = function(value: any): any { return { type: TypeKey.Comment, value } };
  const peg$c80 = "[_";
  const peg$c81 = peg$literalExpectation("[_", false);
  const peg$c82 = function(value: any): any { return { type: TypeKey.Cloze, value } };
  const peg$c83 = /^[^:\]]/;
  const peg$c84 = peg$classExpectation([":", "]"], true, false);
  const peg$c85 = /^[^&:\]]/;
  const peg$c86 = peg$classExpectation(["&", ":", "]"], true, false);
  const peg$c87 = "multiple-choice-text";
  const peg$c88 = peg$literalExpectation("multiple-choice-text", false);
  const peg$c89 = "";
  const peg$c90 = function(): any { return true };
  const peg$c91 = /^[^||]/;
  const peg$c92 = peg$classExpectation(["|", "|"], true, false);
  const peg$c93 = peg$otherExpectation("Empty");
  const peg$c94 = /^[ \t]/;
  const peg$c95 = peg$classExpectation([" ", "\t"], false, false);
  const peg$c96 = peg$otherExpectation("Anything");
  const peg$c97 = peg$anyExpectation();
  const peg$c98 = peg$otherExpectation("Character");
  const peg$c99 = /^[^\n\r\u2028\u2029]/;
  const peg$c100 = peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], true, false);
  const peg$c101 = peg$otherExpectation("Line");
  const peg$c102 = peg$otherExpectation("whitespace in line");
  const peg$c103 = peg$otherExpectation("Blank Line");
  const peg$c104 = peg$otherExpectation("Line Terminator");
  const peg$c105 = "\n";
  const peg$c106 = peg$literalExpectation("\n", false);
  const peg$c107 = "\r\n";
  const peg$c108 = peg$literalExpectation("\r\n", false);
  const peg$c109 = "\r";
  const peg$c110 = peg$literalExpectation("\r", false);
  const peg$c111 = "\u2028";
  const peg$c112 = peg$literalExpectation("\u2028", false);
  const peg$c113 = "\u2029";
  const peg$c114 = peg$literalExpectation("\u2029", false);

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): FileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: FileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: FileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): LiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: ClassParts, inverted: boolean, ignoreCase: boolean): ClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): AnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): EndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): OtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): FileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: FileRange) {
    return new PeggySyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: FileRange) {
    return new PeggySyntaxError(
      PeggySyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parsebitmark(): any {
    let s0;

    s0 = peg$parseBM_Bitmark();

    return s0;
  }

  function peg$parseBM_Bitmark(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseBM_FirstBit();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBM_Bits();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseAnything();
      if (s2 as any !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseBM_FirstBit(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseBlankLine();
    while (s3 as any !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseBlankLine();
    }
    if (s2 as any !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseBM_BodyLine();
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseBM_BodyLine();
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseBM_Bits(): any {
    let s0, s1, s2;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parseBM_Bit();
    if (s2 as any !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 as any !== peg$FAILED) {
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseBM_Bit();
        if (s2 as any !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBM_Bit(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseBlankLine();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseBlankLine();
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBM_BitHeader();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseBM_BodyLine();
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseBM_BodyLine();
        }
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBM_BitHeader(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c2) {
        s4 = peg$c2;
        peg$currPos += 2;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s4 as any !== peg$FAILED) {
        s5 = [];
        if (peg$c4.test(input.charAt(peg$currPos))) {
          s6 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        while (s6 as any !== peg$FAILED) {
          s5.push(s6);
          if (peg$c4.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
        }
        if (s5 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s6 = peg$c6;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s6 as any !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBM_BodyLine(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseBitHeader();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = [];
      s1 = peg$parseChar();
      if (s1 as any !== peg$FAILED) {
        while (s1 as any !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseChar();
        }
      } else {
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsebit(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseBlankLine();
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseBlankLine();
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBit();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseBlankLine();
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseBlankLine();
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c8(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBit(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseBitHeader_Inline();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBitContent_Inline();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c9(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseBitHeader();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseBitContent();
        if (s2 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c9(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseAnything();
        if (s2 as any !== peg$FAILED) {
          s1 = input.substring(s1, peg$currPos);
        } else {
          s1 = s2;
        }
        if (s1 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c10(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseBitHeader(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBit_Value();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTextFormatAndResourceType();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c11(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBitHeader_Inline(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c3); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBit_Value_Inline();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTextFormatAndResourceType();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c11(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTextFormatAndResourceType(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseTextFormat();
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseResourceType();
    }
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTextFormat();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseResourceType();
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTextFormat(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c13;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBit_Value();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c15(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseResourceType(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c17); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBit_Value();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBitContent(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCardSet();
    if (s2 as any === peg$FAILED) {
      s2 = peg$parseBitTagChain();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseBodyLine();
      }
    }
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseCardSet();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseBitTagChain();
        if (s2 as any === peg$FAILED) {
          s2 = peg$parseBodyLine();
        }
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c19(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBitContent_Inline(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCardSet();
    if (s2 as any === peg$FAILED) {
      s2 = peg$parseBitTagChain_Inline();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseBodyLine();
      }
    }
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseCardSet();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseBitTagChain_Inline();
        if (s2 as any === peg$FAILED) {
          s2 = peg$parseBodyLine();
        }
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c19(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBitTagChain(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseBitTag();
    if (s2 as any !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseChainedBitTag();
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseChainedBitTag();
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c19(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBitTagChain_Inline(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseBitTag_Inline();
    if (s2 as any !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseChainedBitTag_Inline();
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseChainedBitTag_Inline();
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c19(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseChainedBitTag(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseWSL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBitTag();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBitTag(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseTitleTag();
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseCommentTag();
      if (s1 as any === peg$FAILED) {
        s1 = peg$parseAnchorTag();
        if (s1 as any === peg$FAILED) {
          s1 = peg$parseReferenceTag();
          if (s1 as any === peg$FAILED) {
            s1 = peg$parsePropertyTag();
            if (s1 as any === peg$FAILED) {
              s1 = peg$parseItemLeadTag();
              if (s1 as any === peg$FAILED) {
                s1 = peg$parseInstructionTag();
                if (s1 as any === peg$FAILED) {
                  s1 = peg$parseHintTag();
                  if (s1 as any === peg$FAILED) {
                    s1 = peg$parseTrueFalseTags_V1();
                    if (s1 as any === peg$FAILED) {
                      s1 = peg$parseResourceTags();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c20(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseChainedBitTag_Inline(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseWSL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseBitTag();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBitTag_Inline(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseTitleTag();
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseCommentTag();
      if (s1 as any === peg$FAILED) {
        s1 = peg$parseAnchorTag();
        if (s1 as any === peg$FAILED) {
          s1 = peg$parseReferenceTag();
          if (s1 as any === peg$FAILED) {
            s1 = peg$parsePropertyTag();
            if (s1 as any === peg$FAILED) {
              s1 = peg$parseItemLeadTag();
              if (s1 as any === peg$FAILED) {
                s1 = peg$parseInstructionTag();
                if (s1 as any === peg$FAILED) {
                  s1 = peg$parseHintTag();
                  if (s1 as any === peg$FAILED) {
                    s1 = peg$parseResourceTags();
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c20(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTrueFalseTags_V1(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseTrueInlineTag();
    if (s2 as any === peg$FAILED) {
      s2 = peg$parseFalseInlineTag();
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseTrueInlineTag();
        if (s2 as any === peg$FAILED) {
          s2 = peg$parseFalseInlineTag();
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseTrueInlineTag();
      if (s3 as any === peg$FAILED) {
        s3 = peg$parseFalseInlineTag();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseInstructionTag();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseHintTag();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parsePropertyTag();
            }
          }
        }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseTrueInlineTag();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseFalseInlineTag();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseInstructionTag();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parseHintTag();
              if (s3 as any === peg$FAILED) {
                s3 = peg$parsePropertyTag();
              }
            }
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c21(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBodyLine(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseNL();
    if (s2 as any === peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseChar();
      if (s4 as any !== peg$FAILED) {
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseChar();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseEOL();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s2 as any !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c22(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCardSet(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseCardSetStart();
    if (s2 as any !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseCard();
      while (s4 as any !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseCard();
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseCardSetEnd();
        if (s4 as any !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c23(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCardSetStart(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c24) {
        s4 = peg$c24;
        peg$currPos += 3;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseNL();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      peg$silentFails--;
      if (s3 as any !== peg$FAILED) {
        peg$currPos = s2;
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c26();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCardSetEnd(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c24) {
      s2 = peg$c24;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parseEOL();
      peg$silentFails--;
      if (s4 as any !== peg$FAILED) {
        peg$currPos = s3;
        s3 = undefined;
      } else {
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c27();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCard(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c24) {
      s2 = peg$c24;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parseNL();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseCardContent();
        if (s4 as any !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c28(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCardContent(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$parsePossibleCardLine();
    if (s4 as any !== peg$FAILED) {
      s5 = peg$currPos;
      peg$silentFails++;
      s6 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c24) {
        s7 = peg$c24;
        peg$currPos += 3;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }
      if (s7 as any !== peg$FAILED) {
        s8 = peg$parseEOL();
        if (s8 as any !== peg$FAILED) {
          s7 = [s7, s8];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      peg$silentFails--;
      if (s6 as any === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 as any !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    while (s3 as any !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parsePossibleCardLine();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$currPos;
        peg$silentFails++;
        s6 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c24) {
          s7 = peg$c24;
          peg$currPos += 3;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c25); }
        }
        if (s7 as any !== peg$FAILED) {
          s8 = peg$parseEOL();
          if (s8 as any !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        peg$silentFails--;
        if (s6 as any === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parsePossibleCardLine();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseEOL();
        peg$silentFails--;
        if (s5 as any === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 as any !== peg$FAILED) {
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c29(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePossibleCardLine(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c24) {
      s2 = peg$c24;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parseNL();
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any === peg$FAILED) {
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c30) {
        s2 = peg$c30;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseNL();
        if (s3 as any !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 as any === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c32) {
          s2 = peg$c32;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parseNL();
          if (s3 as any !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 as any === peg$FAILED) {
          s1 = peg$parseCardLine();
        }
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c34(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCardLine(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parseLine();
    if (s3 as any !== peg$FAILED) {
      s4 = peg$parseNL();
      if (s4 as any !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 as any !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c35(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebody(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseBodyTags();
    if (s2 as any === peg$FAILED) {
      s2 = peg$parseBodyChar();
    }
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseBodyTags();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseBodyChar();
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c36(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBodyChar(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseChar();
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseNL();
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c37(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBodyTags(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseGapTagsChain();
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseSelectTagsChain();
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c36(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseGapTagsChain(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseClozeInlineTag();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseClozeInlineTag();
      if (s3 as any === peg$FAILED) {
        s3 = peg$parseItemLeadTag();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseInstructionTag();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseHintTag();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parsePropertyTag();
            }
          }
        }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseClozeInlineTag();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseItemLeadTag();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseInstructionTag();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parseHintTag();
              if (s3 as any === peg$FAILED) {
                s3 = peg$parsePropertyTag();
              }
            }
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c38(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSelectTagsChain(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseTrueInlineTag();
    if (s2 as any === peg$FAILED) {
      s2 = peg$parseFalseInlineTag();
    }
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseTrueInlineTag();
        if (s2 as any === peg$FAILED) {
          s2 = peg$parseFalseInlineTag();
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseTrueInlineTag();
      if (s3 as any === peg$FAILED) {
        s3 = peg$parseFalseInlineTag();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseItemLeadTag();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseInstructionTag();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parseHintTag();
              if (s3 as any === peg$FAILED) {
                s3 = peg$parsePropertyTag();
              }
            }
          }
        }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseTrueInlineTag();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseFalseInlineTag();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseItemLeadTag();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parseInstructionTag();
              if (s3 as any === peg$FAILED) {
                s3 = peg$parseHintTag();
                if (s3 as any === peg$FAILED) {
                  s3 = peg$parsePropertyTag();
                }
              }
            }
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c39(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecardContent(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCardContentTags();
    if (s2 as any === peg$FAILED) {
      s2 = peg$parseBodyChar();
    }
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseCardContentTags();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseBodyChar();
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c36(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCardContentTags(): any {
    let s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCommentTag();
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseItemLeadTag();
      if (s1 as any === peg$FAILED) {
        s1 = peg$parseInstructionTag();
        if (s1 as any === peg$FAILED) {
          s1 = peg$parseHintTag();
          if (s1 as any === peg$FAILED) {
            s1 = peg$parseSampleSolutionTag();
            if (s1 as any === peg$FAILED) {
              s1 = peg$parseTrueTag();
              if (s1 as any === peg$FAILED) {
                s1 = peg$parseFalseTag();
                if (s1 as any === peg$FAILED) {
                  s1 = peg$parsePropertyTag();
                  if (s1 as any === peg$FAILED) {
                    s1 = peg$parseTitleTag();
                    if (s1 as any === peg$FAILED) {
                      s1 = peg$parseResourceTags();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c36(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseResourceTags(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseResourceTag();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseResourcePropertyTag();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseResourcePropertyTag();
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c40(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseResourceTag(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c41) {
        s2 = peg$c41;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c42); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseKeyValueTag_Key();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseKeyValueTag_Value();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c6;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c43(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseResourcePropertyTag(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c44) {
      s1 = peg$c44;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c45); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseKeyValueTag_Key();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseKeyValueTag_Value();
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c46(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTitleTag(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 91) {
        s2 = peg$c47;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c48); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        if (input.charCodeAt(peg$currPos) === 35) {
          s4 = peg$c49;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c50); }
        }
        if (s4 as any !== peg$FAILED) {
          while (s4 as any !== peg$FAILED) {
            s3.push(s4);
            if (input.charCodeAt(peg$currPos) === 35) {
              s4 = peg$c49;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c50); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseTag_Value();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c6;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c51(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAnchorTag(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c52) {
        s2 = peg$c52;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTag_Value();
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c54(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseReferenceTag(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c55) {
        s2 = peg$c55;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTag_Value();
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c57(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePropertyTag(): any {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c44) {
        s2 = peg$c44;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseKeyValueTag_Key();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseKeyValueTag_Value();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c6;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c58(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseItemLeadTag(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c59) {
        s2 = peg$c59;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTag_Value();
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c61(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInstructionTag(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c62) {
        s2 = peg$c62;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTag_Value();
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c64(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHintTag(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c65) {
        s2 = peg$c65;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTag_Value();
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c67(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTrueTag(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c68) {
        s2 = peg$c68;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTag_Value();
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c70(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFalseTag(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c71) {
        s2 = peg$c71;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTag_Value();
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c73(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSampleSolutionTag(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c74) {
        s2 = peg$c74;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseTag_Value();
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s4 = peg$c6;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c7); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c76(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCommentTag(): any {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseNL();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c77) {
        s2 = peg$c77;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c78); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseComment_Value();
        if (s3 as any !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c77) {
            s4 = peg$c77;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c78); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c79(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseClozeInlineTag(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c80) {
      s1 = peg$c80;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c81); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTag_Value();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c6;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c82(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTrueInlineTag(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c68) {
      s1 = peg$c68;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c69); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTag_Value();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c6;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c70(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFalseInlineTag(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c71) {
      s1 = peg$c71;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTag_Value();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c6;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c73(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTag_Value(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c4.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    while (s3 as any !== peg$FAILED) {
      s2.push(s3);
      if (peg$c4.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
    }
    if (s2 as any !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c20(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseKeyValueTag_Key(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c83.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c84); }
    }
    while (s3 as any !== peg$FAILED) {
      s2.push(s3);
      if (peg$c83.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c84); }
      }
    }
    if (s2 as any !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c20(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBit_Value(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c85.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c86); }
    }
    while (s3 as any !== peg$FAILED) {
      s2.push(s3);
      if (peg$c85.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }
    }
    if (s2 as any !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c20(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBit_Value_Inline(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 20) === peg$c87) {
      s2 = peg$c87;
      peg$currPos += 20;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c88); }
    }
    if (s2 as any !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c20(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseKeyValueTag_Value(): any {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c13;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c14); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseTag_Value();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$c89;
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c90();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseComment_Value(): any {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$c91.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c92); }
    }
    while (s3 as any !== peg$FAILED) {
      s2.push(s3);
      if (peg$c91.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }
    }
    if (s2 as any !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c20(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEmpty(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c94.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }
    if (s2 as any === peg$FAILED) {
      s2 = peg$parseNL();
    }
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      if (peg$c94.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseNL();
      }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseEOF();
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c93); }
    }

    return s0;
  }

  function peg$parseAnything(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c97); }
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c96); }
    }

    return s0;
  }

  function peg$parseChar(): any {
    let s0, s1;

    peg$silentFails++;
    if (peg$c99.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c100); }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c98); }
    }

    return s0;
  }

  function peg$parseLine(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parseChar();
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseChar();
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c101); }
    }

    return s0;
  }

  function peg$parseWSL(): any {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$c94.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      if (peg$c94.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c102); }
    }

    return s0;
  }

  function peg$parseBlankLine(): any {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c94.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }
    while (s2 as any !== peg$FAILED) {
      s1.push(s2);
      if (peg$c94.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c95); }
      }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseNL();
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c103); }
    }

    return s0;
  }

  function peg$parseNL(): any {
    let s0, s1;

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c105;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c106); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c107) {
        s0 = peg$c107;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c109;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c110); }
        }
        if (s0 as any === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8232) {
            s0 = peg$c111;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c112); }
          }
          if (s0 as any === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8233) {
              s0 = peg$c113;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c114); }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c104); }
    }

    return s0;
  }

  function peg$parseEOL(): any {
    let s0, s1;

    s0 = peg$parseNL();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }
      peg$silentFails--;
      if (s1 as any === peg$FAILED) {
        s0 = undefined;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEOF(): any {
    let s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c97); }
    }
    peg$silentFails--;
    if (s1 as any === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

   // PER PARSE JS

  //
  // Instance variables
  //

  const helper = new BitmarkParserHelper({
    parse: peg$parse,
    parserText: text,
    parserLocation: location,
  });




  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface ParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: ParseOptions) => any;
export const parse: ParseFunction = peg$parse;

